From 2097ec99f51fb120cbbb82b947085eb9a1977b3b Mon Sep 17 00:00:00 2001
From: John Chung <john.chung@mic.com.tw>
Date: Wed, 23 Dec 2020 14:01:22 +0800
Subject: [PATCH 2/2] [s5549] Change power control feature to x86-power-control

Differential Revision: http://10.99.241.45/D1502
---
 meta-mct/meta-s5549/conf/machine/s5549.conf        |   4 +
 .../0006-Set-the-default-GPIO-pass-through.patch   |  88 ++++++
 .../u-boot/u-boot-aspeed_2016.07.bbappend          |   2 +-
 ...le-pass-through-on-GPIOE1-and-GPIOE3-free.patch | 130 +++++++++
 ...GPIOE0-and-GPIOE2-pass-through-by-default.patch |  57 ++++
 ...w-monitoring-of-power-control-input-GPIOs.patch |  80 ++++++
 .../linux/linux-aspeed/aspeed-bmc-mct-s5549.dts    |  11 +-
 .../recipes-kernel/linux/linux-aspeed_git.bbappend |   3 +
 ...0001-leave-gpood-monitor-to-other-service.patch |  74 -----
 .../chassis/obmc-op-control-power_git.bbappend     |   6 -
 .../0001-add-SEL-log-for-Power-Button-Press.patch  |  62 ----
 .../0002-Add-Power-button-override-SEL.patch       |  54 ----
 ...r-button-and-reset-button-press-and-long-.patch |  68 -----
 ...Write-to-SEL-when-reset-button-is-pressed.patch |  45 ---
 ...vent-issue-for-the-power-and-reset-button.patch | 148 ----------
 .../chassis/obmc-phosphor-buttons_git.bbappend     |   9 -
 ...interface-for-AC-restore-always-on-policy.patch |  54 ----
 ...86-power-control-relatived-dbus-interface.patch |  65 +++++
 .../0011-Add-property-for-power-soft-action.patch  |  29 ++
 .../dbus/phosphor-dbus-interfaces_git.bbappend     |   3 +-
 .../gpio/button-monitor/CMakeLists.txt             |  34 ---
 .../gpio/button-monitor/power-button-monitor.cpp   | 130 ---------
 .../gpio/button-monitor/power-button-monitor.hpp   |  33 ---
 .../button-monitor/power-button-monitor.service    |  12 -
 .../gpio/button-monitor/reset-button-monitor.cpp   | 130 ---------
 .../gpio/button-monitor/reset-button-monitor.hpp   |  33 ---
 .../button-monitor/reset-button-monitor.service    |  12 -
 .../recipes-phosphor/gpio/button-monitor/util.hpp  | 188 -------------
 .../gpio/button-state/id-button-pressed.service    |  10 -
 .../gpio/button-state/toggle_identify_led.sh       |  21 --
 .../gpio/cpu-state/obmc/gpio/prochot0              |   6 -
 .../gpio/cpu-state/obmc/gpio/prochot0_deassert     |   5 -
 .../gpio/cpu-state/obmc/gpio/prochot1              |   6 -
 .../gpio/cpu-state/obmc/gpio/prochot1_deassert     |   5 -
 .../0002-init-host-status.patch                    |  68 -----
 .../gpio/phosphor-gpio-monitor/s5549_gpio.json     |  27 --
 .../gpio/phosphor-gpio-monitor_git.bbappend        |   1 -
 .../recipes-phosphor/gpio/power-state.bb           |  24 --
 .../power-state/SetPowerGoodPropertyOff.service    |   6 -
 .../power-state/SetPowerGoodPropertyOn.service     |   7 -
 .../gpio/power-state/setPowerProperty.sh           |  47 ----
 .../images/obmc-phosphor-image.bbappend            |   4 -
 ...0015-Add-debug-message-for-watchdog-reset.patch |  24 --
 ...r-control-until-pervious-action-completed.patch | 155 ----------
 ...r-soft-command-from-action-off-to-action-.patch |  25 ++
 .../ipmi/phosphor-ipmi-host_git.bbappend           |   3 +-
 .../recipes-phosphor/mct-ipmi-oem/files/oemcmd.cpp |  10 +-
 .../mct-powerctrl/files/host-gpio.service          |   9 -
 .../mct-powerctrl/files/host-powercyclelog.service |  13 -
 .../mct-powerctrl/files/host-poweroff.service      |  14 -
 .../mct-powerctrl/files/host-poweron.service       |  14 -
 .../mct-powerctrl/files/host-powerreset.service    |  13 -
 .../mct-powerctrl/files/init_once.sh               |   6 -
 .../mct-powerctrl/files/powercyclelog.sh           |  10 -
 .../mct-powerctrl/files/poweroff.sh                |  26 --
 .../mct-powerctrl/files/poweron.sh                 |  29 --
 .../mct-powerctrl/files/powerreset.sh              |  27 --
 .../mct-powerctrl/mct-powerctrl.bb                 |  32 ---
 .../packagegroups/packagegroup-mct-apps.bbappend   |   8 +-
 .../0004-support-ipmi-ACPI-sensor.patch            |  48 ++--
 .../0018-change-power-match-to-pgood-event.patch   |  76 -----
 .../sensors/dbus-sensors_git.bbappend              |   1 -
 .../phosphor-settings-manager/ac-boot.override.yml |   6 +
 .../power-restore-delay.override.yml               |   8 +
 .../power-restore-policy.override.yml              |   6 +-
 .../phosphor-settings-manager_git.bbappend         |   2 +
 .../0001-make-pgood-property-writable.patch        |  34 ---
 .../skeleton/obmc-libobmc-intf/gpio_defs.json      |  42 ---
 .../skeleton/obmc-libobmc-intf_git.bbappend        |   5 -
 .../0001-Detect-host-status-by-pgood.patch         | 137 ---------
 ...termine-the-host-initial-state-with-pgood.patch |  73 -----
 ...ent-the-AC-restore-random-and-fixed-delay.patch | 105 -------
 .../state/phosphor-state-manager_git.bbappend      |   5 +-
 .../0001-Implement-some-power-feature.patch        | 313 +++++++++++++++++++++
 .../x86-power-control/power-config-host0.json      |  11 +
 .../chassis/x86-power-control_%.bbappend           |  15 +
 76 files changed, 881 insertions(+), 2225 deletions(-)
 create mode 100755 meta-mct/meta-s5549/recipes-bsp/u-boot/u-boot-aspeed/0006-Set-the-default-GPIO-pass-through.patch
 create mode 100755 meta-mct/meta-s5549/recipes-kernel/linux/linux-aspeed/0011-Enable-pass-through-on-GPIOE1-and-GPIOE3-free.patch
 create mode 100755 meta-mct/meta-s5549/recipes-kernel/linux/linux-aspeed/0012-Enable-GPIOE0-and-GPIOE2-pass-through-by-default.patch
 create mode 100755 meta-mct/meta-s5549/recipes-kernel/linux/linux-aspeed/0013-Allow-monitoring-of-power-control-input-GPIOs.patch
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-op-control-power/0001-leave-gpood-monitor-to-other-service.patch
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-op-control-power_git.bbappend
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-phosphor-buttons/0001-add-SEL-log-for-Power-Button-Press.patch
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-phosphor-buttons/0002-Add-Power-button-override-SEL.patch
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-phosphor-buttons/0003-Remove-power-button-and-reset-button-press-and-long-.patch
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-phosphor-buttons/0004-Write-to-SEL-when-reset-button-is-pressed.patch
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-phosphor-buttons/0005-Fix-SEL-event-issue-for-the-power-and-reset-button.patch
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-phosphor-buttons_git.bbappend
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/dbus/phosphor-dbus-interfaces/0004-Add-interface-for-AC-restore-always-on-policy.patch
 create mode 100755 meta-mct/meta-s5549/recipes-phosphor/dbus/phosphor-dbus-interfaces/0010-Add-x86-power-control-relatived-dbus-interface.patch
 create mode 100755 meta-mct/meta-s5549/recipes-phosphor/dbus/phosphor-dbus-interfaces/0011-Add-property-for-power-soft-action.patch
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/CMakeLists.txt
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/power-button-monitor.cpp
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/power-button-monitor.hpp
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/power-button-monitor.service
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/reset-button-monitor.cpp
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/reset-button-monitor.hpp
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/reset-button-monitor.service
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/util.hpp
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/gpio/button-state/id-button-pressed.service
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/gpio/button-state/toggle_identify_led.sh
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/gpio/cpu-state/obmc/gpio/prochot0
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/gpio/cpu-state/obmc/gpio/prochot0_deassert
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/gpio/cpu-state/obmc/gpio/prochot1
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/gpio/cpu-state/obmc/gpio/prochot1_deassert
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/gpio/phosphor-gpio-monitor/0002-init-host-status.patch
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/gpio/power-state.bb
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/gpio/power-state/SetPowerGoodPropertyOff.service
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/gpio/power-state/SetPowerGoodPropertyOn.service
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/gpio/power-state/setPowerProperty.sh
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/ipmi/phosphor-ipmi-host/0015-Add-debug-message-for-watchdog-reset.patch
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/ipmi/phosphor-ipmi-host/0019-block-power-control-until-pervious-action-completed.patch
 create mode 100755 meta-mct/meta-s5549/recipes-phosphor/ipmi/phosphor-ipmi-host/0020-Change-power-soft-command-from-action-off-to-action-.patch
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/host-gpio.service
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/host-powercyclelog.service
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/host-poweroff.service
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/host-poweron.service
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/host-powerreset.service
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/init_once.sh
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/powercyclelog.sh
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/poweroff.sh
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/poweron.sh
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/powerreset.sh
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/mct-powerctrl.bb
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/sensors/dbus-sensors/0018-change-power-match-to-pgood-event.patch
 create mode 100755 meta-mct/meta-s5549/recipes-phosphor/settings/phosphor-settings-manager/ac-boot.override.yml
 create mode 100755 meta-mct/meta-s5549/recipes-phosphor/settings/phosphor-settings-manager/power-restore-delay.override.yml
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/skeleton/obmc-libobmc-intf/0001-make-pgood-property-writable.patch
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/skeleton/obmc-libobmc-intf/gpio_defs.json
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/skeleton/obmc-libobmc-intf_git.bbappend
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/state/phosphor-state-manager/0001-Detect-host-status-by-pgood.patch
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/state/phosphor-state-manager/0002-Determine-the-host-initial-state-with-pgood.patch
 delete mode 100755 meta-mct/meta-s5549/recipes-phosphor/state/phosphor-state-manager/0003-Implement-the-AC-restore-random-and-fixed-delay.patch
 create mode 100755 meta-mct/meta-s5549/recipes-x86/chassis/x86-power-control/0001-Implement-some-power-feature.patch
 create mode 100755 meta-mct/meta-s5549/recipes-x86/chassis/x86-power-control/power-config-host0.json
 create mode 100755 meta-mct/meta-s5549/recipes-x86/chassis/x86-power-control_%.bbappend

diff --git a/meta-mct/meta-s5549/conf/machine/s5549.conf b/meta-mct/meta-s5549/conf/machine/s5549.conf
index c5f7d30..7814f4f 100755
--- a/meta-mct/meta-s5549/conf/machine/s5549.conf
+++ b/meta-mct/meta-s5549/conf/machine/s5549.conf
@@ -12,6 +12,10 @@ FLASH_RWFS_OFFSET = "40960"
 
 VIRTUAL-RUNTIME_skeleton_workbook = "${MACHINE}-config"
 
+VIRTUAL-RUNTIME_obmc-host-state-manager = "x86-power-control"
+VIRTUAL-RUNTIME_obmc-chassis-state-manager = "x86-power-control"
+VIRTUAL-RUNTIME_obmc-discover-system-state = "x86-power-control"
+
 PREFERRED_PROVIDER_virtual/phosphor-led-manager-config-native = "mct-led-manager-config-native"
 #PREFERRED_PROVIDER_virtual/phosphor-ipmi-sensor-inventory = "s5549-ipmi-sensor-map-native"
 
diff --git a/meta-mct/meta-s5549/recipes-bsp/u-boot/u-boot-aspeed/0006-Set-the-default-GPIO-pass-through.patch b/meta-mct/meta-s5549/recipes-bsp/u-boot/u-boot-aspeed/0006-Set-the-default-GPIO-pass-through.patch
new file mode 100755
index 0000000..fb68e9d
--- /dev/null
+++ b/meta-mct/meta-s5549/recipes-bsp/u-boot/u-boot-aspeed/0006-Set-the-default-GPIO-pass-through.patch
@@ -0,0 +1,88 @@
+From ef34e0bfd4e1b858e594da77b60c34807376f70d Mon Sep 17 00:00:00 2001
+From: John Chung <john.chung@mic.com.tw>
+Date: Tue, 22 Dec 2020 10:25:17 +0800
+Subject: [PATCH] Set the default GPIO pass through
+
+---
+ board/aspeed/ast-g5/ast-g5.c | 47 ++++++++++++++++++++++++++++++++++++++++++++
+ 1 file changed, 47 insertions(+)
+
+diff --git a/board/aspeed/ast-g5/ast-g5.c b/board/aspeed/ast-g5/ast-g5.c
+index b687436..d81f41b 100755
+--- a/board/aspeed/ast-g5/ast-g5.c
++++ b/board/aspeed/ast-g5/ast-g5.c
+@@ -12,10 +12,30 @@
+ 
+ #include <asm/arch/ast_scu.h>
+ #include <asm/arch/ast-sdmc.h>
++#include <asm/arch/regs-scu.h>
+ #include <asm/io.h>
+ 
+ DECLARE_GLOBAL_DATA_PTR;
+ 
++static inline uint32_t ast_scu_read(uint32_t reg)
++{
++    uint32_t val = readl(AST_SCU_BASE + reg);
++
++    debug("ast_scu_read : reg = 0x%08x, val = 0x%08x\n", reg, val);
++    return val;
++}
++
++static inline void ast_scu_write(uint32_t val, uint32_t reg)
++{
++    debug("ast_scu_write : reg = 0x%08x, val = 0x%08x\n", reg, val);
++
++    writel(SCU_PROTECT_UNLOCK, AST_SCU_BASE);
++    writel(val, AST_SCU_BASE + reg);
++#ifdef CONFIG_AST_SCU_LOCK
++    writel(0xaa, AST_SCU_BASE);
++#endif
++}
++
+ /*--------------------------------------------------------------------
+  * @fn Light_BMC_Heartbeat_LED
+  * @brief switch the BMC_Heartbeat_LED solid ON
+@@ -39,6 +59,32 @@ void Set_Default_UART_Route(void)
+     *(volatile ulong *)(0x1E78909C) = 0x1400000 ;
+ }
+ 
++/*--------------------------------------------------------------------
++ * @fn Set_Default_GPIO_Pass_Through
++ * @brief Set the default GPIO pass through
++ *--------------------------------------------------------------------*/
++void Set_Default_GPIO_Pass_Through(void)
++{
++    puts("Set the default GPIO pass through\n");
++    //Enable GPIOE pin mode, SCU80[16:23] = 00 */
++    ast_scu_write(ast_scu_read(AST_SCU_FUN_PIN_CTRL1) & (~0x00FF0000),
++        AST_SCU_FUN_PIN_CTRL1);
++
++    //Enable all pass through pins by setting SCU8C[15:12] = 0x3.
++    //Pass-through pins set:
++    //GPIOE0 -> GPIOE1
++    //GPIOE2 -> GPIOE3
++    ast_scu_write(ast_scu_read(AST_SCU_FUN_PIN_CTRL4) | (0x3000),
++        AST_SCU_FUN_PIN_CTRL4);
++
++    //Disable HWStrap for GPIOE pass-through mode
++    //The write operation to SCU70(0x1e6e2070) only can set to '1'.
++    //To clear to '0', it must write '1' to 0x1e6e207c
++    if (ast_scu_read(AST_SCU_HW_STRAP1) & (0x1 << 22)){
++        ast_scu_write((0x1 << 22), AST_SCU_REVISION_ID);
++    }
++}
++
+ 
+ int board_init(void)
+ {
+@@ -47,6 +93,7 @@ int board_init(void)
+ 
+ 	Light_BMC_Heartbeat_LED();
+     Set_Default_UART_Route();
++	Set_Default_GPIO_Pass_Through();
+     
+ 	return 0;
+ }
+-- 
+2.7.4
+
diff --git a/meta-mct/meta-s5549/recipes-bsp/u-boot/u-boot-aspeed_2016.07.bbappend b/meta-mct/meta-s5549/recipes-bsp/u-boot/u-boot-aspeed_2016.07.bbappend
index 91a3130..30d693f 100755
--- a/meta-mct/meta-s5549/recipes-bsp/u-boot/u-boot-aspeed_2016.07.bbappend
+++ b/meta-mct/meta-s5549/recipes-bsp/u-boot/u-boot-aspeed_2016.07.bbappend
@@ -4,6 +4,6 @@ SRC_URI += "file://0001-Light-BMC-Heartbeat-LED.patch \
             file://0002-Set-the-default-UART-route-setting.patch \
             file://0003-get-mac-from-eeprom.patch \
             file://0004-Set-BMC-RTL8211E-PHY-LED.patch \
-            file://0005-Set-the-default-ACPI-setting.patch \
+            file://0006-Set-the-default-GPIO-pass-through.patch \
             "
 
diff --git a/meta-mct/meta-s5549/recipes-kernel/linux/linux-aspeed/0011-Enable-pass-through-on-GPIOE1-and-GPIOE3-free.patch b/meta-mct/meta-s5549/recipes-kernel/linux/linux-aspeed/0011-Enable-pass-through-on-GPIOE1-and-GPIOE3-free.patch
new file mode 100755
index 0000000..58a9725
--- /dev/null
+++ b/meta-mct/meta-s5549/recipes-kernel/linux/linux-aspeed/0011-Enable-pass-through-on-GPIOE1-and-GPIOE3-free.patch
@@ -0,0 +1,130 @@
+From 2075c5dc9424830563e7f63cf683824eeabeae5e Mon Sep 17 00:00:00 2001
+From: John Chung <john.chung@mic.com.tw>
+Date: Mon, 21 Dec 2020 15:35:19 +0800
+Subject: [PATCH 1/3] Enable pass-through on GPIOE1 and GPIOE3 free
+
+This change adds a gpio_disable_free() implementation that checks
+if the GPIO being freed is GPIOE1 (33) or GPIOE3 (35) and will
+re-enable the pass-through mux.
+
+Tested:
+Requested GPIOs 33 and 35 and used devmem to check that pass-through
+was disabled. Then freed them and checked that pass-through was
+enabled again.
+
+Signed-off-by: Jason M. Bills <jason.m.bills@linux.intel.com>
+---
+ drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c |  1 +
+ drivers/pinctrl/aspeed/pinctrl-aspeed.c    | 60 ++++++++++++++++++++++++++++++
+ drivers/pinctrl/aspeed/pinctrl-aspeed.h    |  3 ++
+ 3 files changed, 64 insertions(+)
+ mode change 100644 => 100755 drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c
+ mode change 100644 => 100755 drivers/pinctrl/aspeed/pinctrl-aspeed.c
+ mode change 100644 => 100755 drivers/pinctrl/aspeed/pinctrl-aspeed.h
+
+diff --git a/drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c b/drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c
+old mode 100644
+new mode 100755
+index 0cab4c2..a8d6418
+--- a/drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c
++++ b/drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c
+@@ -2815,6 +2815,7 @@ static const struct pinmux_ops aspeed_g5_pinmux_ops = {
+ 	.get_function_groups = aspeed_pinmux_get_fn_groups,
+ 	.set_mux = aspeed_pinmux_set_mux,
+ 	.gpio_request_enable = aspeed_gpio_request_enable,
++	.gpio_disable_free = aspeed_gpio_disable_free,
+ 	.strict = true,
+ };
+ 
+diff --git a/drivers/pinctrl/aspeed/pinctrl-aspeed.c b/drivers/pinctrl/aspeed/pinctrl-aspeed.c
+old mode 100644
+new mode 100755
+index 53f3f8a..4799408
+--- a/drivers/pinctrl/aspeed/pinctrl-aspeed.c
++++ b/drivers/pinctrl/aspeed/pinctrl-aspeed.c
+@@ -375,6 +375,66 @@ int aspeed_gpio_request_enable(struct pinctrl_dev *pctldev,
+ 	return 0;
+ }
+ 
++void aspeed_gpio_disable_free(struct pinctrl_dev *pctldev,
++			      struct pinctrl_gpio_range *range,
++			      unsigned int offset)
++{
++	const struct aspeed_pinctrl_data *pdata = pinctrl_dev_get_drvdata(pctldev);
++	const struct aspeed_pin_desc *pdesc = pdata->pins[offset].drv_data;
++	const struct aspeed_sig_expr ***prios, **funcs, *expr;
++	int ret;
++
++	/*
++	 * If we're freeing GPIOE1 (33) or GPIOE3 (35) then re-enable the
++	 * pass-through mux setting; otherwise, do nothing.
++	 */
++	if (offset != 33 && offset != 35)
++		return;
++
++	dev_dbg(pctldev->dev,
++		"Freeing pass-through pin %s (%d). Re-enabling pass-through.\n",
++		pdesc->name, offset);
++
++	if (!pdesc)
++		return;
++
++	prios = pdesc->prios;
++
++	if (!prios)
++		return;
++
++	/* Disable any functions of higher priority than GPIO just in case */
++	while ((funcs = *prios)) {
++		if (aspeed_gpio_in_exprs(funcs))
++			break;
++
++		ret = aspeed_disable_sig(&pdata->pinmux, funcs);
++		if (ret)
++			return;
++
++		prios++;
++	}
++
++	if (!funcs) {
++		char *signals = get_defined_signals(pdesc);
++
++		pr_warn("No GPIO signal type found on pin %s (%d). Found: %s\n",
++			pdesc->name, offset, signals);
++		kfree(signals);
++
++		return;
++	}
++
++	/*
++	 * Pass-through should be one priority higher than the GPIO function,
++	 * so decrement our prios and enable that function
++	 */
++	prios--;
++	funcs = *prios;
++	expr = *funcs;
++	aspeed_sig_expr_enable(&pdata->pinmux, expr);
++}
++
+ int aspeed_pinctrl_probe(struct platform_device *pdev,
+ 			 struct pinctrl_desc *pdesc,
+ 			 struct aspeed_pinctrl_data *pdata)
+diff --git a/drivers/pinctrl/aspeed/pinctrl-aspeed.h b/drivers/pinctrl/aspeed/pinctrl-aspeed.h
+old mode 100644
+new mode 100755
+index 4dcde3b..bd497c2
+--- a/drivers/pinctrl/aspeed/pinctrl-aspeed.h
++++ b/drivers/pinctrl/aspeed/pinctrl-aspeed.h
+@@ -101,6 +101,9 @@ int aspeed_pinmux_set_mux(struct pinctrl_dev *pctldev, unsigned int function,
+ int aspeed_gpio_request_enable(struct pinctrl_dev *pctldev,
+ 		struct pinctrl_gpio_range *range,
+ 		unsigned int offset);
++void aspeed_gpio_disable_free(struct pinctrl_dev *pctldev,
++		struct pinctrl_gpio_range *range,
++		unsigned int offset);
+ int aspeed_pinctrl_probe(struct platform_device *pdev,
+ 		struct pinctrl_desc *pdesc,
+ 		struct aspeed_pinctrl_data *pdata);
+-- 
+2.7.4
+
diff --git a/meta-mct/meta-s5549/recipes-kernel/linux/linux-aspeed/0012-Enable-GPIOE0-and-GPIOE2-pass-through-by-default.patch b/meta-mct/meta-s5549/recipes-kernel/linux/linux-aspeed/0012-Enable-GPIOE0-and-GPIOE2-pass-through-by-default.patch
new file mode 100755
index 0000000..55d9d84
--- /dev/null
+++ b/meta-mct/meta-s5549/recipes-kernel/linux/linux-aspeed/0012-Enable-GPIOE0-and-GPIOE2-pass-through-by-default.patch
@@ -0,0 +1,57 @@
+From b69929c87628a49e2594aa35467b4127471b3065 Mon Sep 17 00:00:00 2001
+From: John Chung <john.chung@mic.com.tw>
+Date: Mon, 21 Dec 2020 15:41:28 +0800
+Subject: [PATCH 2/3] Enable GPIOE0 and GPIOE2 pass-through by default
+
+This change sets the gpio DT pinctrl default configuration to
+enable GPIOE0 and GPIOE2 pass-through.  Since this causes
+pinctrl_get_select_default() to be called automatically for
+the gpio driver to claim the GPIO pins in those groups, we
+also need to call pinctrl_put() to release claim on the
+pass-through GPIOs so they can be requested at runtime.
+
+Tested:
+Disabled pass-through in uboot and confirmed that after booting
+Linux, pass-through is enabled and 'cat /sys/kernel/debug/pinctrl/
+1e6e2000.syscon\:pinctrl-aspeed-g5-pinctrl/pinmux-pins' shows that
+the pass-through GPIOs are UNCLAIMED.
+
+Signed-off-by: Jason M. Bills <jason.m.bills@linux.intel.com>
+---
+ drivers/gpio/gpio-aspeed.c | 10 ++++++++++
+ 1 file changed, 10 insertions(+)
+ mode change 100644 => 100755 drivers/gpio/gpio-aspeed.c
+
+diff --git a/drivers/gpio/gpio-aspeed.c b/drivers/gpio/gpio-aspeed.c
+old mode 100644
+new mode 100755
+index 09e53c5..ac33f81
+--- a/drivers/gpio/gpio-aspeed.c
++++ b/drivers/gpio/gpio-aspeed.c
+@@ -1140,6 +1140,7 @@ static int __init aspeed_gpio_probe(struct platform_device *pdev)
+ {
+ 	const struct of_device_id *gpio_id;
+ 	struct aspeed_gpio *gpio;
++	struct pinctrl *pinctrl;
+ 	int rc, i, banks, err;
+ 	u32 ngpio;
+ 
+@@ -1190,6 +1191,15 @@ static int __init aspeed_gpio_probe(struct platform_device *pdev)
+ 		return -ENOMEM;
+ 
+ 	/*
++	 * Select the pass-through pinctrl config to enable the pass-through
++	 * mux for GPIOs E0 and E2. Then call pinctrl_put() to release claim
++	 * of the GPIO pins, so they can be requested at runtime.
++	 */
++	pinctrl = pinctrl_get_select(&pdev->dev, "pass-through");
++	if (pinctrl)
++		pinctrl_put(pinctrl);
++
++	/*
+ 	 * Populate it with initial values read from the HW and switch
+ 	 * all command sources to the ARM by default
+ 	 */
+-- 
+2.7.4
+
diff --git a/meta-mct/meta-s5549/recipes-kernel/linux/linux-aspeed/0013-Allow-monitoring-of-power-control-input-GPIOs.patch b/meta-mct/meta-s5549/recipes-kernel/linux/linux-aspeed/0013-Allow-monitoring-of-power-control-input-GPIOs.patch
new file mode 100755
index 0000000..72ba386
--- /dev/null
+++ b/meta-mct/meta-s5549/recipes-kernel/linux/linux-aspeed/0013-Allow-monitoring-of-power-control-input-GPIOs.patch
@@ -0,0 +1,80 @@
+From 61d254e0eb1145004686ecb8aaa8f622bcc2a282 Mon Sep 17 00:00:00 2001
+From: John Chung <john.chung@mic.com.tw>
+Date: Mon, 21 Dec 2020 15:47:21 +0800
+Subject: [PATCH 3/3] Allow monitoring of power control input GPIOs
+
+The pass-through input GPIOs cannot be monitored because when
+requested, pass-through is disabled which causes a change on the
+pass-through output.
+
+The SIO GPIOs cannot be monitored because when requested, the
+request is rejected based on the value of the ACPI strap.
+
+This change removes the register check condition from the pass-
+through and desired SIO GPIOs so they can be requsted and
+monitored from power control.
+
+Tested:
+For pass-through, I used gpioset to hold a request on the input
+GPIOs and confirmed that pass-through remained enabled.
+
+For SIO, I used gpioget to confirm that I can successfully request
+and read the GPIO value.
+
+Signed-off-by: Jason M. Bills <jason.m.bills@linux.intel.com>
+---
+ drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c | 10 +++++-----
+ 1 file changed, 5 insertions(+), 5 deletions(-)
+
+diff --git a/drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c b/drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c
+index a8d6418..da515a1 100755
+--- a/drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c
++++ b/drivers/pinctrl/aspeed/pinctrl-aspeed-g5.c
+@@ -279,7 +279,7 @@ FUNC_GROUP_DECL(SD2, F19, E21, F20, D20, D21, E20, G18, C21);
+ 
+ #define B20 32
+ SIG_EXPR_LIST_DECL_SINGLE(B20, NCTS3, NCTS3, SIG_DESC_SET(SCU80, 16));
+-SIG_EXPR_DECL_SINGLE(GPIE0IN, GPIE0, GPIE0_DESC);
++SIG_EXPR_DECL_SINGLE(GPIE0IN, GPIE0);
+ SIG_EXPR_DECL_SINGLE(GPIE0IN, GPIE, GPIE_DESC);
+ SIG_EXPR_LIST_DECL_DUAL(B20, GPIE0IN, GPIE0, GPIE);
+ PIN_DECL_2(B20, GPIOE0, NCTS3, GPIE0IN);
+@@ -299,7 +299,7 @@ FUNC_GROUP_DECL(GPIE0, B20, C20);
+ 
+ #define F18 34
+ SIG_EXPR_LIST_DECL_SINGLE(F18, NDSR3, NDSR3, SIG_DESC_SET(SCU80, 18));
+-SIG_EXPR_DECL_SINGLE(GPIE2IN, GPIE2, GPIE2_DESC);
++SIG_EXPR_DECL_SINGLE(GPIE2IN, GPIE2);
+ SIG_EXPR_DECL_SINGLE(GPIE2IN, GPIE, GPIE_DESC);
+ SIG_EXPR_LIST_DECL_DUAL(F18, GPIE2IN, GPIE2, GPIE);
+ PIN_DECL_2(F18, GPIOE2, NDSR3, GPIE2IN);
+@@ -1412,7 +1412,7 @@ FUNC_GROUP_DECL(ADC15, H4);
+ 
+ #define R22 192
+ SIG_EXPR_DECL_SINGLE(SIOS3, SIOS3, SIG_DESC_SET(SCUA4, 8));
+-SIG_EXPR_DECL_SINGLE(SIOS3, ACPI, ACPI_DESC);
++SIG_EXPR_DECL_SINGLE(SIOS3, ACPI);
+ SIG_EXPR_LIST_DECL_DUAL(R22, SIOS3, SIOS3, ACPI);
+ SIG_EXPR_LIST_DECL_SINGLE(R22, DASHR22, DASHR22, SIG_DESC_SET(SCU94, 10));
+ PIN_DECL_2(R22, GPIOY0, SIOS3, DASHR22);
+@@ -1420,7 +1420,7 @@ FUNC_GROUP_DECL(SIOS3, R22);
+ 
+ #define R21 193
+ SIG_EXPR_DECL_SINGLE(SIOS5, SIOS5, SIG_DESC_SET(SCUA4, 9));
+-SIG_EXPR_DECL_SINGLE(SIOS5, ACPI, ACPI_DESC);
++SIG_EXPR_DECL_SINGLE(SIOS5, ACPI);
+ SIG_EXPR_LIST_DECL_DUAL(R21, SIOS5, SIOS5, ACPI);
+ SIG_EXPR_LIST_DECL_SINGLE(R21, DASHR21, DASHR21, SIG_DESC_SET(SCU94, 10));
+ PIN_DECL_2(R21, GPIOY1, SIOS5, DASHR21);
+@@ -1436,7 +1436,7 @@ FUNC_GROUP_DECL(SIOPWREQ, P22);
+ 
+ #define P21 195
+ SIG_EXPR_DECL_SINGLE(SIOONCTRL, SIOONCTRL, SIG_DESC_SET(SCUA4, 11));
+-SIG_EXPR_DECL_SINGLE(SIOONCTRL, ACPI, ACPI_DESC);
++SIG_EXPR_DECL_SINGLE(SIOONCTRL, ACPI);
+ SIG_EXPR_LIST_DECL_DUAL(P21, SIOONCTRL, SIOONCTRL, ACPI);
+ SIG_EXPR_LIST_DECL_SINGLE(P21, DASHP21, DASHP21, SIG_DESC_SET(SCU94, 11));
+ PIN_DECL_2(P21, GPIOY3, SIOONCTRL, DASHP21);
+-- 
+2.7.4
+
diff --git a/meta-mct/meta-s5549/recipes-kernel/linux/linux-aspeed/aspeed-bmc-mct-s5549.dts b/meta-mct/meta-s5549/recipes-kernel/linux/linux-aspeed/aspeed-bmc-mct-s5549.dts
index 2fbb87f..0480408 100755
--- a/meta-mct/meta-s5549/recipes-kernel/linux/linux-aspeed/aspeed-bmc-mct-s5549.dts
+++ b/meta-mct/meta-s5549/recipes-kernel/linux/linux-aspeed/aspeed-bmc-mct-s5549.dts
@@ -342,12 +342,17 @@
 
 &gpio {
     status = "okay";
+
+    pinctrl-names = "pass-through";
+    pinctrl-0 = <&pinctrl_gpie0_default
+            &pinctrl_gpie2_default>;
+
     gpio-line-names =
     /*A0-A7*/   "","","BMC_EUP_LOT6","","","","","",
     /*B0-B7*/   "","","","","","","PROCHOT","",
     /*C0-C7*/   "","","","","","","","",
     /*D0-D7*/   "","","","","","PHY_RST","","CLR_CMOS",
-    /*E0-E7*/   "","RSTBTN_OUT","","","","","","",
+    /*E0-E7*/   "RESET_BUTTON","RSTBTN_OUT","POWER_BUTTON","PWRBTN_OUT","NMI_BUTTON","","","",
     /*F0-F7*/   "PCH_NMI","","","","","","","",
     /*G0-G7*/   "","CATERR","","","BAT_MON","","","BIOS_SPI_SW",
     /*H0-H7*/   "","","","SYS_FAULT1","","","SYS_FAULT2","",
@@ -368,8 +373,8 @@
     /*W0-W7*/   "","","","","","","","",
     /*X0-X7*/   "","","","","","","","",
     /*Y0-Y7*/   "","","","","","","","",
-    /*Z0-Z7*/   "","","PWRBTN_OUT","PCH_SCI_LPC","","","","",
-    /*AA0-AA7*/ "","","","","","","","",
+    /*Z0-Z7*/   "","","","PCH_SCI_LPC","","","","",
+    /*AA0-AA7*/ "","","","","","POST_COMPLETE","","",
     /*AB0-AB7*/ "","","","","","","","",
     /*AC0-AC7*/ "","","","","","","","";
 };
diff --git a/meta-mct/meta-s5549/recipes-kernel/linux/linux-aspeed_git.bbappend b/meta-mct/meta-s5549/recipes-kernel/linux/linux-aspeed_git.bbappend
index d47d82c..6de77ad 100755
--- a/meta-mct/meta-s5549/recipes-kernel/linux/linux-aspeed_git.bbappend
+++ b/meta-mct/meta-s5549/recipes-kernel/linux/linux-aspeed_git.bbappend
@@ -9,5 +9,8 @@ SRC_URI += "file://s5549.cfg \
             file://0008-increase-rofs-space.patch \
             file://0009-Register-all-of-dimm-sensors-when-initializing.patch \
             file://0010-change-aspeed-rpm-driver-to-falling-edge.patch \
+            file://0011-Enable-pass-through-on-GPIOE1-and-GPIOE3-free.patch \
+            file://0012-Enable-GPIOE0-and-GPIOE2-pass-through-by-default.patch \
+            file://0013-Allow-monitoring-of-power-control-input-GPIOs.patch \
             "
 
diff --git a/meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-op-control-power/0001-leave-gpood-monitor-to-other-service.patch b/meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-op-control-power/0001-leave-gpood-monitor-to-other-service.patch
deleted file mode 100755
index 9740fd6..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-op-control-power/0001-leave-gpood-monitor-to-other-service.patch
+++ /dev/null
@@ -1,74 +0,0 @@
-From e79640fed82f72df4e6e7b5feddbfaf482a230e0 Mon Sep 17 00:00:00 2001
-From: Ray Lue <ray.lue@mic.com.tw>
-Date: Tue, 4 Feb 2020 19:40:46 +0800
-Subject: [PATCH] leave gpood monitor to other service
-
----
- op-pwrctl/power_control_obj.c | 12 +++++++++---
- 1 file changed, 9 insertions(+), 3 deletions(-)
- mode change 100644 => 100755 op-pwrctl/power_control_obj.c
-
-diff --git a/power_control_obj.c b/power_control_obj.c
-old mode 100644
-new mode 100755
-index ada9b3b..057c80f
---- a/power_control_obj.c
-+++ b/power_control_obj.c
-@@ -29,6 +29,7 @@ time_t pgood_timeout_start = 0;
- static gboolean
- poll_pgood(gpointer user_data)
- {
-+	return TRUE;
- 	ControlPower *control_power = object_get_control_power((Object*)user_data);
- 	Control* control = object_get_control((Object*)user_data);
- 
-@@ -57,7 +58,8 @@ poll_pgood(gpointer user_data)
- 		gpio_close(&g_gpio_configs.power_gpio.power_good_in);
- 		g_print("ERROR PowerControl: GPIO open error (gpio=%s,rc=%d)\n",
- 				g_gpio_configs.power_gpio.power_good_in.name, rc);
--		return FALSE;
-+		//Mitac, don't stop the polling
-+		return true;
- 	}
- 	rc = gpio_read(&g_gpio_configs.power_gpio.power_good_in, &pgood_state);
- 	gpio_close(&g_gpio_configs.power_gpio.power_good_in);
-@@ -133,7 +135,8 @@ poll_pgood(gpointer user_data)
- 		g_print("ERROR PowerControl: GPIO read error (gpio=%s,rc=%d)\n",
- 				g_gpio_configs.power_gpio.power_good_in.name, rc);
- 		//return false so poll won't get called anymore
--		return FALSE;
-+		//Mitac, don't stop the polling anyhow or the entire state management system will be ruined.
-+		return true;
- 	}
- 	//pgood is not at desired state yet
- 	if(pgood_state != control_power_get_state(control_power) &&
-@@ -368,10 +371,12 @@ set_up_gpio(PowerGpio *power_gpio, ControlPower* control_power)
- 			error = rc;
- 		}
- 	}
-+#if 0 //leave to gpiomonitor	
- 	rc = gpio_get_params(&power_gpio->power_good_in);
- 	if(rc != GPIO_OK) {
- 		error = rc;
- 	}
-+#endif	
- 	for(int i = 0; i < power_gpio->num_power_up_outs; i++) {
- 		rc = gpio_get_params(&power_gpio->power_up_outs[i]);
- 		if(rc != GPIO_OK) {
-@@ -392,7 +397,7 @@ set_up_gpio(PowerGpio *power_gpio, ControlPower* control_power)
- 	}
- 
- 	gpio_inits_done();
--
-+#if 0 //leave to gpiomonitor
- 	rc = gpio_open(&power_gpio->power_good_in, 0);
- 	if(rc != GPIO_OK) {
- 		gpio_close(&power_gpio->power_good_in);
-@@ -407,6 +412,7 @@ set_up_gpio(PowerGpio *power_gpio, ControlPower* control_power)
- 	control_power_set_pgood(control_power, pgood_state);
- 	control_power_set_state(control_power, pgood_state);
- 	g_print("Pgood state: %d\n", pgood_state);
-+#endif
- 
- 	return error;
- }
diff --git a/meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-op-control-power_git.bbappend b/meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-op-control-power_git.bbappend
deleted file mode 100755
index 2105f01..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-op-control-power_git.bbappend
+++ /dev/null
@@ -1,6 +0,0 @@
-FILESEXTRAPATHS_prepend := "${THISDIR}/${PN}:"
-
-S = "${WORKDIR}/git/op-pwrctl/"
-
-SRC_URI += "file://0001-leave-gpood-monitor-to-other-service.patch"
-
diff --git a/meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-phosphor-buttons/0001-add-SEL-log-for-Power-Button-Press.patch b/meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-phosphor-buttons/0001-add-SEL-log-for-Power-Button-Press.patch
deleted file mode 100755
index f6b23e7..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-phosphor-buttons/0001-add-SEL-log-for-Power-Button-Press.patch
+++ /dev/null
@@ -1,62 +0,0 @@
-From 5136fc408c4e2ce474788ef2df5fd7f57194cc90 Mon Sep 17 00:00:00 2001
-From: "wendy.shi" <wendy.shi@mic.com.tw>
-Date: Wed, 30 Oct 2019 09:13:11 +0800
-Subject: [PATCH] add SEL log for Power Button Press
-
----
- src/button_handler.cpp | 25 +++++++++++++++++++++++++
- 1 file changed, 25 insertions(+)
- mode change 100644 => 100755 src/button_handler.cpp
-
-diff --git a/src/button_handler.cpp b/src/button_handler.cpp
-old mode 100644
-new mode 100755
-index 675f1ea..528a59b
---- a/src/button_handler.cpp
-+++ b/src/button_handler.cpp
-@@ -29,6 +29,13 @@ constexpr auto mapperObjPath = "/xyz/openbmc_project/object_mapper";
- constexpr auto mapperService = "xyz.openbmc_project.ObjectMapper";
- constexpr auto ledGroupBasePath = "/xyz/openbmc_project/led/groups/";
- 
-+static constexpr char const* ipmiSELService = "xyz.openbmc_project.Logging.IPMI";
-+static constexpr char const* ipmiSELPath = "/xyz/openbmc_project/Logging/IPMI";
-+static constexpr char const* ipmiSELAddInterface = "xyz.openbmc_project.Logging.IPMI";
-+static const std::string ipmiSELAddMessage = "SEL Entry";
-+static const std::string sensorPath = "/xyz/openbmc_project/sensors/pwr_button/BUTTON";
-+static constexpr size_t selEvtDataMaxSize = 3;
-+
- Handler::Handler(sdbusplus::bus::bus& bus) : bus(bus)
- {
-     try
-@@ -133,6 +140,11 @@ void Handler::powerPressed(sdbusplus::message::message& msg)
- {
-     auto transition = Host::Transition::On;
- 
-+    uint16_t genid = 0x20;
-+    bool assert = 1;
-+    std::vector<uint8_t> eventData(selEvtDataMaxSize, 0xFF);
-+    eventData[0] = 0;
-+
-     try
-     {
-         if (poweredOn())
-@@ -142,6 +154,19 @@ void Handler::powerPressed(sdbusplus::message::message& msg)
- 
-         log<level::INFO>("Handling power button press");
- 
-+        sdbusplus::message::message writeSEL = bus.new_method_call(
-+            ipmiSELService, ipmiSELPath, ipmiSELAddInterface, "IpmiSelAdd");
-+        writeSEL.append(ipmiSELAddMessage, sensorPath, eventData, assert,
-+                    genid);
-+        try
-+        {
-+            bus.call(writeSEL);
-+        }
-+        catch (sdbusplus::exception_t& e)
-+        {
-+            log<level::ERR>("call IpmiSelAdd failed");
-+        }
-+
-         sdbusplus::message::variant<std::string> state =
-             convertForMessage(transition);
- 
diff --git a/meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-phosphor-buttons/0002-Add-Power-button-override-SEL.patch b/meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-phosphor-buttons/0002-Add-Power-button-override-SEL.patch
deleted file mode 100755
index 71bccfa..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-phosphor-buttons/0002-Add-Power-button-override-SEL.patch
+++ /dev/null
@@ -1,54 +0,0 @@
-From 9ae7e62d540af622f4fd173cc267381cab44d038 Mon Sep 17 00:00:00 2001
-From: Varun Sampat <vsampat@twitter.com>
-Date: Tue, 7 Jan 2020 21:40:20 -0500
-Subject: [PATCH] Add Power button override SEL
-
----
- src/button_handler.cpp | 20 ++++++++++++++++++++
- 1 file changed, 20 insertions(+)
-
-diff --git a/src/button_handler.cpp b/src/button_handler.cpp
-index 528a59b..1a26744 100755
---- a/src/button_handler.cpp
-+++ b/src/button_handler.cpp
-@@ -34,6 +34,7 @@ static constexpr char const* ipmiSELPath = "/xyz/openbmc_project/Logging/IPMI";
- static constexpr char const* ipmiSELAddInterface = "xyz.openbmc_project.Logging.IPMI";
- static const std::string ipmiSELAddMessage = "SEL Entry";
- static const std::string sensorPath = "/xyz/openbmc_project/sensors/pwr_button/BUTTON";
-+static const std::string sensorPathAcpi = "/xyz/openbmc_project/sensors/acpi/ACPI_POWER_STATE";
- static constexpr size_t selEvtDataMaxSize = 3;
- 
- Handler::Handler(sdbusplus::bus::bus& bus) : bus(bus)
-@@ -186,6 +187,12 @@ void Handler::powerPressed(sdbusplus::message::message& msg)
- 
- void Handler::longPowerPressed(sdbusplus::message::message& msg)
- {
-+    
-+    uint16_t genid = 0x20;
-+    bool assert = 1;
-+    std::vector<uint8_t> eventData(selEvtDataMaxSize, 0xFF);
-+    eventData[0] = 0x0A;
-+
-     try
-     {
-         if (!poweredOn())
-@@ -197,6 +204,19 @@ void Handler::longPowerPressed(sdbusplus::message::message& msg)
- 
-         log<level::INFO>("Handling long power button press");
- 
-+        sdbusplus::message::message writeSEL = bus.new_method_call(
-+            ipmiSELService, ipmiSELPath, ipmiSELAddInterface, "IpmiSelAdd");
-+        writeSEL.append(ipmiSELAddMessage, sensorPathAcpi, eventData, assert,
-+                    genid);
-+        try
-+        {
-+            bus.call(writeSEL);
-+        }
-+        catch (sdbusplus::exception_t& e)
-+        {
-+            log<level::ERR>("call IpmiSelAdd failed");
-+        }
-+
-         sdbusplus::message::variant<std::string> state =
-             convertForMessage(Chassis::Transition::Off);
- 
diff --git a/meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-phosphor-buttons/0003-Remove-power-button-and-reset-button-press-and-long-.patch b/meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-phosphor-buttons/0003-Remove-power-button-and-reset-button-press-and-long-.patch
deleted file mode 100755
index a037114..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-phosphor-buttons/0003-Remove-power-button-and-reset-button-press-and-long-.patch
+++ /dev/null
@@ -1,68 +0,0 @@
-From de6016609d4dc4421974562a868b2e53fd06144e Mon Sep 17 00:00:00 2001
-From: John Chung <john.chung@mic.com.tw>
-Date: Tue, 17 Mar 2020 09:48:03 +0800
-Subject: [PATCH] Remove power button and reset button press and long press
- action
-
-Remove power button press and long press bus method call
-Remove power button press bus method call
----
- src/button_handler.cpp | 28 ----------------------------
- 1 file changed, 28 deletions(-)
-
-diff --git a/src/button_handler.cpp b/src/button_handler.cpp
-index 1a26744..385bb4d 100755
---- a/src/button_handler.cpp
-+++ b/src/button_handler.cpp
-@@ -168,15 +168,6 @@ void Handler::powerPressed(sdbusplus::message::message& msg)
-             log<level::ERR>("call IpmiSelAdd failed");
-         }
- 
--        sdbusplus::message::variant<std::string> state =
--            convertForMessage(transition);
--
--        auto service = getService(HOST_STATE_OBJECT_NAME, hostIface);
--        auto method = bus.new_method_call(
--            service.c_str(), HOST_STATE_OBJECT_NAME, propertyIface, "Set");
--        method.append(hostIface, "RequestedHostTransition", state);
--
--        bus.call(method);
-     }
-     catch (SdBusError& e)
-     {
-@@ -217,15 +208,6 @@ void Handler::longPowerPressed(sdbusplus::message::message& msg)
-             log<level::ERR>("call IpmiSelAdd failed");
-         }
- 
--        sdbusplus::message::variant<std::string> state =
--            convertForMessage(Chassis::Transition::Off);
--
--        auto service = getService(CHASSIS_STATE_OBJECT_NAME, chassisIface);
--        auto method = bus.new_method_call(
--            service.c_str(), CHASSIS_STATE_OBJECT_NAME, propertyIface, "Set");
--        method.append(chassisIface, "RequestedPowerTransition", state);
--
--        bus.call(method);
-     }
-     catch (SdBusError& e)
-     {
-@@ -246,16 +228,6 @@ void Handler::resetPressed(sdbusplus::message::message& msg)
- 
-         log<level::INFO>("Handling reset button press");
- 
--        sdbusplus::message::variant<std::string> state =
--            convertForMessage(Host::Transition::Reboot);
--
--        auto service = getService(HOST_STATE_OBJECT_NAME, hostIface);
--        auto method = bus.new_method_call(
--            service.c_str(), HOST_STATE_OBJECT_NAME, propertyIface, "Set");
--
--        method.append(hostIface, "RequestedHostTransition", state);
--
--        bus.call(method);
-     }
-     catch (SdBusError& e)
-     {
--- 
-2.7.4
-
diff --git a/meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-phosphor-buttons/0004-Write-to-SEL-when-reset-button-is-pressed.patch b/meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-phosphor-buttons/0004-Write-to-SEL-when-reset-button-is-pressed.patch
deleted file mode 100755
index 17e295b..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-phosphor-buttons/0004-Write-to-SEL-when-reset-button-is-pressed.patch
+++ /dev/null
@@ -1,45 +0,0 @@
-From 176ff087aadee66a69af1d06f3e701b67d2e4416 Mon Sep 17 00:00:00 2001
-From: Nik Johnson <njohnson@twitter.com>
-Date: Wed, 15 Apr 2020 18:46:06 -0400
-Subject: [PATCH] Write to SEL when reset button is pressed
-
----
- src/button_handler.cpp | 18 ++++++++++++++++++
- 1 file changed, 18 insertions(+)
-
-diff --git a/src/button_handler.cpp b/src/button_handler.cpp
-index 385bb4d..b28723e 100755
---- a/src/button_handler.cpp
-+++ b/src/button_handler.cpp
-@@ -218,6 +218,12 @@ void Handler::longPowerPressed(sdbusplus::message::message& msg)
- 
- void Handler::resetPressed(sdbusplus::message::message& msg)
- {
-+
-+    uint16_t genid = 0x20;
-+    bool assert = 1;
-+    std::vector<uint8_t> eventData(selEvtDataMaxSize, 0xFF);
-+    eventData[0] = 0x02;
-+
-     try
-     {
-         if (!poweredOn())
-@@ -228,6 +234,18 @@ void Handler::resetPressed(sdbusplus::message::message& msg)
- 
-         log<level::INFO>("Handling reset button press");
- 
-+        sdbusplus::message::message writeSEL = bus.new_method_call(
-+            ipmiSELService, ipmiSELPath, ipmiSELAddInterface, "IpmiSelAdd");
-+        writeSEL.append(ipmiSELAddMessage, sensorPath, eventData, assert,
-+                    genid);
-+        try
-+        {
-+            bus.call(writeSEL);
-+        }
-+        catch (sdbusplus::exception_t& e)
-+        {
-+            log<level::ERR>("call IpmiSelAdd failed");
-+        }
-     }
-     catch (SdBusError& e)
-     {
diff --git a/meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-phosphor-buttons/0005-Fix-SEL-event-issue-for-the-power-and-reset-button.patch b/meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-phosphor-buttons/0005-Fix-SEL-event-issue-for-the-power-and-reset-button.patch
deleted file mode 100755
index 74b5a12..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-phosphor-buttons/0005-Fix-SEL-event-issue-for-the-power-and-reset-button.patch
+++ /dev/null
@@ -1,148 +0,0 @@
-From 2c89e1da6163182b7e2f76f132f9221dae7eddf7 Mon Sep 17 00:00:00 2001
-From: John Chung <john.chung@mic.com.tw>
-Date: Wed, 11 Nov 2020 16:37:54 +0800
-Subject: [PATCH] Fix SEL event issue for the power and reset button
-
-Add the power button SEL event to long press
-Fix the issue for the reset button would not log SEL event when host power off
-Refactor the generate butoon SEL fucntion
----
- inc/button_handler.hpp |  7 ++++++
- src/button_handler.cpp | 63 ++++++++++++++++++++++----------------------------
- 2 files changed, 34 insertions(+), 36 deletions(-)
- mode change 100644 => 100755 inc/button_handler.hpp
-
-diff --git a/inc/button_handler.hpp b/inc/button_handler.hpp
-old mode 100644
-new mode 100755
-index 7340c2f..1f3c007
---- a/inc/button_handler.hpp
-+++ b/inc/button_handler.hpp
-@@ -83,6 +83,13 @@ class Handler
-     bool poweredOn() const;
- 
-     /**
-+     * @brief Log the SEL for button event
-+     *
-+     * @param[in] eventData0 - event data 0 for SEL
-+     */
-+    void logButtonEvent(uint8_t eventData0) const;
-+
-+    /**
-      * @brief Returns the service name for an object
-      *
-      * @param[in] path - the object path
-diff --git a/src/button_handler.cpp b/src/button_handler.cpp
-index 1c819b6..ff210ec 100755
---- a/src/button_handler.cpp
-+++ b/src/button_handler.cpp
-@@ -137,17 +137,36 @@ bool Handler::poweredOn() const
-                sdbusplus::message::variant_ns::get<std::string>(state));
- }
- 
--void Handler::powerPressed(sdbusplus::message::message& msg)
-+void Handler::logButtonEvent(uint8_t eventData0) const
- {
--    auto transition = Host::Transition::On;
--
-     uint16_t genid = 0x20;
-     bool assert = 1;
-     std::vector<uint8_t> eventData(selEvtDataMaxSize, 0xFF);
--    eventData[0] = 0;
-+    eventData[0] = eventData0;
- 
-+    sdbusplus::message::message writeSEL = bus.new_method_call(
-+        ipmiSELService, ipmiSELPath, ipmiSELAddInterface, "IpmiSelAdd");
-+    writeSEL.append(ipmiSELAddMessage, sensorPath, eventData, assert,
-+                    genid);
-     try
-     {
-+        bus.call(writeSEL);
-+    }
-+    catch (SdBusError& e)
-+    {
-+        log<level::ERR>("Failed to log the button event",
-+                        entry("ERROR=%s", e.what()));
-+    }
-+}
-+
-+void Handler::powerPressed(sdbusplus::message::message& msg)
-+{
-+    auto transition = Host::Transition::On;
-+
-+    try
-+    {
-+        logButtonEvent(0x00);
-+
-         if (poweredOn())
-         {
-             transition = Host::Transition::Off;
-@@ -155,19 +174,6 @@ void Handler::powerPressed(sdbusplus::message::message& msg)
- 
-         log<level::INFO>("Handling power button press");
- 
--        sdbusplus::message::message writeSEL = bus.new_method_call(
--            ipmiSELService, ipmiSELPath, ipmiSELAddInterface, "IpmiSelAdd");
--        writeSEL.append(ipmiSELAddMessage, sensorPath, eventData, assert,
--                    genid);
--        try
--        {
--            bus.call(writeSEL);
--        }
--        catch (sdbusplus::exception_t& e)
--        {
--            log<level::ERR>("call IpmiSelAdd failed");
--        }
--
-     }
-     catch (SdBusError& e)
-     {
-@@ -186,6 +192,8 @@ void Handler::longPowerPressed(sdbusplus::message::message& msg)
- 
-     try
-     {
-+        logButtonEvent(0x00);
-+
-         if (!poweredOn())
-         {
-             log<level::INFO>(
-@@ -218,14 +226,10 @@ void Handler::longPowerPressed(sdbusplus::message::message& msg)
- 
- void Handler::resetPressed(sdbusplus::message::message& msg)
- {
--
--    uint16_t genid = 0x20;
--    bool assert = 1;
--    std::vector<uint8_t> eventData(selEvtDataMaxSize, 0xFF);
--    eventData[0] = 0x02;
--
-     try
-     {
-+        logButtonEvent(0x02);
-+
-         if (!poweredOn())
-         {
-             log<level::INFO>("Power is off so ignoring reset button press");
-@@ -233,19 +237,6 @@ void Handler::resetPressed(sdbusplus::message::message& msg)
-         }
- 
-         log<level::INFO>("Handling reset button press");
--
--        sdbusplus::message::message writeSEL = bus.new_method_call(
--            ipmiSELService, ipmiSELPath, ipmiSELAddInterface, "IpmiSelAdd");
--        writeSEL.append(ipmiSELAddMessage, sensorPath, eventData, assert,
--                    genid);
--        try
--        {
--            bus.call(writeSEL);
--        }
--        catch (sdbusplus::exception_t& e)
--        {
--            log<level::ERR>("call IpmiSelAdd failed");
--        }
-     }
-     catch (SdBusError& e)
-     {
--- 
-2.7.4
-
diff --git a/meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-phosphor-buttons_git.bbappend b/meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-phosphor-buttons_git.bbappend
deleted file mode 100755
index c198d32..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/chassis/obmc-phosphor-buttons_git.bbappend
+++ /dev/null
@@ -1,9 +0,0 @@
-FILESEXTRAPATHS_prepend := "${THISDIR}/${PN}:"
-
-SRC_URI += "file://0001-add-SEL-log-for-Power-Button-Press.patch \
-            file://0002-Add-Power-button-override-SEL.patch \
-            file://0003-Remove-power-button-and-reset-button-press-and-long-.patch \
-            file://0004-Write-to-SEL-when-reset-button-is-pressed.patch \
-            file://0005-Fix-SEL-event-issue-for-the-power-and-reset-button.patch \
-            "
-
diff --git a/meta-mct/meta-s5549/recipes-phosphor/dbus/phosphor-dbus-interfaces/0004-Add-interface-for-AC-restore-always-on-policy.patch b/meta-mct/meta-s5549/recipes-phosphor/dbus/phosphor-dbus-interfaces/0004-Add-interface-for-AC-restore-always-on-policy.patch
deleted file mode 100755
index c8a056a..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/dbus/phosphor-dbus-interfaces/0004-Add-interface-for-AC-restore-always-on-policy.patch
+++ /dev/null
@@ -1,54 +0,0 @@
-From d3edb09dbe6a32b9ee42552f36b0f0932e539fa7 Mon Sep 17 00:00:00 2001
-From: John Chung <john.chung@mic.com.tw>
-Date: Mon, 23 Mar 2020 09:50:42 +0800
-Subject: [PATCH] Add interface for AC restore always-on policy
-
----
- .../Control/Power/RestorePolicy.interface.yaml     | 24 ++++++++++++++++++++++
- 1 file changed, 24 insertions(+)
- mode change 100644 => 100755 xyz/openbmc_project/Control/Power/RestorePolicy.interface.yaml
-
-diff --git a/xyz/openbmc_project/Control/Power/RestorePolicy.interface.yaml b/xyz/openbmc_project/Control/Power/RestorePolicy.interface.yaml
-old mode 100644
-new mode 100755
-index 1f90937..a2e79ac
---- a/xyz/openbmc_project/Control/Power/RestorePolicy.interface.yaml
-+++ b/xyz/openbmc_project/Control/Power/RestorePolicy.interface.yaml
-@@ -9,6 +9,16 @@ properties:
-       description: >
-           The policy to adopt after the BMC reset.
- 
-+    - name: PowerRestoreDelay
-+      type: uint32
-+      description: >
-+          The delay for setting always-on.
-+
-+    - name: PowerRestoreAlwaysOnPolicy
-+      type: enum[self.AlwaysOnPolicy]
-+      description: >
-+          The policy to adopt after the BMC reset and using always-on policy.
-+
- enumerations:
-     - name: Policy
-       description: >
-@@ -24,3 +34,17 @@ enumerations:
-           description: >
-             Restore power to last requested state recorded before the BMC was
-             reset.
-+
-+    - name: AlwaysOnPolicy
-+      description: >
-+        Possible power restoration always-on policies.
-+      values:
-+        - name: Immediately
-+          description: >
-+            Without delay time for bmc power on
-+        - name: Random
-+          description: >
-+            Set a random delay time for bmc power on.
-+        - name: Fixed
-+          description: >
-+            Set a fixed delay time for bmc power on.
--- 
-2.7.4
-
diff --git a/meta-mct/meta-s5549/recipes-phosphor/dbus/phosphor-dbus-interfaces/0010-Add-x86-power-control-relatived-dbus-interface.patch b/meta-mct/meta-s5549/recipes-phosphor/dbus/phosphor-dbus-interfaces/0010-Add-x86-power-control-relatived-dbus-interface.patch
new file mode 100755
index 0000000..691aab5
--- /dev/null
+++ b/meta-mct/meta-s5549/recipes-phosphor/dbus/phosphor-dbus-interfaces/0010-Add-x86-power-control-relatived-dbus-interface.patch
@@ -0,0 +1,65 @@
+From efc9b294813ce7e19457c109f60721bffb382e1f Mon Sep 17 00:00:00 2001
+From: John Chung <john.chung@mic.com.tw>
+Date: Fri, 18 Dec 2020 10:44:09 +0800
+Subject: [PATCH] Add x86-power-control relatived dbus interface
+
+%% original patch: 0010-Add-x86-power-control-relatived-dbus-interface.patch
+---
+ xyz/openbmc_project/Common/ACBoot.interface.yaml   |  8 ++++++
+ .../Control/Power/RestoreDelay.interface.yaml      | 29 ++++++++++++++++++++++
+ 2 files changed, 37 insertions(+)
+ create mode 100644 xyz/openbmc_project/Common/ACBoot.interface.yaml
+ create mode 100755 xyz/openbmc_project/Control/Power/RestoreDelay.interface.yaml
+
+diff --git a/xyz/openbmc_project/Common/ACBoot.interface.yaml b/xyz/openbmc_project/Common/ACBoot.interface.yaml
+new file mode 100644
+index 0000000..23cfaa4
+--- /dev/null
++++ b/xyz/openbmc_project/Common/ACBoot.interface.yaml
+@@ -0,0 +1,8 @@
++description: >
++    Implement to provide system AcBoot flag
++properties:
++    - name: ACBoot
++      type: string
++      description: >
++          Flag for system ACBoot.
++
+diff --git a/xyz/openbmc_project/Control/Power/RestoreDelay.interface.yaml b/xyz/openbmc_project/Control/Power/RestoreDelay.interface.yaml
+new file mode 100755
+index 0000000..66e5900
+--- /dev/null
++++ b/xyz/openbmc_project/Control/Power/RestoreDelay.interface.yaml
+@@ -0,0 +1,29 @@
++description: >
++    Implement to specify power transition behavior on a BMC reset.
++
++properties:
++    - name: PowerRestoreDelay
++      type: uint32
++      description: >
++          The delay for setting always-on.
++
++    - name: PowerRestoreAlwaysOnPolicy
++      type: enum[self.AlwaysOnPolicy]
++      description: >
++          The policy to adopt after the BMC reset and using always-on policy.
++
++enumerations:
++    - name: AlwaysOnPolicy
++      description: >
++        Possible power restoration always-on policies.
++      values:
++        - name: Immediately
++          description: >
++            Without delay time for bmc power on
++        - name: Random
++          description: >
++            Set a random delay time for bmc power on.
++        - name: Fixed
++          description: >
++            Set a fixed delay time for bmc power on.
++
+-- 
+2.7.4
+
diff --git a/meta-mct/meta-s5549/recipes-phosphor/dbus/phosphor-dbus-interfaces/0011-Add-property-for-power-soft-action.patch b/meta-mct/meta-s5549/recipes-phosphor/dbus/phosphor-dbus-interfaces/0011-Add-property-for-power-soft-action.patch
new file mode 100755
index 0000000..3129e81
--- /dev/null
+++ b/meta-mct/meta-s5549/recipes-phosphor/dbus/phosphor-dbus-interfaces/0011-Add-property-for-power-soft-action.patch
@@ -0,0 +1,29 @@
+From f278b7d2ed5f0e4d9f212069a68ebb438e1f2c11 Mon Sep 17 00:00:00 2001
+From: John Chung <john.chung@mic.com.tw>
+Date: Tue, 22 Dec 2020 10:27:40 +0800
+Subject: [PATCH] Add property for power soft action
+
+---
+ xyz/openbmc_project/State/Host.interface.yaml | 3 +++
+ 1 file changed, 3 insertions(+)
+ mode change 100644 => 100755 xyz/openbmc_project/State/Host.interface.yaml
+
+diff --git a/xyz/openbmc_project/State/Host.interface.yaml b/xyz/openbmc_project/State/Host.interface.yaml
+old mode 100644
+new mode 100755
+index 1cbd2b4..4201203
+--- a/xyz/openbmc_project/State/Host.interface.yaml
++++ b/xyz/openbmc_project/State/Host.interface.yaml
+@@ -41,6 +41,9 @@ enumerations:
+           description: >
+             Host firmware will be rebooted without notification and chassis
+             power will remain on throughout the reboot
++        - name: 'gracefulOff'
++          description: >
++            Host firmware should be soft off
+ 
+     - name: HostState
+       description: >
+-- 
+2.7.4
+
diff --git a/meta-mct/meta-s5549/recipes-phosphor/dbus/phosphor-dbus-interfaces_git.bbappend b/meta-mct/meta-s5549/recipes-phosphor/dbus/phosphor-dbus-interfaces_git.bbappend
index 7cbee63..147fee4 100755
--- a/meta-mct/meta-s5549/recipes-phosphor/dbus/phosphor-dbus-interfaces_git.bbappend
+++ b/meta-mct/meta-s5549/recipes-phosphor/dbus/phosphor-dbus-interfaces_git.bbappend
@@ -2,11 +2,12 @@ FILESEXTRAPATHS_prepend := "${THISDIR}/${PN}:"
 
 SRC_URI += "file://0002-Add-interface-for-caterr-logging.patch \
             file://0003-Add-SOL-PATTERN-Interface-for-SOL-Processing.patch \
-            file://0004-Add-interface-for-AC-restore-always-on-policy.patch \
             file://0005-Add-interface-for-setting-specified-service-status.patch \
             file://0006-Set-watchdog-initialized-flag-true-as-default.patch \
             file://0007-Add-interface-for-DCMI-power.patch \
             file://0008-Set-watchdog-initialized-action-to-None-as-default.patch \
             file://0009-Add-the-version-ID-parameter-to-software-version-int.patch \
+            file://0010-Add-x86-power-control-relatived-dbus-interface.patch \
+            file://0011-Add-property-for-power-soft-action.patch \
             "
 
diff --git a/meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/CMakeLists.txt b/meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/CMakeLists.txt
deleted file mode 100755
index a8cfc07..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/CMakeLists.txt
+++ /dev/null
@@ -1,34 +0,0 @@
-cmake_minimum_required (VERSION 3.5 FATAL_ERROR)
-
-set (CMAKE_CXX_STANDARD 17)
-set (CMAKE_CXX_STANDARD_REQUIRED ON)
-
-
-project(power-button-monitor)
-
-add_executable(power-button-monitor power-button-monitor.cpp)
-target_link_libraries (power-button-monitor -lsystemd)
-
-project(reset-button-monitor)
-
-add_executable(reset-button-monitor reset-button-monitor.cpp)
-target_link_libraries (reset-button-monitor -lsystemd)
-
-
-# Strip binary for release builds
-if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
-    if (NOT CMAKE_BUILD_TYPE MATCHES Debug)
-        string (REGEX REPLACE "ar$" "gcc-ar" CMAKE_AR ${CMAKE_AR})
-        string (
-            REGEX
-            REPLACE "ranlib$" "gcc-ranlib" CMAKE_RANLIB ${CMAKE_RANLIB}
-        )
-        set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -flto -fno-fat-lto-objects")
-
-        set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} \
-        -fvisibility=hidden \
-        -fvisibility-inlines-hidden \
-        -Wl,--exclude-libs,ALL")
-    endif (NOT CMAKE_BUILD_TYPE MATCHES Debug)
-endif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
-
diff --git a/meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/power-button-monitor.cpp b/meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/power-button-monitor.cpp
deleted file mode 100755
index 7c60ed7..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/power-button-monitor.cpp
+++ /dev/null
@@ -1,130 +0,0 @@
-#include "power-button-monitor.hpp"
-#include <stdio.h>
-#include <stdlib.h>
-#include <fcntl.h>
-#include <poll.h>
-#include <iostream>
-#include <string>
-
-#define _POSIX_C_SOURCE 200809L
-#define POLL_TIMEOUT 1
-#define MAX_BUFFER 64
-
-#define DEBUG 0
-
-int main(int argc, char *argv[])
-{
-    struct pollfd fdset[2];
-    char *buf[MAX_BUFFER];
-    int gpioFd, timeout, rc;
-    int nfds = 2;
-    bool initWorkaround = true;
-
-    Button button;
-    button.gpioBase = findGpioBase();
-    button.gpioE2 = button.gpioBase + 34;
-
-    if(DEBUG){
-        std::cerr << "Power Button monitor start\n";
-    }
-
-    while(1){
-        gpioFd = gpioFdOpen(button.gpioE2);
-
-        if(gpioFd < 0){
-            setGpioExport(button.gpioE2);
-            usleep(500000);
-            continue;
-        }
-
-        timeout = POLL_TIMEOUT;
-
-        while (1) {
-            memset((void*)fdset, 0, sizeof(fdset));
-
-            fdset[0].fd = STDIN_FILENO;
-            fdset[0].events = POLLIN;
-            fdset[1].fd = gpioFd;
-            fdset[1].events = POLLPRI;
-
-            rc = poll(fdset, nfds, timeout);
-
-            if (rc < 0) {
-                if(DEBUG){
-                    std::cerr << "Power button Poll failed\n";
-                }
-                break;
-            }
-
-            if(button.buttonStatus && buttonTimeout(button.wait,POLL_TIMEOUT)){
-                //Power waiting timer
-                button.wait = getCurrentTimeWithMs();
-                buttonWaiting(&button);
-            }
-
-            if(fdset[1].revents & POLLPRI) {
-                lseek(fdset[1].fd, 0, SEEK_SET);
-                read(fdset[1].fd, buf, MAX_BUFFER);
-
-                // To avoid first times input file's value
-                if(initWorkaround){
-                    initWorkaround=false;
-                    continue;
-                }
-
-                button.buttonValue = ((unsigned int) buf[0])%2;
-
-                if(button.buttonValue){
-                    buttonRelease(&button);
-                }
-                else{
-                    buttonPress(&button);
-                }
-            }
-
-            fflush(stdout);
-            usleep(50000);
-        }
-
-        close(gpioFd);
-    }
-
-    return 0;
-}
-
-
-void buttonPress(Button *button)
-{
-    if(DEBUG){
-        std::cerr << "Power Button Press\n";
-    }
-
-    if(!button->buttonStatus){
-        button->start = getCurrentTimeWithMs();
-        button->wait = getCurrentTimeWithMs();
-
-        // To set Power button press and release by software
-        system("/usr/bin/gpioset `gpiofind PWRBTN_OUT`=0");
-
-        button->buttonStatus = true;
-    }
-}
-
-void buttonRelease(Button *button)
-{
-    if(DEBUG){
-        std::cerr << "Power Button Release\n";
-    }
-
-    if(button->buttonStatus){
-        button->buttonStatus = false;
-        system("/usr/bin/gpioset `gpiofind PWRBTN_OUT`=1");
-    }
-}
-
-void buttonWaiting(Button *button)
-{
-    if(DEBUG){
-        std::cerr << "Power button poll waiting...\n";
-    }
-}
\ No newline at end of file
diff --git a/meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/power-button-monitor.hpp b/meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/power-button-monitor.hpp
deleted file mode 100755
index b31a08a..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/power-button-monitor.hpp
+++ /dev/null
@@ -1,33 +0,0 @@
-#pragma once
-
-#include "util.hpp"
-
-typedef struct{
-    unsigned int buttonValue = 0;
-    unsigned int gpioBase = 0;
-    unsigned int gpioE2 = 0;
-    unsigned int counter = 0;
-    bool buttonStatus = false;
-    double start, finish, wait, duration;
-}Button;
-
-/*
- * @desc Button's action when button press
- * @param button - intput button with parameter
- * @return null
- */
-void buttonPress(Button *button);
-
-/*
- * @desc Button's action when button release
- * @param button - intput button with parameter
- * @return null
- */
-void buttonRelease(Button *button);
-
-/*
- * @desc Button's action when button timeout for a period
- * @param button - intput button with parameter
- * @return null
- */
-void buttonWaiting(Button *button);
\ No newline at end of file
diff --git a/meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/power-button-monitor.service b/meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/power-button-monitor.service
deleted file mode 100755
index c42d42f..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/power-button-monitor.service
+++ /dev/null
@@ -1,12 +0,0 @@
-[Unit]
-Description="Power Button Monitor"
-Wants=gpio-initial.service
-After=gpio-initial.service
-
-[Service]
-Restart=always
-ExecStart=/usr/sbin/power-button-monitor
-SyslogIdentifier=power-button-monitor
-
-[Install]
-RequiredBy={SYSTEMD_DEFAULT_TARGET}
diff --git a/meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/reset-button-monitor.cpp b/meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/reset-button-monitor.cpp
deleted file mode 100755
index b35b57d..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/reset-button-monitor.cpp
+++ /dev/null
@@ -1,130 +0,0 @@
-#include "reset-button-monitor.hpp"
-#include <stdio.h>
-#include <stdlib.h>
-#include <fcntl.h>
-#include <poll.h>
-#include <iostream>
-#include <string>
-
-#define _POSIX_C_SOURCE 200809L
-#define POLL_TIMEOUT 1
-#define MAX_BUFFER 64
-
-#define DEBUG 0
-
-int main(int argc, char *argv[])
-{
-    struct pollfd fdset[2];
-    char *buf[MAX_BUFFER];
-    int gpioFd, timeout, rc;
-    int nfds = 2;
-    bool initWorkaround = true;
-
-    Button button;
-    button.gpioBase = findGpioBase();
-    button.gpioE0 = button.gpioBase + 32;
-
-    if(DEBUG){
-        std::cerr << "Reset Button monitor start\n";
-    }
-
-    while(1){
-        gpioFd = gpioFdOpen(button.gpioE0);
-
-        if(gpioFd < 0){
-            setGpioExport(button.gpioE0);
-            usleep(500000);
-            continue;
-        }
-
-        timeout = POLL_TIMEOUT;
-
-        while (1) {
-            memset((void*)fdset, 0, sizeof(fdset));
-
-            fdset[0].fd = STDIN_FILENO;
-            fdset[0].events = POLLIN;
-            fdset[1].fd = gpioFd;
-            fdset[1].events = POLLPRI;
-
-            rc = poll(fdset, nfds, timeout);
-
-            if (rc < 0) {
-                if(DEBUG){
-                    std::cerr << "Reset button Poll failed\n";
-                }
-                break;
-            }
-
-            if(button.buttonStatus && buttonTimeout(button.wait,POLL_TIMEOUT)){
-                //Reset waiting timer
-                button.wait = getCurrentTimeWithMs();
-                buttonWaiting(&button);
-            }
-
-            if(fdset[1].revents & POLLPRI) {
-                lseek(fdset[1].fd, 0, SEEK_SET);
-                read(fdset[1].fd, buf, MAX_BUFFER);
-
-                // To avoid first times input file's value
-                if(initWorkaround){
-                    initWorkaround=false;
-                    continue;
-                }
-
-                button.buttonValue = ((unsigned int) buf[0])%2;
-
-                if(button.buttonValue){
-                    buttonRelease(&button);
-                }
-                else{
-                    buttonPress(&button);
-                }
-            }
-
-            fflush(stdout);
-            usleep(50000);
-        }
-
-        close(gpioFd);
-    }
-
-    return 0;
-}
-
-
-void buttonPress(Button *button)
-{
-    if(DEBUG){
-        std::cerr << "Reset Button Press\n";
-    }
-
-    if(!button->buttonStatus){
-        button->start = getCurrentTimeWithMs();
-        button->wait = getCurrentTimeWithMs();
-
-        // To set reset button press and release by software
-        system("/usr/bin/gpioset `gpiofind RSTBTN_OUT`=0");
-
-        button->buttonStatus = true;
-    }
-}
-
-void buttonRelease(Button *button)
-{
-    if(DEBUG){
-        std::cerr << "Reset Button Release\n";
-    }
-
-    if(button->buttonStatus){
-        button->buttonStatus = false;
-        system("/usr/bin/gpioset `gpiofind RSTBTN_OUT`=1");
-    }
-}
-
-void buttonWaiting(Button *button)
-{
-    if(DEBUG){
-        std::cerr << "Reset button poll waiting...\n";
-    }
-}
\ No newline at end of file
diff --git a/meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/reset-button-monitor.hpp b/meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/reset-button-monitor.hpp
deleted file mode 100755
index 963174a..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/reset-button-monitor.hpp
+++ /dev/null
@@ -1,33 +0,0 @@
-#pragma once
-
-#include "util.hpp"
-
-typedef struct{
-    unsigned int buttonValue = 0;
-    unsigned int gpioBase = 0;
-    unsigned int gpioE0 = 0;
-    unsigned int counter = 0;
-    bool buttonStatus = false;
-    double start, finish, wait, duration;
-}Button;
-
-/*
- * @desc Button's action when button press
- * @param button - intput button with parameter
- * @return null
- */
-void buttonPress(Button *button);
-
-/*
- * @desc Button's action when button release
- * @param button - intput button with parameter
- * @return null
- */
-void buttonRelease(Button *button);
-
-/*
- * @desc Button's action when button timeout for a period
- * @param button - intput button with parameter
- * @return null
- */
-void buttonWaiting(Button *button);
\ No newline at end of file
diff --git a/meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/reset-button-monitor.service b/meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/reset-button-monitor.service
deleted file mode 100755
index f3b2193..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/reset-button-monitor.service
+++ /dev/null
@@ -1,12 +0,0 @@
-[Unit]
-Description="Reset Button Monitor"
-Wants=gpio-initial.service
-After=gpio-initial.service
-
-[Service]
-Restart=always
-ExecStart=/usr/sbin/reset-button-monitor
-SyslogIdentifier=reset-button-monitor
-
-[Install]
-RequiredBy={SYSTEMD_DEFAULT_TARGET}
diff --git a/meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/util.hpp b/meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/util.hpp
deleted file mode 100755
index f08651f..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/gpio/button-monitor/util.hpp
+++ /dev/null
@@ -1,188 +0,0 @@
-#pragma once
-
-#include <stdio.h>
-#include <stdlib.h>
-#include <time.h>
-#include <unistd.h>
-#include <math.h>
-#include <inttypes.h>
-#include <string.h>
-#include <fcntl.h>
-#include <poll.h>
-
-#define MAX_BUFFER 64 //Maximum size for char array
-
-/*
- * @desc Find gpio base number in aspeed kernel's gpio path
- * @param null
- * @return success: gpio base number fail: zero
- */
-unsigned int findGpioBase()
-{
-    unsigned int result = 0;
-    char buf[MAX_BUFFER];
-    FILE *fp;
-
-    if ((fp = popen("ls /sys/bus/platform/devices/1e780000.gpio/gpio |  grep -i gpiochip | cut -c 9-", "r")) == NULL){
-        return result;
-    }
-
-    fgets(buf, sizeof(buf), fp);
-    pclose(fp);
-
-    sscanf(buf, "%d", &result);
-
-    return result;
-}
-
-/*
- * @desc Export gpio using sysfs path
- * @param gpio - gpio number
- * @return true: export success false: export fail
- */
-bool setGpioExport(unsigned int gpio)
-{
-    unsigned int result = 0;
-    FILE * fp;
-    char buf[MAX_BUFFER];
-
-    sprintf(buf, "echo %d > /sys/class/gpio/export",gpio);
-
-    if ((fp = popen(buf, "r")) == NULL){
-        return false;
-    }
-
-    pclose(fp);
-
-    return true;
-}
-
-/*
- * @desc Get gpio current value using sysfs path
- * @param gpio - gpio number
- * @return success: gpio current value fail: zero
- */
-unsigned int getGpioValue(unsigned int gpio)
-{
-    unsigned int result = 0;
-    FILE * fp;
-    char buf[MAX_BUFFER];
-    char valuePath[MAX_BUFFER];
-
-    sprintf(valuePath, "cat /sys/class/gpio/gpio%d/value",gpio);
-
-    if ((fp = popen(valuePath, "r")) == NULL){
-        return result;
-    }
-
-    fgets(buf, sizeof(buf), fp);
-    pclose(fp);
-
-    sscanf(buf, "%d", &result);
-
-    return result;
-}
-
-/*
- * @desc Set gpio current value using sysfs path
- * @param gpio - gpio number
- * @return true: get success false: get fail
- */
-bool setGpioValue(unsigned int set,unsigned int gpio)
-{
-    unsigned int result = 0;
-    FILE * fp;
-    char unlockPath[MAX_BUFFER];
-
-    sprintf(unlockPath, "echo %d > /sys/class/gpio/gpio%d/value",set,gpio);
-
-    if ((fp = popen(unlockPath, "r")) == NULL){
-        return false;
-    }
-
-    pclose(fp);
-
-    return true;
-}
-
-/*
- * @desc Get power good current value in dbus using bus control
- * @param null
- * @return success: power good current value fail: zero
- */
-unsigned int getPowerGoodValue()
-{
-    unsigned int result = 0;
-    char buf[MAX_BUFFER];
-    FILE *fp;
-
-    if ((fp = popen("busctl get-property org.openbmc.control.Power /org/openbmc/control/power0 org.openbmc.control.Power pgood | cut -d' ' -f2", "r")) == NULL){
-        return result;
-    }
-
-    fgets(buf, sizeof(buf), fp);
-    pclose(fp);
-
-    sscanf(buf, "%d", &result);
-
-    return result;
-}
-
-/*
- * @desc Get current timestamp in milliseconds
- * @param null
- * @return current timestamp in milliseconds
- */
-double getCurrentTimeWithMs()
-{
-    time_t s;
-    long ms;
-    struct timespec spec;
-
-    clock_gettime(CLOCK_REALTIME, &spec);
-
-    s  = spec.tv_sec;
-    ms = round(spec.tv_nsec / 1.0e6); // Convert nanoseconds to milliseconds
-    if (ms > 999) {
-        s++;
-        ms = 0;
-    }
-
-    double  result = (intmax_t)s + ((double)ms/1000);
-
-    return result;
-}
-
-/*
- * @desc Using open function for gpio value path in sysfs
- * @param gpio - gpio number
- * @return open's response code
- */
-int gpioFdOpen(unsigned int gpio)
-{
-    int fd, len;
-    char buf[MAX_BUFFER];
-
-    len = snprintf(buf, sizeof(buf),"/sys/class/gpio/gpio%d/value", gpio);
-
-    fd = open(buf, O_RDONLY | O_NONBLOCK );
-
-    return fd;
-}
-
-/*
- * @desc Check timerout for a period
- * @param start - input time in period
- * @param timeout - timeout time for a period
- * @return true: timeout false: in period
- */
-bool buttonTimeout(double start,int timeout)
-{
-    double current = getCurrentTimeWithMs();
-    double duration = (double)(current - start);
-
-    if(duration > (double)timeout){
-        return true;
-    }
-    return false;
-}
\ No newline at end of file
diff --git a/meta-mct/meta-s5549/recipes-phosphor/gpio/button-state/id-button-pressed.service b/meta-mct/meta-s5549/recipes-phosphor/gpio/button-state/id-button-pressed.service
deleted file mode 100755
index f633fc3..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/gpio/button-state/id-button-pressed.service
+++ /dev/null
@@ -1,10 +0,0 @@
-[Unit]
-Description=ID Button Pressed Service
-Wants=mapper-wait@-xyz-openbmc_project-led-groups.service
-After=mapper-wait@-xyz-openbmc_project-led-groups.service
-StartLimitIntervalSec=0
-
-[Service]
-Type=oneshot
-ExecStart=/usr/bin/env toggle_identify_led.sh
-SyslogIdentifier=id-button
diff --git a/meta-mct/meta-s5549/recipes-phosphor/gpio/button-state/toggle_identify_led.sh b/meta-mct/meta-s5549/recipes-phosphor/gpio/button-state/toggle_identify_led.sh
deleted file mode 100755
index ce89e19..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/gpio/button-state/toggle_identify_led.sh
+++ /dev/null
@@ -1,21 +0,0 @@
-#!/bin/sh
-# Toggle the state of identify LED Group
-
-SERVICE="xyz.openbmc_project.LED.Controller.identify"
-INTERFACE="xyz.openbmc_project.Led.Physical"
-object="/xyz/openbmc_project/led/physical/identify"
-PROPERTY="State"
-
-# Get current state
-object=$(busctl tree $SERVICE --list | grep identify)
-state=`busctl get-property $SERVICE $object $INTERFACE $PROPERTY | awk '{print $2}'`
-
-if [ "$state" == "\"xyz.openbmc_project.Led.Physical.Action.Off\"" ]; then
-    target='xyz.openbmc_project.Led.Physical.Action.On'
-else
-    target='xyz.openbmc_project.Led.Physical.Action.Off'
-fi
-
-# Set target state
-busctl set-property $SERVICE $object $INTERFACE $PROPERTY s $target
-
diff --git a/meta-mct/meta-s5549/recipes-phosphor/gpio/cpu-state/obmc/gpio/prochot0 b/meta-mct/meta-s5549/recipes-phosphor/gpio/cpu-state/obmc/gpio/prochot0
deleted file mode 100755
index 11c4d5d..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/gpio/cpu-state/obmc/gpio/prochot0
+++ /dev/null
@@ -1,6 +0,0 @@
-DEVPATH=/dev/input/by-path/platform-gpio-keys-event
-KEY=62
-TARGET=xyz.openbmc_project.prochot0.service
-POLARITY=1
-EXTRA_ARGS=--continue
-
diff --git a/meta-mct/meta-s5549/recipes-phosphor/gpio/cpu-state/obmc/gpio/prochot0_deassert b/meta-mct/meta-s5549/recipes-phosphor/gpio/cpu-state/obmc/gpio/prochot0_deassert
deleted file mode 100755
index 26f92d5..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/gpio/cpu-state/obmc/gpio/prochot0_deassert
+++ /dev/null
@@ -1,5 +0,0 @@
-DEVPATH=/dev/input/by-path/platform-gpio-keys-event
-KEY=62
-TARGET=xyz.openbmc_project.prochot0_deassert.service
-POLARITY=0
-EXTRA_ARGS=--continue
diff --git a/meta-mct/meta-s5549/recipes-phosphor/gpio/cpu-state/obmc/gpio/prochot1 b/meta-mct/meta-s5549/recipes-phosphor/gpio/cpu-state/obmc/gpio/prochot1
deleted file mode 100755
index 81bb049..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/gpio/cpu-state/obmc/gpio/prochot1
+++ /dev/null
@@ -1,6 +0,0 @@
-DEVPATH=/dev/input/by-path/platform-gpio-keys-event
-KEY=61
-TARGET=xyz.openbmc_project.prochot1.service
-POLARITY=1
-EXTRA_ARGS=--continue
-
diff --git a/meta-mct/meta-s5549/recipes-phosphor/gpio/cpu-state/obmc/gpio/prochot1_deassert b/meta-mct/meta-s5549/recipes-phosphor/gpio/cpu-state/obmc/gpio/prochot1_deassert
deleted file mode 100755
index 02fe0f7..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/gpio/cpu-state/obmc/gpio/prochot1_deassert
+++ /dev/null
@@ -1,5 +0,0 @@
-DEVPATH=/dev/input/by-path/platform-gpio-keys-event
-KEY=61
-TARGET=xyz.openbmc_project.prochot1_deassert.service
-POLARITY=0
-EXTRA_ARGS=--continue
diff --git a/meta-mct/meta-s5549/recipes-phosphor/gpio/phosphor-gpio-monitor/0002-init-host-status.patch b/meta-mct/meta-s5549/recipes-phosphor/gpio/phosphor-gpio-monitor/0002-init-host-status.patch
deleted file mode 100755
index c9a18d5..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/gpio/phosphor-gpio-monitor/0002-init-host-status.patch
+++ /dev/null
@@ -1,68 +0,0 @@
-From 4f3c781ee8568a0997e9ab8f4b12f9e994553c05 Mon Sep 17 00:00:00 2001
-From: Ray Lue <ray.lue@mic.com.tw>
-Date: Mon, 11 May 2020 17:34:51 +0800
-Subject: [PATCH 1/1] remove host state change in pgood monitor
-
----
- gpioMonMain.cpp | 35 +++++++++++++++++++++++++++++++++++
- 1 file changed, 35 insertions(+)
- mode change 100644 => 100755 gpioMonMain.cpp
-
-diff --git a/gpioMonMain.cpp b/gpioMonMain.cpp
-old mode 100644
-new mode 100755
-index 251e0d5..d56417f
---- a/gpioMonMain.cpp
-+++ b/gpioMonMain.cpp
-@@ -41,6 +41,37 @@ std::map<std::string, int> polarityMap = {
- }
- } // namespace phosphor
- 
-+static constexpr char const* PgService = "org.openbmc.control.Power";
-+static constexpr char const* PgObj = "/org/openbmc/control/power0";
-+static constexpr char const* PgIntf = "org.openbmc.control.Power";
-+#define PROPERTY_INTERFACE "org.freedesktop.DBus.Properties"
-+
-+void pgoodhook(gpiod_line* line)
-+{
-+
-+    if (gpiod_line_request_input(line, "gpio_monitor") < 0)
-+    {
-+         std::cerr << "Error request pgood\n";
-+         return;
-+    }
-+
-+    int resp = gpiod_line_get_value(line);
-+
-+    gpiod_line_release(line); 
-+    auto bus = sdbusplus::bus::new_default();
-+    std::cerr << "pgood:" << resp <<"\n";
-+    auto method = bus.new_method_call(PgService, PgObj, PROPERTY_INTERFACE, "Set");
-+    method.append(PgIntf, "pgood", sdbusplus::message::variant<int>((int)resp));
-+    bus.call_noreply(method);
-+
-+    method = bus.new_method_call(PgService, PgObj, PROPERTY_INTERFACE, "Set");
-+    method.append(PgIntf, "state", sdbusplus::message::variant<int>((int)resp));
-+    bus.call_noreply(method);
-+    
-+    std::cerr << "pgood state init to: " << (int)resp << "\n";
-+
-+}
-+
- int main(int argc, char** argv)
- {
- 
-@@ -133,6 +164,10 @@ int main(int argc, char** argv)
-             std::string lineName = obj["LineName"];
-             lineMsg += lineName;
-             line = gpiod_line_find(lineName.c_str());
-+            if(lineName.compare("PS_PWROK") == 0)
-+            {
-+                pgoodhook(line);
-+            }
-         }
- 
-         if (line == NULL)
--- 
-2.26.2
-
diff --git a/meta-mct/meta-s5549/recipes-phosphor/gpio/phosphor-gpio-monitor/s5549_gpio.json b/meta-mct/meta-s5549/recipes-phosphor/gpio/phosphor-gpio-monitor/s5549_gpio.json
index f96bf35..85fdd47 100755
--- a/meta-mct/meta-s5549/recipes-phosphor/gpio/phosphor-gpio-monitor/s5549_gpio.json
+++ b/meta-mct/meta-s5549/recipes-phosphor/gpio/phosphor-gpio-monitor/s5549_gpio.json
@@ -1,20 +1,5 @@
  [
     {
-        "Name": "PowerGood",
-        "LineName": "PS_PWROK",
-        "EventMon": "BOTH",
-        "Continue": true,
-        "Target":
-        {
-            "FALLING": [
-                "SetPowerGoodPropertyOff.service"
-            ],
-            "RISING": [
-                "SetPowerGoodPropertyOn.service"
-            ]
-        }
-    },
-    {
         "Name": "ThermalTrip",
         "LineName": "THERMTRIP",
         "EventMon": "FALLING",
@@ -39,18 +24,6 @@
         }
     },
     {
-        "Name": "IdButton",
-        "LineName": "ID_BUTTON",
-        "EventMon": "FALLING",
-        "Continue": true,
-        "Target":
-        {
-            "FALLING": [
-                "id-button-pressed.service"
-            ]
-        }
-    },
-    {
         "Name": "PROCHOT",
         "LineName": "PROCHOT",
         "EventMon": "BOTH",
diff --git a/meta-mct/meta-s5549/recipes-phosphor/gpio/phosphor-gpio-monitor_git.bbappend b/meta-mct/meta-s5549/recipes-phosphor/gpio/phosphor-gpio-monitor_git.bbappend
index 1ba90a5..5b04dce 100755
--- a/meta-mct/meta-s5549/recipes-phosphor/gpio/phosphor-gpio-monitor_git.bbappend
+++ b/meta-mct/meta-s5549/recipes-phosphor/gpio/phosphor-gpio-monitor_git.bbappend
@@ -4,7 +4,6 @@ SRC_URI += "file://phosphor-multi-gpio-monitor.service"
 SRC_URI += "file://phosphor-gpio-monitor@.service"
 SRC_URI += "file://s5549_gpio.json"
 SRC_URI += "file://0001-Support-GPIO-interrupt.patch \
-            file://0002-init-host-status.patch \
             file://0003-Filter-the-debug-log-and-change-service-enable-metho.patch \
            "
 
diff --git a/meta-mct/meta-s5549/recipes-phosphor/gpio/power-state.bb b/meta-mct/meta-s5549/recipes-phosphor/gpio/power-state.bb
deleted file mode 100755
index 5627817..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/gpio/power-state.bb
+++ /dev/null
@@ -1,24 +0,0 @@
-SUMMARY = "Power related trigger application"
-PR = "r1"
-
-inherit obmc-phosphor-systemd
-
-LICENSE = "Apache-2.0"
-LIC_FILES_CHKSUM = "file://${MCTBASE}/COPYING.apache-2.0;md5=34400b68072d710fecd0a2940a0d1658"
-
-DEPENDS += "virtual/obmc-gpio-monitor"
-RDEPENDS_${PN} += "virtual/obmc-gpio-monitor"
-
-S = "${WORKDIR}"
-SRC_URI += "file://setPowerProperty.sh \
-            file://SetPowerGoodPropertyOff.service \
-            file://SetPowerGoodPropertyOn.service \
-            "
-
-SYSTEMD_SERVICE_${PN} += "SetPowerGoodPropertyOff.service"
-SYSTEMD_SERVICE_${PN} += "SetPowerGoodPropertyOn.service"
-
-do_install() {
-    install -d ${D}${sbindir}
-    install -m 0755 ${WORKDIR}/setPowerProperty.sh ${D}/${sbindir}/setPowerProperty.sh
-}
diff --git a/meta-mct/meta-s5549/recipes-phosphor/gpio/power-state/SetPowerGoodPropertyOff.service b/meta-mct/meta-s5549/recipes-phosphor/gpio/power-state/SetPowerGoodPropertyOff.service
deleted file mode 100755
index 48abe99..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/gpio/power-state/SetPowerGoodPropertyOff.service
+++ /dev/null
@@ -1,6 +0,0 @@
-[Unit]
-Description=Set Power Good Property Off
-
-[Service]
-Type=oneshot
-ExecStart=/usr/sbin/setPowerProperty.sh off
diff --git a/meta-mct/meta-s5549/recipes-phosphor/gpio/power-state/SetPowerGoodPropertyOn.service b/meta-mct/meta-s5549/recipes-phosphor/gpio/power-state/SetPowerGoodPropertyOn.service
deleted file mode 100755
index 047b6be..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/gpio/power-state/SetPowerGoodPropertyOn.service
+++ /dev/null
@@ -1,7 +0,0 @@
-[Unit]
-Description=Set Power Good Property On
-
-[Service]
-Type=oneshot
-ExecStart=/usr/sbin/setPowerProperty.sh on
-
diff --git a/meta-mct/meta-s5549/recipes-phosphor/gpio/power-state/setPowerProperty.sh b/meta-mct/meta-s5549/recipes-phosphor/gpio/power-state/setPowerProperty.sh
deleted file mode 100755
index 7eeb37a..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/gpio/power-state/setPowerProperty.sh
+++ /dev/null
@@ -1,47 +0,0 @@
-#!/bin/sh
-
-bmcState=$(busctl get-property xyz.openbmc_project.State.BMC /xyz/openbmc_project/state/bmc0 xyz.openbmc_project.State.BMC CurrentBMCState|cut -d ' ' -f 2|cut -d . -f 6|cut -c -5)
-
-#offstatus=$(systemctl is-active host-poweroff.service)
-
-if [ "$1" == "on" ]; then
-    echo "pgood on"
-    busctl set-property "org.openbmc.control.Power" "/org/openbmc/control/power0" "org.openbmc.control.Power" "pgood" i 1
-    busctl set-property "org.openbmc.control.Power" "/org/openbmc/control/power0" "org.openbmc.control.Power" "state" i 1
-    if [ ! -d "/run/openbmc/" ]; then
-        mkdir /run/openbmc/
-    fi
-    touch /run/openbmc/chassis@0-on
-    touch /run/openbmc/host@0-on
-        	
-    if [ -f "/run/openbmc/ipmi-poweron" ]; then 
-	rm /run/openbmc/ipmi-poweron
-    else
-        echo "set host to on"
-
-        busctl set-property xyz.openbmc_project.State.Host /xyz/openbmc_project/state/host0 xyz.openbmc_project.State.Host CurrentHostState s "xyz.openbmc_project.State.Host.HostState.Running"
-        busctl set-property xyz.openbmc_project.State.Host /xyz/openbmc_project/state/host0 xyz.openbmc_project.State.Host RequestedHostTransition s "xyz.openbmc_project.State.Host.Transition.On"
-        # set chassis to on
-        busctl set-property xyz.openbmc_project.State.Chassis /xyz/openbmc_project/state/chassis0 xyz.openbmc_project.State.Chassis CurrentPowerState s "xyz.openbmc_project.State.Chassis.PowerState.On"
-        busctl set-property xyz.openbmc_project.State.Chassis /xyz/openbmc_project/state/chassis0 xyz.openbmc_project.State.Chassis RequestedPowerTransition s "xyz.openbmc_project.State.Chassis.Transition.On"
-    fi
-
-else
-    echo "pgood off"
-    busctl set-property "org.openbmc.control.Power" "/org/openbmc/control/power0" "org.openbmc.control.Power" "pgood" i 0
-    busctl set-property "org.openbmc.control.Power" "/org/openbmc/control/power0" "org.openbmc.control.Power" "state" i 0
-	rm -f /run/openbmc/chassis@0-on
-	rm -f /run/openbmc/host@0-on
-	rm -f /run/openbmc/host@0-request
-    
-    if [ -f "/run/openbmc/ipmi-poweroff" ]; then
-	rm /run/openbmc/ipmi-poweroff
-    else
-        echo "set host to off"
-	busctl set-property xyz.openbmc_project.State.Host /xyz/openbmc_project/state/host0 xyz.openbmc_project.State.Host CurrentHostState s "xyz.openbmc_project.State.Host.HostState.Off"
-        busctl set-property xyz.openbmc_project.State.Host /xyz/openbmc_project/state/host0 xyz.openbmc_project.State.Host RequestedHostTransition s "xyz.openbmc_project.State.Host.Transition.Off"
-        busctl set-property xyz.openbmc_project.State.Chassis /xyz/openbmc_project/state/chassis0 xyz.openbmc_project.State.Chassis CurrentPowerState s "xyz.openbmc_project.State.Chassis.PowerState.Off"
-        busctl set-property xyz.openbmc_project.State.Chassis /xyz/openbmc_project/state/chassis0 xyz.openbmc_project.State.Chassis RequestedPowerTransition s "xyz.openbmc_project.State.Chassis.Transition.Off"
-    fi
-fi
-
diff --git a/meta-mct/meta-s5549/recipes-phosphor/images/obmc-phosphor-image.bbappend b/meta-mct/meta-s5549/recipes-phosphor/images/obmc-phosphor-image.bbappend
index 6b09ddb..232f75e 100755
--- a/meta-mct/meta-s5549/recipes-phosphor/images/obmc-phosphor-image.bbappend
+++ b/meta-mct/meta-s5549/recipes-phosphor/images/obmc-phosphor-image.bbappend
@@ -2,7 +2,6 @@
 OBMC_IMAGE_EXTRA_INSTALL_append_s5549 = " libgpiod \
                                           gpio-initial \
                                           hbled-ctrl \
-                                          mct-powerctrl \
                                           mct-default-action \
                                           cpu-state \ 
                                           phosphor-ipmi-ipmb \
@@ -20,7 +19,6 @@ OBMC_IMAGE_EXTRA_INSTALL_append_s5549 = " libgpiod \
                                           bmc-sel \
                                           mct-ipmi-oem \
                                           crashdump-bin \
-                                          button-monitor \
                                           entity-rescan \
                                           phosphor-post-code-manager \
                                           phosphor-host-postd \
@@ -31,6 +29,4 @@ OBMC_IMAGE_EXTRA_INSTALL_append_s5549 = " libgpiod \
                                           pattern-matching \
                                           state-manager-recheck \
                                           srvcfg-manager \
-                                          button-state \
-                                          power-state \
                                         "
diff --git a/meta-mct/meta-s5549/recipes-phosphor/ipmi/phosphor-ipmi-host/0015-Add-debug-message-for-watchdog-reset.patch b/meta-mct/meta-s5549/recipes-phosphor/ipmi/phosphor-ipmi-host/0015-Add-debug-message-for-watchdog-reset.patch
deleted file mode 100755
index bd22cc7..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/ipmi/phosphor-ipmi-host/0015-Add-debug-message-for-watchdog-reset.patch
+++ /dev/null
@@ -1,24 +0,0 @@
-From 2c6865d0a9fe6add72952e80a7e8942a4ca09c48 Mon Sep 17 00:00:00 2001
-From: John Chung <john.chung@mic.com.tw>
-Date: Tue, 21 Jul 2020 19:39:35 +0800
-Subject: [PATCH] Add debug message for watchdog reset
-
----
- app/watchdog.cpp | 1 +
- 1 file changed, 1 insertion(+)
-
-diff --git a/app/watchdog.cpp b/app/watchdog.cpp
-index fca27b7..d87c82d 100755
---- a/app/watchdog.cpp
-+++ b/app/watchdog.cpp
-@@ -58,6 +58,7 @@ ipmi::RspType<> ipmiAppResetWatchdogTimer()
-         // The ipmi standard dictates we enable the watchdog during reset
-         wd_service.resetTimeRemaining(true);
-         lastCallSuccessful = true;
-+        std::cerr << "Reset watchdog timer and start counting.\n";
-         return ipmi::responseSuccess();
-     }
-     catch (const InternalFailure& e)
--- 
-2.7.4
-
diff --git a/meta-mct/meta-s5549/recipes-phosphor/ipmi/phosphor-ipmi-host/0019-block-power-control-until-pervious-action-completed.patch b/meta-mct/meta-s5549/recipes-phosphor/ipmi/phosphor-ipmi-host/0019-block-power-control-until-pervious-action-completed.patch
deleted file mode 100755
index 4cd25c1..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/ipmi/phosphor-ipmi-host/0019-block-power-control-until-pervious-action-completed.patch
+++ /dev/null
@@ -1,155 +0,0 @@
-From 8239d22d4bf99e10e150ddb9bfd5b9128394dc48 Mon Sep 17 00:00:00 2001
-From: Ray Lue <ray.lue@mic.com.tw>
-Date: Wed, 30 Sep 2020 11:08:26 +0800
-Subject: [PATCH 1/1] block power control until pervious action is completed
-
----
- chassishandler.cpp | 100 +++++++++++++++++++++++++++++++++++++++++++--
- 1 file changed, 97 insertions(+), 3 deletions(-)
-
-diff --git a/chassishandler.cpp b/chassishandler.cpp
-index 269a690..21b04ba 100755
---- a/chassishandler.cpp
-+++ b/chassishandler.cpp
-@@ -7,6 +7,8 @@
- #include <limits.h>
- #include <mapper.h>
- #include <netinet/in.h>
-+#include <thread>
-+#include <future>
- 
- #include <array>
- #include <chrono>
-@@ -735,6 +737,69 @@ ipmi::RspType<> ipmiSetChassisCap(bool intrusion, bool fpLockout,
-     return ipmi::responseSuccess();
- }
- 
-+//check target status
-+constexpr auto SYSTEMD_SERVICE = "org.freedesktop.systemd1";
-+constexpr auto SYSTEMD_OBJ_PATH = "/org/freedesktop/systemd1";
-+constexpr auto SYSTEMD_INTERFACE = "org.freedesktop.systemd1.Manager";
-+constexpr auto SYSTEMD_PROPERTY_IFACE = "org.freedesktop.DBus.Properties";
-+constexpr auto SYSTEMD_INTERFACE_UNIT = "org.freedesktop.systemd1.Unit";
-+constexpr auto ACTIVATING_STATE = "activating";
-+
-+//constexpr auto HOST_STATE_POWEROFF_TGT = "obmc-host-stop@0.target";
-+//constexpr auto HOST_STATE_POWERON_TGT = "obmc-host-start@0.target";
-+                                                
-+constexpr auto HOST_STATE_POWEROFF_SERVICE = "host-poweroff.service";
-+constexpr auto HOST_STATE_POWERON_SERVICE = "host-poweron.service";
-+
-+
-+bool stateActiving(const std::string& target)
-+{
-+    sdbusplus::message::variant<std::string> currentState;
-+    sdbusplus::message::object_path unitTargetPath;
-+    std::shared_ptr<sdbusplus::asio::connection> bus = getSdBus();
-+
-+    auto method = bus->new_method_call(SYSTEMD_SERVICE, SYSTEMD_OBJ_PATH,
-+                                            SYSTEMD_INTERFACE, "GetUnit");
-+
-+    method.append(target);
-+
-+    try
-+    {
-+        auto result = bus->call(method);
-+        result.read(unitTargetPath);
-+    }
-+     catch (sdbusplus::exception::SdBusError& e)
-+    {
-+         log<level::ERR>("Error in GetUnit call", entry("ERROR=%s", e.what()));
-+        return false;
-+    }
-+
-+    method = bus->new_method_call(
-+        SYSTEMD_SERVICE,
-+        static_cast<const std::string&>(unitTargetPath).c_str(),
-+        SYSTEMD_PROPERTY_IFACE, "Get");
-+
-+    method.append(SYSTEMD_INTERFACE_UNIT, "ActiveState");
-+
-+    try
-+    {
-+        auto result = bus->call(method);
-+        result.read(currentState);
-+    }
-+    catch (sdbusplus::exception::SdBusError& e)
-+    {
-+        log<level::ERR>("Error in ActiveState Get",
-+                        entry("ERROR=%s", e.what()));
-+        return false;
-+    }
-+    
-+    const auto& currentStateStr =
-+        sdbusplus::message::variant_ns::get<std::string>(currentState);
-+
-+    return currentStateStr == ACTIVATING_STATE;
-+}
-+
-+
- //------------------------------------------
- // Calls into Host State Manager Dbus object
- //------------------------------------------
-@@ -1216,6 +1281,31 @@ void indicate_no_softoff_needed()
-     std::ofstream(path.c_str());
- }
- 
-+int powerOnCb(void)
-+{
-+    while (stateActiving(HOST_STATE_POWEROFF_SERVICE))
-+    {
-+        std::cerr << "Waiting power off completed\n";
-+        std::this_thread::sleep_for (std::chrono::seconds(1));
-+    }
-+    std::ofstream f("/run/openbmc/ipmi-poweron");
-+    if(f.is_open()) f.close();
-+    return initiate_state_transition(State::Host::Transition::On);
-+}
-+
-+int powerOffCb(void)
-+{
-+    while (stateActiving(HOST_STATE_POWERON_SERVICE))
-+    {
-+        std::cerr << "Waiting power on completed\n";
-+        std::this_thread::sleep_for (std::chrono::seconds(1));
-+    }
-+    std::ofstream f("/run/openbmc/ipmi-poweroff");
-+    if(f.is_open()) f.close();
-+    return initiate_state_transition(State::Host::Transition::Off);
-+}
-+
-+
- /** @brief Implementation of chassis control command
-  *
-  *  @param - chassisControl command byte
-@@ -1232,12 +1322,15 @@ ipmi::RspType<> ipmiChassisControl(uint8_t chassisControl)
-     static constexpr char const* fruStateSensorPath= "/xyz/openbmc_project/sensors/fru_state/IPMI_Power_Diag";
-     std::vector<uint8_t> powerControlEventData{0x02,0x01,0xff};
-     int rc = 0;
--
-+    std::future<int>cb, cb1;
-+        
-     switch (chassisControl)
-     {
-         case CMD_POWER_ON:
-             generateSELEvent(fruStatePowerOn,powerControlEventData);
--            rc = initiate_state_transition(State::Host::Transition::On);
-+            //initiate_state_transition(State::Host::Transition::On);
-+            cb = std::async(std::launch::async,powerOnCb);
-+            rc = 0;
-             break;
-         case CMD_POWER_OFF:
-             // This path would be hit in 2 conditions.
-@@ -1266,7 +1359,8 @@ ipmi::RspType<> ipmiChassisControl(uint8_t chassisControl)
- 
-                 // Now request the shutdown
-                 generateSELEvent(fruStatePowerOff,powerControlEventData);
--                rc = initiate_state_transition(State::Host::Transition::Off);
-+                cb1 = std::async(std::launch::async,powerOffCb);
-+                rc = 0;
-             }
-             else
-             {
--- 
-2.26.2
-
diff --git a/meta-mct/meta-s5549/recipes-phosphor/ipmi/phosphor-ipmi-host/0020-Change-power-soft-command-from-action-off-to-action-.patch b/meta-mct/meta-s5549/recipes-phosphor/ipmi/phosphor-ipmi-host/0020-Change-power-soft-command-from-action-off-to-action-.patch
new file mode 100755
index 0000000..a7dbe09
--- /dev/null
+++ b/meta-mct/meta-s5549/recipes-phosphor/ipmi/phosphor-ipmi-host/0020-Change-power-soft-command-from-action-off-to-action-.patch
@@ -0,0 +1,25 @@
+From 0128e355f06cb0b487015d54e519c5bf7b3eccfe Mon Sep 17 00:00:00 2001
+From: John Chung <john.chung@mic.com.tw>
+Date: Tue, 22 Dec 2020 10:20:53 +0800
+Subject: [PATCH] Change power soft command from action off to action soft
+
+---
+ chassishandler.cpp | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+diff --git a/chassishandler.cpp b/chassishandler.cpp
+index 269a690..8e7a617 100755
+--- a/chassishandler.cpp
++++ b/chassishandler.cpp
+@@ -1297,7 +1297,7 @@ ipmi::RspType<> ipmiChassisControl(uint8_t chassisControl)
+         case CMD_SOFT_OFF_VIA_OVER_TEMP:
+             // Request Host State Manager to do a soft power off
+             generateSELEvent(fruStatePowerSoft,powerControlEventData);
+-            rc = initiate_state_transition(State::Host::Transition::Off);
++            rc = initiate_state_transition(State::Host::Transition::gracefulOff);
+             break;
+ 
+         case CMD_PULSE_DIAGNOSTIC_INTR:
+-- 
+2.7.4
+
diff --git a/meta-mct/meta-s5549/recipes-phosphor/ipmi/phosphor-ipmi-host_git.bbappend b/meta-mct/meta-s5549/recipes-phosphor/ipmi/phosphor-ipmi-host_git.bbappend
index 384ddbe..3ffd9c0 100755
--- a/meta-mct/meta-s5549/recipes-phosphor/ipmi/phosphor-ipmi-host_git.bbappend
+++ b/meta-mct/meta-s5549/recipes-phosphor/ipmi/phosphor-ipmi-host_git.bbappend
@@ -11,11 +11,10 @@ SRC_URI += "file://0004-Implement-NMI-command-in-Chassis-Control-command.patch \
             file://0012-Fix-expiration-flags-unexpected-status-in-get-watchd.patch \
             file://0013-Implement-power-control-SEL-generated-in-chassis-con.patch \
             file://0014-Implement-the-DCMI-power-reading-and-power-limit-com.patch \
-            file://0015-Add-debug-message-for-watchdog-reset.patch \
             file://0016-rewrite-Get-Session-Info-to-use-new-yielding-D-Bus-A.patch \
             file://0017-Fix-the-wrong-field-value-for-session-info-commnad.patch \
             file://0018-Add-the-detect-for-firmare-revision.patch \
-            file://0019-block-power-control-until-pervious-action-completed.patch \
+            file://0020-Change-power-soft-command-from-action-off-to-action-.patch \
             "
 EXTRA_OECONF += "--disable-i2c-whitelist-check"
 
diff --git a/meta-mct/meta-s5549/recipes-phosphor/mct-ipmi-oem/files/oemcmd.cpp b/meta-mct/meta-s5549/recipes-phosphor/mct-ipmi-oem/files/oemcmd.cpp
index eb7ed5f..032e1b5 100755
--- a/meta-mct/meta-s5549/recipes-phosphor/mct-ipmi-oem/files/oemcmd.cpp
+++ b/meta-mct/meta-s5549/recipes-phosphor/mct-ipmi-oem/files/oemcmd.cpp
@@ -33,7 +33,7 @@
 #include <nlohmann/json.hpp>
 
 
-#include "xyz/openbmc_project/Control/Power/RestorePolicy/server.hpp"
+#include "xyz/openbmc_project/Control/Power/RestoreDelay/server.hpp"
 
 #define FSC_SERVICE "xyz.openbmc_project.EntityManager"
 #define FSC_OBJECTPATH "/xyz/openbmc_project/inventory/system/board/s5549_Baseboard/Pid_"
@@ -1165,8 +1165,8 @@ ipmi::RspType<uint8_t, uint8_t, uint8_t> ipmi_tyan_RamdomDelayACRestorePowerON(u
     std::uint8_t opCodeResponse, delayTimeLSBResponse, delayTimeMSBResponse;;
 
     constexpr auto service = "xyz.openbmc_project.Settings";
-    constexpr auto path = "/xyz/openbmc_project/control/host0/power_restore_policy";
-    constexpr auto powerRestoreInterface = "xyz.openbmc_project.Control.Power.RestorePolicy";
+    constexpr auto path = "/xyz/openbmc_project/control/power_restore_delay";
+    constexpr auto powerRestoreInterface = "xyz.openbmc_project.Control.Power.RestoreDelay";
     constexpr auto alwaysOnPolicy = "PowerRestoreAlwaysOnPolicy";
     constexpr auto delay = "PowerRestoreDelay";
 
@@ -1181,7 +1181,7 @@ ipmi::RspType<uint8_t, uint8_t, uint8_t> ipmi_tyan_RamdomDelayACRestorePowerON(u
         try
         {
             auto method = bus.new_method_call(service, path, PROPERTY_INTERFACE,"Set");
-            method.append(powerRestoreInterface, alwaysOnPolicy, sdbusplus::message::variant<std::string>(RestorePolicy::convertAlwaysOnPolicyToString((RestorePolicy::AlwaysOnPolicy)(opCode & 0x7F))));
+            method.append(powerRestoreInterface, alwaysOnPolicy, sdbusplus::message::variant<std::string>(RestoreDelay::convertAlwaysOnPolicyToString((RestoreDelay::AlwaysOnPolicy)(opCode & 0x7F))));
             bus.call_noreply(method);
 
             uint32_t delayValue = delayTimeLSB | (delayTimeMSB << 8);
@@ -1231,7 +1231,7 @@ ipmi::RspType<uint8_t, uint8_t, uint8_t> ipmi_tyan_RamdomDelayACRestorePowerON(u
         }
         auto powerRestoreDelay = sdbusplus::message::variant_ns::get<uint32_t>(resultDelay);
 
-        opCodeResponse = (opCode & 0x80) | (uint8_t)RestorePolicy::convertAlwaysOnPolicyFromString(powerAlwaysOnPolicy);
+        opCodeResponse = (opCode & 0x80) | (uint8_t)RestoreDelay::convertAlwaysOnPolicyFromString(powerAlwaysOnPolicy);
 
         uint8_t *delayValue = (uint8_t *)&powerRestoreDelay;
         delayTimeLSBResponse = delayValue[0];
diff --git a/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/host-gpio.service b/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/host-gpio.service
deleted file mode 100755
index 159b3cc..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/host-gpio.service
+++ /dev/null
@@ -1,9 +0,0 @@
-[Unit]
-Description=Configure GPIOs for Host Power Control
-
-[Service]
-Restart=no
-RemainAfterExit=true
-Type=oneshot
-ExecStart=/usr/bin/env init_once.sh
-SyslogIdentifier=init_once.sh
diff --git a/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/host-powercyclelog.service b/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/host-powercyclelog.service
deleted file mode 100755
index 17c0f67..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/host-powercyclelog.service
+++ /dev/null
@@ -1,13 +0,0 @@
-[Unit]
-Description=Log Power Cycle Event
-Requires=host-gpio.service
-After=host-gpio.service
-
-[Service]
-RemainAfterExit=no
-Type=oneshot
-ExecStart=/usr/bin/env powercyclelog.sh
-SyslogIdentifier=Power Cycle
-
-[Install]
-WantedBy=obmc-host-reboot@0.target
diff --git a/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/host-poweroff.service b/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/host-poweroff.service
deleted file mode 100755
index 6dfa3cf..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/host-poweroff.service
+++ /dev/null
@@ -1,14 +0,0 @@
-[Unit]
-Description=Stop Host
-Requires=host-gpio.service
-After=host-gpio.service
-Conflicts=obmc-chassis-poweron@0.target
-
-[Service]
-RemainAfterExit=no
-Type=oneshot
-ExecStart=/usr/bin/env poweroff.sh
-SyslogIdentifier=poweroff.sh
-
-[Install]
-WantedBy=obmc-chassis-poweroff@0.target
diff --git a/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/host-poweron.service b/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/host-poweron.service
deleted file mode 100755
index 1ffc24b..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/host-poweron.service
+++ /dev/null
@@ -1,14 +0,0 @@
-[Unit]
-Description=Start Host
-Requires=host-gpio.service
-After=host-gpio.service
-Conflicts=obmc-chassis-poweroff@0.target
-
-[Service]
-RemainAfterExit=no
-Type=oneshot
-ExecStart=/usr/bin/env poweron.sh
-SyslogIdentifier=poweron.sh
-
-[Install]
-WantedBy=obmc-chassis-poweron@0.target
diff --git a/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/host-powerreset.service b/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/host-powerreset.service
deleted file mode 100755
index b2a5f70..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/host-powerreset.service
+++ /dev/null
@@ -1,13 +0,0 @@
-[Unit]
-Description=Host Reset System service
-Requires=host-gpio.service
-After=host-gpio.service
-
-[Service]
-RemainAfterExit=no
-Type=oneshot
-ExecStart=/usr/bin/env powerreset.sh
-SyslogIdentifier=powerreset.sh
-
-[Install]
-WantedBy=obmc-host-force-warm-reboot@0.target
diff --git a/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/init_once.sh b/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/init_once.sh
deleted file mode 100755
index b77f190..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/init_once.sh
+++ /dev/null
@@ -1,6 +0,0 @@
-#!/bin/bash
-
-# Set all output GPIOs as such and drive them with reasonable values.
-echo "MCT power control init once script";
-
-exit 0;
diff --git a/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/powercyclelog.sh b/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/powercyclelog.sh
deleted file mode 100755
index 003d611..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/powercyclelog.sh
+++ /dev/null
@@ -1,10 +0,0 @@
-#!/bin/bash
-
-SERVICE="xyz.openbmc_project.Logging.IPMI"
-OBJECT="/xyz/openbmc_project/Logging/IPMI"
-INTERFACE="xyz.openbmc_project.Logging.IPMI"
-METHOD="IpmiSelAdd"
-
-busctl call $SERVICE $OBJECT $INTERFACE $METHOD ssaybq "SEL Entry" "/xyz/openbmc_project/sensors/fru_state/IPMI_POWER_CYCLE" 3 {0x02,0x01,0xff} yes 0x20
-
-exit 0;
diff --git a/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/poweroff.sh b/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/poweroff.sh
deleted file mode 100755
index b70fbb1..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/poweroff.sh
+++ /dev/null
@@ -1,26 +0,0 @@
-#!/bin/bash
-
-echo "Enter Power off System action"
-
-pwrstatus=$(busctl get-property org.openbmc.control.Power /org/openbmc/control/power0 org.openbmc.control.Power pgood | cut -d' ' -f2)
-if [ $pwrstatus -eq 1 ]; then   
-    # *** Push power button ***
-    # GPIO E1
-    echo "Execute Power off"
-    /usr/bin/gpioset `gpiofind PWRBTN_OUT`=0
-    for (( i=0; i<=6; i=i+1 ))
-    do
-        sleep 1
-        pwrstatus=$(busctl get-property org.openbmc.control.Power /org/openbmc/control/power0 org.openbmc.control.Power pgood | cut -d' ' -f2)
-        if [ $pwrstatus -eq 0 ]; then
-             break;    
-        fi
-    done    
-    /usr/bin/gpioset `gpiofind PWRBTN_OUT`=1
-    sleep 1
-fi
-
-obmcutil chassisoff
-
-echo "Exit Power off System action"
-exit 0;
diff --git a/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/poweron.sh b/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/poweron.sh
deleted file mode 100755
index 93cc181..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/poweron.sh
+++ /dev/null
@@ -1,29 +0,0 @@
-#!/bin/bash
-
-echo "Enter Power on System action"
-
-for (( i=0; i<=6; i=i+1 ))
-do
-    duringPowerOff=$(systemctl is-active host-poweroff.service)
-    if [ "inactive" != $duringPowerOff ]; then
-        echo "During power off: $duringPowerOff"
-        sleep 1
-    else
-        break
-    fi
-done
-pwrstatus=$(busctl get-property org.openbmc.control.Power /org/openbmc/control/power0 org.openbmc.control.Power pgood | cut -d' ' -f2)
-if [ $pwrstatus -eq 0 ]; then
-    /usr/bin/gpioget `gpiofind PWRBTN_OUT` > /dev/null 
-    sleep 1	
-    echo "Execute Power on"
-    # *** Push power button ***
-    # GPIO E1 for power on
-    /usr/bin/gpioset `gpiofind PWRBTN_OUT`=0
-    sleep 2
-    /usr/bin/gpioset `gpiofind PWRBTN_OUT`=1 
-
-fi
-
-echo "Exit Power on System action"
-exit 0;
diff --git a/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/powerreset.sh b/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/powerreset.sh
deleted file mode 100755
index d0c0087..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/files/powerreset.sh
+++ /dev/null
@@ -1,27 +0,0 @@
-/bin/bash
-
-echo "Enter Power Reset System Action"
-
-SERVICE="xyz.openbmc_project.Logging.IPMI"
-OBJECT="/xyz/openbmc_project/Logging/IPMI"
-INTERFACE="xyz.openbmc_project.Logging.IPMI"
-METHOD="IpmiSelAdd"
-
-echo "action: host reset"
-pwrstatus=$(busctl get-property org.openbmc.control.Power /org/openbmc/control/power0 org.openbmc.control.Power pgood | cut -d' ' -f2)
-if [ $pwrstatus -eq 1 ]; then
-
-    # *** Reset ***
-    /usr/bin/gpioset `gpiofind RSTBTN_OUT`=0
-    sleep 1
-    /usr/bin/gpioset `gpiofind RSTBTN_OUT`=1
-
-    busctl call $SERVICE $OBJECT $INTERFACE $METHOD ssaybq "SEL Entry" "/xyz/openbmc_project/sensors/restart/SYSTEM_RESTART" 3 {0x07,0x01,0x00} yes 0x20
-
-else
-    echo "System is off state."
-
-fi
-
-echo "Exit Power reset System action"
-exit 0;
diff --git a/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/mct-powerctrl.bb b/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/mct-powerctrl.bb
deleted file mode 100755
index 663ac09..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/mct-powerctrl/mct-powerctrl.bb
+++ /dev/null
@@ -1,32 +0,0 @@
-LICENSE = "Apache-2.0"
-LIC_FILES_CHKSUM = "file://${MCTBASE}/COPYING.apache-2.0;md5=34400b68072d710fecd0a2940a0d1658"
-FILESEXTRAPATHS_append := "${THISDIR}/files:"
-
-inherit systemd
-inherit obmc-phosphor-systemd
-
-S = "${WORKDIR}/"
-
-SRC_URI = "file://init_once.sh \
-           file://poweroff.sh \
-           file://poweron.sh \
-           file://powerreset.sh \
-           file://host-gpio.service \
-           file://host-poweroff.service \
-           file://host-poweron.service \
-           file://host-powerreset.service \
-           "
-
-DEPENDS = "systemd"
-RDEPENDS_${PN} = "bash"
-
-SYSTEMD_PACKAGES = "${PN}"
-SYSTEMD_SERVICE_${PN} = "host-gpio.service host-poweron.service host-poweroff.service host-powerreset.service"
-
-do_install() {
-    install -d ${D}/usr/sbin
-    install -m 0755 ${S}init_once.sh ${D}/${sbindir}/
-    install -m 0755 ${S}poweroff.sh ${D}/${sbindir}/
-    install -m 0755 ${S}poweron.sh ${D}/${sbindir}/
-    install -m 0755 ${S}powerreset.sh ${D}/${sbindir}/
-}
diff --git a/meta-mct/meta-s5549/recipes-phosphor/packagegroups/packagegroup-mct-apps.bbappend b/meta-mct/meta-s5549/recipes-phosphor/packagegroups/packagegroup-mct-apps.bbappend
index e50ac5f..b212774 100755
--- a/meta-mct/meta-s5549/recipes-phosphor/packagegroups/packagegroup-mct-apps.bbappend
+++ b/meta-mct/meta-s5549/recipes-phosphor/packagegroups/packagegroup-mct-apps.bbappend
@@ -1,4 +1,4 @@
-RDEPENDS_${PN}-chassis += " \
-                            obmc-phosphor-buttons-signals \
-                            obmc-phosphor-buttons-handler \
-                            "
+RDEPENDS_${PN}-chassis_remove += " \
+                                    obmc-control-chassis \
+                                    obmc-op-control-power \
+                                  "
diff --git a/meta-mct/meta-s5549/recipes-phosphor/sensors/dbus-sensors/0004-support-ipmi-ACPI-sensor.patch b/meta-mct/meta-s5549/recipes-phosphor/sensors/dbus-sensors/0004-support-ipmi-ACPI-sensor.patch
index 41df2d8..e78cdda 100755
--- a/meta-mct/meta-s5549/recipes-phosphor/sensors/dbus-sensors/0004-support-ipmi-ACPI-sensor.patch
+++ b/meta-mct/meta-s5549/recipes-phosphor/sensors/dbus-sensors/0004-support-ipmi-ACPI-sensor.patch
@@ -1,13 +1,13 @@
-From 986804831c2a2cf2d0bc734a688fa88c5c790b1a Mon Sep 17 00:00:00 2001
-From: Ray Lue <ray.lue@mic.com.tw>
-Date: Thu, 12 Mar 2020 10:46:57 +0800
-Subject: [PATCH 1/1] support ipmi ACPI sensor
+From f5a325cae5b93fed853561dd690f313ed6067b30 Mon Sep 17 00:00:00 2001
+From: John Chung <john.chung@mic.com.tw>
+Date: Mon, 21 Dec 2020 19:12:23 +0800
+Subject: [PATCH] support ipmi ACPI sensor
 
 ---
- CMakeLists.txt                                |  14 ++
- .../xyz.openbmc_project.acpisensor.service    |  12 ++
- src/AcpiSensorMain.cpp                        | 133 ++++++++++++++++++
- 3 files changed, 159 insertions(+)
+ CMakeLists.txt                                     |  14 +++
+ .../xyz.openbmc_project.acpisensor.service         |  12 ++
+ src/AcpiSensorMain.cpp                             | 129 +++++++++++++++++++++
+ 3 files changed, 155 insertions(+)
  create mode 100644 service_files/xyz.openbmc_project.acpisensor.service
  create mode 100755 src/AcpiSensorMain.cpp
 
@@ -74,10 +74,10 @@ index 0000000..f3e83c6
 +WantedBy=multi-user.target
 diff --git a/src/AcpiSensorMain.cpp b/src/AcpiSensorMain.cpp
 new file mode 100755
-index 0000000..6cd8285
+index 0000000..8c78420
 --- /dev/null
 +++ b/src/AcpiSensorMain.cpp
-@@ -0,0 +1,133 @@
+@@ -0,0 +1,129 @@
 +/*
 +// Copyright (c) 2018 Intel Corporation
 +//
@@ -152,7 +152,7 @@ index 0000000..6cd8285
 +    
 +    auto PgoodEventMatcherCallback =
 +        [systemBus](sdbusplus::message::message& message) {
-+            boost::container::flat_map<std::string, std::variant<int>> propertiesChanged;
++            boost::container::flat_map<std::string, std::variant<std::string>> values;
 +            std::string objectName;
 +            if (message.is_method_error())
 +            {
@@ -164,23 +164,18 @@ index 0000000..6cd8285
 +            {
 +                std::cout << message.get_path() << " is changed\n";
 +            }
-+            message.read(objectName, propertiesChanged);
-+            std::string event = propertiesChanged.begin()->first;
-+            int *pgood = std::get_if<int>(&propertiesChanged.begin()->second);
-+
-+            if (!pgood)
-+            {
-+                std::cerr << "event has invalid type\n";
-+                return;
-+            }
-+           
-+            if (event == "pgood")
++            message.read(objectName, values);
++            auto findState = values.find(power::property);
++            if (findState != values.end())
 +            {
++                bool on = boost::ends_with(
++                    std::get<std::string>(findState->second), "Running");
++
 +                //log SEL
 +                uint16_t genid = 0x20;
 +                bool assert=1;
 +                std::vector<uint8_t> eventData(selEvtDataMaxSize, 0xFF);
-+                eventData[0] = (*pgood == 1) ? 0:5;
++                eventData[0] = (on) ? 0:5;
 +                       
 +                sdbusplus::message::message writeSEL = systemBus->new_method_call(
 +                            ipmiSELService, ipmiSELPath, ipmiSELAddInterface, "IpmiSelAdd");
@@ -203,8 +198,9 @@ index 0000000..6cd8285
 +    //event trigger, this can move to poll the gpio service.
 +    sdbusplus::bus::match::match caterrEventMatcher(
 +        static_cast<sdbusplus::bus::bus&>(*systemBus),
-+        "type='signal',interface='org.freedesktop.DBus.Properties',member='"
-+        "PropertiesChanged',arg0namespace='org.openbmc.control.Power'",
++        "type='signal',interface='" + std::string(properties::interface) +
++            "',path='" + std::string(power::path) + "',arg0='" +
++            std::string(power::interface) + "'",
 +        std::move(PgoodEventMatcherCallback));
 +
 +    io.run();
@@ -212,5 +208,5 @@ index 0000000..6cd8285
 +    return 0;
 +}
 -- 
-2.22.0
+2.7.4
 
diff --git a/meta-mct/meta-s5549/recipes-phosphor/sensors/dbus-sensors/0018-change-power-match-to-pgood-event.patch b/meta-mct/meta-s5549/recipes-phosphor/sensors/dbus-sensors/0018-change-power-match-to-pgood-event.patch
deleted file mode 100755
index 023765e..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/sensors/dbus-sensors/0018-change-power-match-to-pgood-event.patch
+++ /dev/null
@@ -1,76 +0,0 @@
-From 17b9cb6568a3ff62951304959c74e1b3ada406f5 Mon Sep 17 00:00:00 2001
-From: Ray Lue <ray.lue@mic.com.tw>
-Date: Wed, 11 Dec 2019 17:36:32 +0800
-Subject: [PATCH] change power match to pgood event
-
----
- include/Utils.hpp |  8 ++++----
- src/Utils.cpp     | 12 +++++-------
- 2 files changed, 9 insertions(+), 11 deletions(-)
- mode change 100644 => 100755 include/Utils.hpp
- mode change 100644 => 100755 src/Utils.cpp
-
-diff --git a/include/Utils.hpp b/include/Utils.hpp
-old mode 100644
-new mode 100755
-index 44e7e2e..1d436d6
---- a/include/Utils.hpp
-+++ b/include/Utils.hpp
-@@ -90,10 +90,10 @@ constexpr const char* get = "Get";
- 
- namespace power
- {
--const static constexpr char* busname = "xyz.openbmc_project.State.Host";
--const static constexpr char* interface = "xyz.openbmc_project.State.Host";
--const static constexpr char* path = "/xyz/openbmc_project/state/host0";
--const static constexpr char* property = "CurrentHostState";
-+const static constexpr char* busname = "org.openbmc.control.Power";
-+const static constexpr char* interface = "org.openbmc.control.Power";
-+const static constexpr char* path = "/org/openbmc/control/power0";
-+const static constexpr char* property = "pgood";
- } // namespace power
- namespace post
- {
-diff --git a/src/Utils.cpp b/src/Utils.cpp
-old mode 100644
-new mode 100755
-index 44a6bae..b172b69
---- a/src/Utils.cpp
-+++ b/src/Utils.cpp
-@@ -153,15 +153,14 @@ void setupPowerMatch(const std::shared_ptr<sdbusplus::asio::connection>& conn)
-             std::string(power::interface) + "'",
-         [](sdbusplus::message::message& message) {
-             std::string objectName;
--            boost::container::flat_map<std::string, std::variant<std::string>>
-+            boost::container::flat_map<std::string, std::variant<int>>
-                 values;
-             message.read(objectName, values);
-             auto findState = values.find(power::property);
-             if (findState != values.end())
-             {
--                bool on = boost::ends_with(
--                    std::get<std::string>(findState->second), "Running");
--                if (!on)
-+                int on = std::get<int>(findState->second);
-+                if ( 1 != on)
-                 {
-                     timer.cancel();
-                     powerStatusOn = false;
-@@ -204,15 +203,14 @@ void setupPowerMatch(const std::shared_ptr<sdbusplus::asio::connection>& conn)
- 
-     conn->async_method_call(
-         [](boost::system::error_code ec,
--           const std::variant<std::string>& state) {
-+           const std::variant<int>& state) {
-             if (ec)
-             {
-                 // we commonly come up before power control, we'll capture the
-                 // property change later
-                 return;
-             }
--            powerStatusOn =
--                boost::ends_with(std::get<std::string>(state), "Running");
-+            powerStatusOn = (1 == (std::get<int>(state))) ? true : false;
-         },
-         power::busname, power::path, properties::interface, properties::get,
-         power::interface, power::property);
diff --git a/meta-mct/meta-s5549/recipes-phosphor/sensors/dbus-sensors_git.bbappend b/meta-mct/meta-s5549/recipes-phosphor/sensors/dbus-sensors_git.bbappend
index 2407db1..77b6fcc 100755
--- a/meta-mct/meta-s5549/recipes-phosphor/sensors/dbus-sensors_git.bbappend
+++ b/meta-mct/meta-s5549/recipes-phosphor/sensors/dbus-sensors_git.bbappend
@@ -12,7 +12,6 @@ SRC_URI += "file://0001-add-supported-pmbus-name-cffps1.patch \
             file://0007-add-necessary-event-sensors-in-dbus.patch \
             file://0013-add-ipmi-power-status-sensor.patch \
             file://0015-hidden-peci-core-temperature-sensor.patch \
-            file://0018-change-power-match-to-pgood-event.patch \
             file://0020-Add-prochot-sensor.patch \
             file://0021-Add-Invalid-Value-property-for-power-on-sensors.patch \
             file://0022-Add-type-sensors-to-support-the-invalid-value-proper.patch \
diff --git a/meta-mct/meta-s5549/recipes-phosphor/settings/phosphor-settings-manager/ac-boot.override.yml b/meta-mct/meta-s5549/recipes-phosphor/settings/phosphor-settings-manager/ac-boot.override.yml
new file mode 100755
index 0000000..2944c90
--- /dev/null
+++ b/meta-mct/meta-s5549/recipes-phosphor/settings/phosphor-settings-manager/ac-boot.override.yml
@@ -0,0 +1,6 @@
+---
+/xyz/openbmc_project/control/host0/ac_boot:
+    - Interface: xyz.openbmc_project.Common.ACBoot
+      Properties:
+          ACBoot:
+              Default: '"True"'
diff --git a/meta-mct/meta-s5549/recipes-phosphor/settings/phosphor-settings-manager/power-restore-delay.override.yml b/meta-mct/meta-s5549/recipes-phosphor/settings/phosphor-settings-manager/power-restore-delay.override.yml
new file mode 100755
index 0000000..34d2c12
--- /dev/null
+++ b/meta-mct/meta-s5549/recipes-phosphor/settings/phosphor-settings-manager/power-restore-delay.override.yml
@@ -0,0 +1,8 @@
+---
+/xyz/openbmc_project/control/power_restore_delay:
+    - Interface: xyz.openbmc_project.Control.Power.RestoreDelay
+      Properties:
+          PowerRestoreDelay:
+              Default: 0
+          PowerRestoreAlwaysOnPolicy:
+              Default: RestoreDelay::AlwaysOnPolicy::Immediately
\ No newline at end of file
diff --git a/meta-mct/meta-s5549/recipes-phosphor/settings/phosphor-settings-manager/power-restore-policy.override.yml b/meta-mct/meta-s5549/recipes-phosphor/settings/phosphor-settings-manager/power-restore-policy.override.yml
index 2a1fa6b..08907c8 100755
--- a/meta-mct/meta-s5549/recipes-phosphor/settings/phosphor-settings-manager/power-restore-policy.override.yml
+++ b/meta-mct/meta-s5549/recipes-phosphor/settings/phosphor-settings-manager/power-restore-policy.override.yml
@@ -3,8 +3,4 @@
     - Interface: xyz.openbmc_project.Control.Power.RestorePolicy
       Properties:
           PowerRestorePolicy:
-              Default: RestorePolicy::Policy::AlwaysOn
-          PowerRestoreDelay:
-              Default: 0
-          PowerRestoreAlwaysOnPolicy:
-              Default: RestorePolicy::AlwaysOnPolicy::Immediately
\ No newline at end of file
+              Default: RestorePolicy::Policy::AlwaysOn
\ No newline at end of file
diff --git a/meta-mct/meta-s5549/recipes-phosphor/settings/phosphor-settings-manager_git.bbappend b/meta-mct/meta-s5549/recipes-phosphor/settings/phosphor-settings-manager_git.bbappend
index 431bcdf..30a34c8 100755
--- a/meta-mct/meta-s5549/recipes-phosphor/settings/phosphor-settings-manager_git.bbappend
+++ b/meta-mct/meta-s5549/recipes-phosphor/settings/phosphor-settings-manager_git.bbappend
@@ -4,4 +4,6 @@ SRC_URI_append = " file://processor-state.override.yml \
                    file://power-restore-policy.override.yml \
                    file://service-status.override.yml \
                    file://power-cap.override.yml \
+                   file://ac-boot.override.yml \
+                   file://power-restore-delay.override.yml \
                    "
diff --git a/meta-mct/meta-s5549/recipes-phosphor/skeleton/obmc-libobmc-intf/0001-make-pgood-property-writable.patch b/meta-mct/meta-s5549/recipes-phosphor/skeleton/obmc-libobmc-intf/0001-make-pgood-property-writable.patch
deleted file mode 100755
index b38ad3a..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/skeleton/obmc-libobmc-intf/0001-make-pgood-property-writable.patch
+++ /dev/null
@@ -1,34 +0,0 @@
-From 1428f5bfd43beac4807b1498995da72c30189ced Mon Sep 17 00:00:00 2001
-From: Ray Lue <ray.lue@mic.com.tw>
-Date: Fri, 7 Feb 2020 14:20:16 +0800
-Subject: [PATCH 1/1] make pgood property writable
-
----
- libopenbmc_intf/openbmc_intf.c | 4 ++--
- 1 file changed, 2 insertions(+), 2 deletions(-)
-
-diff --git a/openbmc_intf.c b/openbmc_intf.c
-index 32efdd8..c5625d5 100644
---- a/openbmc_intf.c
-+++ b/openbmc_intf.c
-@@ -16273,7 +16273,7 @@ static const _ExtendedGDBusPropertyInfo _control_power_property_info_pgood =
-     -1,
-     (gchar *) "pgood",
-     (gchar *) "i",
--    G_DBUS_PROPERTY_INFO_FLAGS_READABLE,
-+    G_DBUS_PROPERTY_INFO_FLAGS_READABLE | G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE,
-     NULL
-   },
-   "pgood",
-@@ -16286,7 +16286,7 @@ static const _ExtendedGDBusPropertyInfo _control_power_property_info_state =
-     -1,
-     (gchar *) "state",
-     (gchar *) "i",
--    G_DBUS_PROPERTY_INFO_FLAGS_READABLE,
-+    G_DBUS_PROPERTY_INFO_FLAGS_READABLE | G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE,
-     NULL
-   },
-   "state",
--- 
-2.22.0
-
diff --git a/meta-mct/meta-s5549/recipes-phosphor/skeleton/obmc-libobmc-intf/gpio_defs.json b/meta-mct/meta-s5549/recipes-phosphor/skeleton/obmc-libobmc-intf/gpio_defs.json
deleted file mode 100755
index b509b5e..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/skeleton/obmc-libobmc-intf/gpio_defs.json
+++ /dev/null
@@ -1,42 +0,0 @@
-{
-    "gpio_configs": {
-        "power_config": {
-            "power_good_in": "PGOOD",
-            "power_up_outs": "",
-            "reset_outs": ""
-        }
-    },
-
-    "gpio_definitions": [
-        {
-            "name": "PGOOD",
-            "pin": "S1",
-            "direction": "in"
-        },
-        {
-            "name": "POWER_BUTTON",
-            "pin": "E2",
-            "direction": "both"
-        },
-        {
-            "name": "POWER_UP_PIN",
-            "pin": "E3",
-            "direction": "out"
-        },
-        {
-            "name": "RESET_BUTTON",
-            "pin": "E0",
-            "direction": "both"
-        },
-        {
-            "name": "RESET_OUT",
-            "pin": "E1",
-            "direction": "out"
-        },
-        {
-            "name": "ID_BUTTON",
-            "pin": "S0",
-            "direction": "both"
-        }
-    ]
-}
diff --git a/meta-mct/meta-s5549/recipes-phosphor/skeleton/obmc-libobmc-intf_git.bbappend b/meta-mct/meta-s5549/recipes-phosphor/skeleton/obmc-libobmc-intf_git.bbappend
deleted file mode 100755
index a8918ff..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/skeleton/obmc-libobmc-intf_git.bbappend
+++ /dev/null
@@ -1,5 +0,0 @@
-FILESEXTRAPATHS_prepend := "${THISDIR}/${PN}:"
-
-SRC_URI += "file://0001-make-pgood-property-writable.patch \
-            "
-
diff --git a/meta-mct/meta-s5549/recipes-phosphor/state/phosphor-state-manager/0001-Detect-host-status-by-pgood.patch b/meta-mct/meta-s5549/recipes-phosphor/state/phosphor-state-manager/0001-Detect-host-status-by-pgood.patch
deleted file mode 100755
index e63a8f4..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/state/phosphor-state-manager/0001-Detect-host-status-by-pgood.patch
+++ /dev/null
@@ -1,137 +0,0 @@
-From 2be12fa2d6f6907251fe2edb7a831a261c4c4e30 Mon Sep 17 00:00:00 2001
-From: Ray Lue <ray.lue@mic.com.tw>
-Date: Wed, 11 Mar 2020 18:56:40 +0800
-Subject: [PATCH 1/1] Detect host status by pgood
-
----
- host_check_main_mct.cpp | 104 ++++++++++++++++++++++++++++++++++++++++
- meson.build             |   2 +-
- 2 files changed, 105 insertions(+), 1 deletion(-)
- create mode 100644 host_check_main_mct.cpp
-
-diff --git a/host_check_main_mct.cpp b/host_check_main_mct.cpp
-new file mode 100644
-index 0000000..1638733
---- /dev/null
-+++ b/host_check_main_mct.cpp
-@@ -0,0 +1,104 @@
-+#include <cstdlib>
-+#include <unistd.h>
-+#include <iostream>
-+#include <fstream>
-+#include <cstdio>
-+#include <sdbusplus/bus.hpp>
-+#include <phosphor-logging/log.hpp>
-+#include <config.h>
-+
-+using namespace phosphor::logging;
-+
-+bool hostRunning = false;
-+
-+// Determine power status by getting pgood
-+void determineInitialState()
-+{
-+    using sdbusplus::exception::SdBusError;
-+
-+    sdbusplus::message::variant<int> pgood = -1;
-+	int save_pgood = -1;
-+    auto bus = sdbusplus::bus::new_default();
-+    auto method = bus.new_method_call(
-+        "org.openbmc.control.Power", "/org/openbmc/control/power0",
-+        "org.freedesktop.DBus.Properties", "Get");
-+
-+    method.append("org.openbmc.control.Power", "pgood");
-+    try
-+    {
-+        auto reply = bus.call(method);
-+        if (reply.is_method_error())
-+        {
-+            log<level::ERR>(
-+                "Error in response message - could not get initial pgood");
-+            goto fail;
-+        }
-+
-+        try
-+        {
-+            reply.read(pgood);
-+        }
-+        catch (const SdBusError& e)
-+        {
-+            log<level::ERR>("Error in bus response - bad encoding of pgood",
-+                            entry("ERROR=%s", e.what()),
-+                            entry("REPLY_SIG=%s", reply.get_signature()));
-+            goto fail;
-+        }
-+		save_pgood = std::get<int>(pgood);
-+        if (save_pgood == 1)
-+        {
-+            log<level::INFO>("Initial Host State will be On");
-+            hostRunning = true;
-+            return;
-+        }
-+    }
-+    catch (const SdBusError& e)
-+    {
-+        // It's acceptable for the pgood state service to not be available
-+        // since it will notify us of the pgood state when it comes up.
-+        if (e.name() != nullptr &&
-+            strcmp("org.freedesktop.DBus.Error.ServiceUnknown", e.name()) == 0)
-+        {
-+            goto fail;
-+        }
-+
-+        // Only log for unexpected error types.
-+        log<level::ERR>("Error performing call to get pgood",
-+                        entry("ERROR=%s", e.what()));
-+        goto fail;
-+    }
-+
-+fail:
-+    log<level::INFO>("Initial Host State will be Off");
-+    hostRunning = false;
-+
-+    return;
-+}
-+
-+int main(int argc, char* argv[])
-+{
-+    log<level::INFO>("Check if host is running");
-+
-+    determineInitialState();    
-+
-+    // If host running then create file
-+    if (hostRunning)
-+    {
-+        log<level::INFO>("Host is running!");
-+        // Create file for host instance and create in filesystem to indicate
-+        // to services that host is running
-+        auto size = std::snprintf(nullptr, 0, HOST_RUNNING_FILE, 0);
-+        size++; // null
-+        std::unique_ptr<char[]> buf(new char[size]);
-+        std::snprintf(buf.get(), size, HOST_RUNNING_FILE, 0);
-+        std::ofstream outfile(buf.get());
-+        outfile.close();
-+    }
-+    else
-+    {
-+        log<level::INFO>("Host is not running!");
-+    }
-+
-+    return 0;
-+}
-diff --git a/meson.build b/meson.build
-index f4eb4bb..2f83960 100644
---- a/meson.build
-+++ b/meson.build
-@@ -90,7 +90,7 @@ executable('phosphor-discover-system-state',
- )
- 
- executable('phosphor-host-check',
--            'host_check_main.cpp',
-+            'host_check_main_mct.cpp',
-             dependencies: [
-             sdbusplus, phosphorlogging
-             ],
--- 
-2.22.0
-
diff --git a/meta-mct/meta-s5549/recipes-phosphor/state/phosphor-state-manager/0002-Determine-the-host-initial-state-with-pgood.patch b/meta-mct/meta-s5549/recipes-phosphor/state/phosphor-state-manager/0002-Determine-the-host-initial-state-with-pgood.patch
deleted file mode 100755
index 1a1cd79..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/state/phosphor-state-manager/0002-Determine-the-host-initial-state-with-pgood.patch
+++ /dev/null
@@ -1,73 +0,0 @@
-From 859a3316e480ed96bbf6b31ee0bac851d4c985bb Mon Sep 17 00:00:00 2001
-From: "wendy.shi" <wendy.shi@mic.com.tw>
-Date: Fri, 27 Dec 2019 13:55:36 +0800
-Subject: [PATCH] Determine-the-host-initial-state-with-pgood
-
----
- host_state_manager.cpp | 42 ++++++++++++++++++++++++++++++++++++++++++
- 1 file changed, 42 insertions(+)
- mode change 100644 => 100755 host_state_manager.cpp
-
-diff --git a/host_state_manager.cpp b/host_state_manager.cpp
-old mode 100644
-new mode 100755
-index 025d8b0..32451df
---- a/host_state_manager.cpp
-+++ b/host_state_manager.cpp
-@@ -95,7 +95,48 @@ void Host::subscribeToSystemdSignals()
- 
- void Host::determineInitialState()
- {
-+    /*  Determine the host initial state with the pgood property.
-+        Running / Off
-+    */
-+    sdbusplus::message::variant<int> pgood = -1;
-+    auto method = this->bus.new_method_call(
-+        "org.openbmc.control.Power", "/org/openbmc/control/power0",
-+        "org.freedesktop.DBus.Properties", "Get");
-+
-+    method.append("org.openbmc.control.Power", "pgood");
-+    try
-+    {
-+        auto reply = this->bus.call(method);
-+        reply.read(pgood);
-+
-+        if (sdbusplus::message::variant_ns::get<int>(pgood) == 1)
-+        {
-+            log<level::INFO>("Initial Host State will be Running",
-+                        entry("CURRENT_HOST_STATE=%s",
-+                            convertForMessage(HostState::Running).c_str()));
-+            server::Host::currentHostState(HostState::Running);
-+            server::Host::requestedHostTransition(Transition::On);
-+        }
-+        else
-+        {
-+            log<level::INFO>("Initial Host State will be Off",
-+                        entry("CURRENT_HOST_STATE=%s",
-+                            convertForMessage(HostState::Off).c_str()));
-+            server::Host::currentHostState(HostState::Off);
-+            server::Host::requestedHostTransition(Transition::Off);
-+        }
-+    }
-+    catch (const SdBusError& e)
-+    {
-+        // Only log for unexpected error types.
-+        log<level::ERR>("Error performing call to get pgood",
-+                        entry("ERROR=%s", e.what()));
-+
-+        server::Host::currentHostState(HostState::Off);
-+        server::Host::requestedHostTransition(Transition::Off);
-+    }
- 
-+/*
-     if (stateActive(HOST_STATE_POWERON_MIN_TGT))
-     {
-         log<level::INFO>("Initial Host State will be Running",
-@@ -112,6 +153,7 @@ void Host::determineInitialState()
-         server::Host::currentHostState(HostState::Off);
-         server::Host::requestedHostTransition(Transition::Off);
-     }
-+*/
- 
-     if (!deserialize(HOST_STATE_PERSIST_PATH))
-     {
diff --git a/meta-mct/meta-s5549/recipes-phosphor/state/phosphor-state-manager/0003-Implement-the-AC-restore-random-and-fixed-delay.patch b/meta-mct/meta-s5549/recipes-phosphor/state/phosphor-state-manager/0003-Implement-the-AC-restore-random-and-fixed-delay.patch
deleted file mode 100755
index f0c8475..0000000
--- a/meta-mct/meta-s5549/recipes-phosphor/state/phosphor-state-manager/0003-Implement-the-AC-restore-random-and-fixed-delay.patch
+++ /dev/null
@@ -1,105 +0,0 @@
-From 6a656b0b53c0bab9b763a18836f399d453e13446 Mon Sep 17 00:00:00 2001
-From: John Chung <john.chung@mic.com.tw>
-Date: Mon, 23 Mar 2020 10:18:35 +0800
-Subject: [PATCH] Implement the AC restore random and fixed delay
-
----
- discover_system_state.cpp | 72 +++++++++++++++++++++++++++++++++++++++++++++++
- 1 file changed, 72 insertions(+)
- mode change 100644 => 100755 discover_system_state.cpp
-
-diff --git a/discover_system_state.cpp b/discover_system_state.cpp
-old mode 100644
-new mode 100755
-index 836011a..c634606
---- a/discover_system_state.cpp
-+++ b/discover_system_state.cpp
-@@ -2,6 +2,8 @@
- #include <iostream>
- #include <map>
- #include <string>
-+#include <chrono>
-+#include <random>
- #include "config.h"
- #include <systemd/sd-bus.h>
- #include <sdbusplus/exception.hpp>
-@@ -179,6 +181,76 @@ int main(int argc, char** argv)
-         RestorePolicy::convertPolicyFromString(powerPolicy))
-     {
-         log<level::INFO>("power_policy=ALWAYS_POWER_ON, powering host on");
-+
-+        auto method = bus.new_method_call(
-+            settings.service(settings.powerRestorePolicy, powerRestoreIntf).c_str(),
-+            settings.powerRestorePolicy.c_str(), "org.freedesktop.DBus.Properties",
-+            "Get");
-+        method.append(powerRestoreIntf, "PowerRestoreAlwaysOnPolicy");
-+
-+        sdbusplus::message::variant<std::string> result;
-+        try
-+        {
-+            auto reply = bus.call(method);
-+            reply.read(result);
-+        }
-+        catch (const SdBusError& e)
-+        {
-+            log<level::ERR>("Error in PowerRestoreAlwaysOnPolicy Get",
-+                            entry("ERROR=%s", e.what()));
-+            elog<InternalFailure>();
-+        }
-+
-+        auto powerAlwaysOnPolicy = sdbusplus::message::variant_ns::get<std::string>(result);
-+
-+        if (RestorePolicy::AlwaysOnPolicy::Random ==
-+            RestorePolicy::convertAlwaysOnPolicyFromString(powerAlwaysOnPolicy) ||
-+            RestorePolicy::AlwaysOnPolicy::Fixed ==
-+            RestorePolicy::convertAlwaysOnPolicyFromString(powerAlwaysOnPolicy))
-+        {
-+            auto method = bus.new_method_call(
-+                settings.service(settings.powerRestorePolicy, powerRestoreIntf).c_str(),
-+                settings.powerRestorePolicy.c_str(), "org.freedesktop.DBus.Properties",
-+                "Get");
-+            method.append(powerRestoreIntf, "PowerRestoreDelay");
-+
-+            sdbusplus::message::variant<uint32_t> result;
-+            try
-+            {
-+                auto reply = bus.call(method);
-+                reply.read(result);
-+            }
-+            catch (const SdBusError& e)
-+            {
-+                log<level::ERR>("Error in PowerRestoreDelay Get",
-+                                entry("ERROR=%s", e.what()));
-+                elog<InternalFailure>();
-+            }
-+
-+            auto powerRestoreDelay = sdbusplus::message::variant_ns::get<uint32_t>(result);
-+
-+            if (RestorePolicy::AlwaysOnPolicy::Random ==
-+                RestorePolicy::convertAlwaysOnPolicyFromString(powerAlwaysOnPolicy))
-+            {
-+                std::random_device rd;
-+                std::default_random_engine gen = std::default_random_engine(rd());
-+                std::uniform_int_distribution<int> dis(0,powerRestoreDelay);
-+                powerRestoreDelay = dis(gen);
-+            }
-+
-+            log<level::INFO>("Checking power always on policy and setting delay",
-+                entry("POWER_ALWAYS_ON_POLICY=%s", powerAlwaysOnPolicy.c_str()),
-+                entry("POWER_RESTORE_DELAY=%d", powerRestoreDelay));
-+
-+            std::this_thread::sleep_for (std::chrono::seconds(powerRestoreDelay));
-+        }
-+        else{
-+            log<level::INFO>("Checking power always on policy",
-+                entry("POWER_ALWAYS_ON_POLICY=%s", powerAlwaysOnPolicy.c_str()));
-+        }
-+
-+        log<level::INFO>("power_policy=ALWAYS_POWER_ON, Starting power on");
-+
-         setProperty(bus, hostPath, HOST_BUSNAME, "RequestedHostTransition",
-                     convertForMessage(server::Host::Transition::On));
-     }
--- 
-2.7.4
-
diff --git a/meta-mct/meta-s5549/recipes-phosphor/state/phosphor-state-manager_git.bbappend b/meta-mct/meta-s5549/recipes-phosphor/state/phosphor-state-manager_git.bbappend
index 5876312..09d77d9 100755
--- a/meta-mct/meta-s5549/recipes-phosphor/state/phosphor-state-manager_git.bbappend
+++ b/meta-mct/meta-s5549/recipes-phosphor/state/phosphor-state-manager_git.bbappend
@@ -1,8 +1,5 @@
 FILESEXTRAPATHS_prepend := "${THISDIR}/${PN}:"
 
-SRC_URI += "file://0001-Detect-host-status-by-pgood.patch \
-            file://0002-Determine-the-host-initial-state-with-pgood.patch \
-            file://0003-Implement-the-AC-restore-random-and-fixed-delay.patch \
-            file://0004-ignore-power-policy-when-BMC-reset.patch \
+SRC_URI += "file://0004-ignore-power-policy-when-BMC-reset.patch \
            "
 
diff --git a/meta-mct/meta-s5549/recipes-x86/chassis/x86-power-control/0001-Implement-some-power-feature.patch b/meta-mct/meta-s5549/recipes-x86/chassis/x86-power-control/0001-Implement-some-power-feature.patch
new file mode 100755
index 0000000..2a4b3d5
--- /dev/null
+++ b/meta-mct/meta-s5549/recipes-x86/chassis/x86-power-control/0001-Implement-some-power-feature.patch
@@ -0,0 +1,313 @@
+From 3faba21cb4847665aec9a087c82757bc4485b648 Mon Sep 17 00:00:00 2001
+From: John Chung <john.chung@mic.com.tw>
+Date: Wed, 23 Dec 2020 10:11:44 +0800
+Subject: [PATCH] Implement some power feature
+
+Implement power off action in host transition
+Implement random power on delay for AC power on policy
+Implement button SEL for button press action
+Implement power off handling for some power action
+
+%% original patch: 0001-Implement-some-power-feature.patch
+
+%% original patch: 0001-Implement-some-power-feature.patch
+---
+ power-control-x86/CMakeLists.txt        |   7 ++
+ power-control-x86/src/power_control.cpp | 141 +++++++++++++++++++++++++++-----
+ 2 files changed, 127 insertions(+), 21 deletions(-)
+ mode change 100644 => 100755 power-control-x86/CMakeLists.txt
+ mode change 100644 => 100755 power-control-x86/src/power_control.cpp
+
+diff --git a/power-control-x86/CMakeLists.txt b/power-control-x86/CMakeLists.txt
+old mode 100644
+new mode 100755
+index 2a94f78..65143f3
+--- a/power-control-x86/CMakeLists.txt
++++ b/power-control-x86/CMakeLists.txt
+@@ -19,6 +19,12 @@ add_definitions(-DBOOST_ASIO_DISABLE_THREADS)
+ 
+ set(SRC_FILES src/power_control.cpp)
+ 
++# phosphor-dbus-interfaces
++find_package(PkgConfig REQUIRED)
++pkg_check_modules(DBUSINTERFACE phosphor-dbus-interfaces REQUIRED)
++include_directories(${DBUSINTERFACE_INCLUDE_DIRS})
++link_directories(${DBUSINTERFACE_LIBRARY_DIRS})
++
+ add_executable(${PROJECT_NAME} ${SRC_FILES})
+ target_link_libraries(${PROJECT_NAME} -lstdc++fs)
+ target_link_libraries(${PROJECT_NAME} chassisi2c)
+@@ -26,6 +32,7 @@ target_link_libraries(${PROJECT_NAME} i2c)
+ target_link_libraries(${PROJECT_NAME} gpiodcxx)
+ target_link_libraries(${PROJECT_NAME} systemd)
+ target_link_libraries(${PROJECT_NAME} sdbusplus)
++target_link_libraries(${PROJECT_NAME} ${DBUSINTERFACE_LIBRARIES})
+ 
+ target_compile_definitions (
+     ${PROJECT_NAME} PRIVATE $<$<BOOL:${CHASSIS_SYSTEM_RESET}>:
+diff --git a/power-control-x86/src/power_control.cpp b/power-control-x86/src/power_control.cpp
+old mode 100644
+new mode 100755
+index ab704d8..5dec4c2
+--- a/power-control-x86/src/power_control.cpp
++++ b/power-control-x86/src/power_control.cpp
+@@ -32,6 +32,10 @@
+ #include <fstream>
+ #include <iostream>
+ #include <string_view>
++#include <chrono>
++#include <random>
++
++#include "xyz/openbmc_project/Control/Power/RestoreDelay/server.hpp"
+ 
+ namespace power_control
+ {
+@@ -592,6 +596,30 @@ static void setRestartCause()
+     setRestartCauseProperty(restartCause);
+ }
+ 
++static void logSELEvent(std::string enrty, std::string path ,
++                     uint8_t eventData0, uint8_t eventData1, uint8_t eventData2)
++{
++    std::vector<uint8_t> eventData(3, 0xFF);
++    eventData[0] = eventData0;
++    eventData[1] = eventData1;
++    eventData[2] = eventData2;
++    uint16_t genid = 0x20;
++    bool assert = 1;
++
++    sdbusplus::message::message writeSEL = conn->new_method_call(
++        "xyz.openbmc_project.Logging.IPMI", "/xyz/openbmc_project/Logging/IPMI",
++        "xyz.openbmc_project.Logging.IPMI", "IpmiSelAdd");
++    writeSEL.append(enrty, path, eventData, true, (uint16_t)genid);
++    try
++    {
++        conn->call(writeSEL);
++    }
++    catch (std::exception& e)
++    {
++        std::cerr << "Failed to log the button event:" << e.what() << "\n";
++    }
++}
++
+ static void systemPowerGoodFailedLog()
+ {
+     sd_journal_send(
+@@ -622,6 +650,7 @@ static void powerButtonPressLog()
+     sd_journal_send("MESSAGE=PowerControl: power button pressed", "PRIORITY=%i",
+                     LOG_INFO, "REDFISH_MESSAGE_ID=%s",
+                     "OpenBMC.0.1.PowerButtonPressed", NULL);
++    logSELEvent("Power Button SEL Entry","/xyz/openbmc_project/sensors/pwr_button/BUTTON",0x00,0xFF,0xFF);
+ }
+ 
+ static void resetButtonPressLog()
+@@ -629,6 +658,7 @@ static void resetButtonPressLog()
+     sd_journal_send("MESSAGE=PowerControl: reset button pressed", "PRIORITY=%i",
+                     LOG_INFO, "REDFISH_MESSAGE_ID=%s",
+                     "OpenBMC.0.1.ResetButtonPressed", NULL);
++    logSELEvent("Reset Button SEL Entry","/xyz/openbmc_project/sensors/pwr_button/BUTTON",0x02,0xFF,0xFF);
+ }
+ 
+ static void nmiButtonPressLog()
+@@ -718,8 +748,45 @@ static void invokePowerRestorePolicy(const std::string& policy)
+     savePowerState(powerState);
+ }
+ 
+-static void powerRestorePolicyDelay(int delay)
++void randomPowerDelay(uint32_t& delay)
++{
++    using namespace sdbusplus::xyz::openbmc_project::Control::Power::server;
++
++    auto bus = sdbusplus::bus::new_default();
++
++    auto method = bus.new_method_call(
++       "xyz.openbmc_project.Settings", "/xyz/openbmc_project/control/power_restore_delay",
++        "org.freedesktop.DBus.Properties", "Get");
++    method.append("xyz.openbmc_project.Control.Power.RestoreDelay", "PowerRestoreAlwaysOnPolicy");
++
++    sdbusplus::message::variant<std::string> result;
++    try
++    {
++        auto reply = bus.call(method);
++        reply.read(result);
++    }
++    catch (std::exception& e)
++    {
++        std::cerr << "Error in PowerRestoreAlwaysOnPolicy Get " << "ERROR=%s" << e.what() << "\n";
++        return;
++    }
++
++    auto powerAlwaysOnPolicy = sdbusplus::message::variant_ns::get<std::string>(result);
++
++    if (RestoreDelay::AlwaysOnPolicy::Random ==
++        RestoreDelay::convertAlwaysOnPolicyFromString(powerAlwaysOnPolicy))
++    {
++        std::random_device rd;
++        std::default_random_engine gen = std::default_random_engine(rd());
++        std::uniform_int_distribution<int> dis(0,delay);
++        delay = dis(gen);
++    }
++}
++
++static void powerRestorePolicyDelay(uint32_t delayInput)
+ {
++    uint32_t delay = delayInput;
++
+     // Async events may call this twice, but we only want to run once
+     static bool delayStarted = false;
+     if (delayStarted)
+@@ -727,18 +794,8 @@ static void powerRestorePolicyDelay(int delay)
+         return;
+     }
+     delayStarted = true;
+-    // Calculate the delay from now to meet the requested delay
+-    // Subtract the approximate uboot time
+-    static constexpr const int ubootSeconds = 20;
+-    delay -= ubootSeconds;
+-    // Subtract the time since boot
+-    struct sysinfo info = {};
+-    if (sysinfo(&info) == 0)
+-    {
+-        delay -= info.uptime;
+-    }
+-    // 0 is the minimum delay
+-    delay = std::max(delay, 0);
++
++    randomPowerDelay(delay);
+ 
+     static boost::asio::steady_timer powerRestorePolicyTimer(io);
+     powerRestorePolicyTimer.expires_after(std::chrono::seconds(delay));
+@@ -828,14 +885,14 @@ static void powerRestorePolicyStart()
+             "Power.RestoreDelay'",
+             [](sdbusplus::message::message& msg) {
+                 std::string interfaceName;
+-                boost::container::flat_map<std::string, std::variant<uint16_t>>
++                boost::container::flat_map<std::string, std::variant<uint32_t>>
+                     propertiesChanged;
+-                int delay = 0;
++                uint32_t delay = 0;
+                 try
+                 {
+                     msg.read(interfaceName, propertiesChanged);
+                     delay =
+-                        std::get<uint16_t>(propertiesChanged.begin()->second);
++                        std::get<uint32_t>(propertiesChanged.begin()->second);
+                 }
+                 catch (std::exception& e)
+                 {
+@@ -850,13 +907,13 @@ static void powerRestorePolicyStart()
+     // Check if it's already on DBus
+     conn->async_method_call(
+         [](boost::system::error_code ec,
+-           const std::variant<uint16_t>& delayProperty) {
++           const std::variant<uint32_t>& delayProperty) {
+             if (ec)
+             {
+                 return;
+             }
+             powerRestoreDelayMatch.reset();
+-            const uint16_t* delay = std::get_if<uint16_t>(&delayProperty);
++            const uint32_t* delay = std::get_if<uint32_t>(&delayProperty);
+             if (delay == nullptr)
+             {
+                 std::cerr << "Unable to read power restore delay value\n";
+@@ -1369,7 +1426,8 @@ static void currentHostStateMonitor()
+ 
+                 // Set the restart cause set for this restart
+                 setRestartCause();
+-                resetACBootProperty();
++                //Never set AC boot property except external command
++                // resetACBootProperty();
+                 sd_journal_send("MESSAGE=Host system DC power is off",
+                                 "PRIORITY=%i", LOG_INFO,
+                                 "REDFISH_MESSAGE_ID=%s",
+@@ -1581,6 +1639,27 @@ static void powerStateGracefulTransitionToOff(const Event event)
+         case Event::gracefulPowerOffTimerExpired:
+             setPowerState(PowerState::on);
+             break;
++        case Event::powerOffRequest:
++            setPowerState(PowerState::transitionToOff);
++            forcePowerOff();
++            break;
++        case Event::gracefulPowerOffRequest:
++            setPowerState(PowerState::gracefulTransitionToOff);
++            gracefulPowerOffTimerStart();
++            gracefulPowerOff();
++            break;
++        case Event::powerCycleRequest:
++            setPowerState(PowerState::transitionToCycleOff);
++            forcePowerOff();
++            break;
++        case Event::gracefulPowerCycleRequest:
++            setPowerState(PowerState::gracefulTransitionToCycleOff);
++            gracefulPowerOffTimerStart();
++            gracefulPowerOff();
++            break;
++        case Event::resetRequest:
++            reset();
++            break;
+         default:
+             phosphor::logging::log<phosphor::logging::level::INFO>(
+                 "No action taken.");
+@@ -1620,6 +1699,10 @@ static void powerStateCycleOff(const Event event)
+             setPowerState(PowerState::waitForPSPowerOK);
+             powerOn();
+             break;
++        case Event::powerOffRequest:
++            setPowerState(PowerState::transitionToOff);
++            forcePowerOff();
++            break;
+         default:
+             phosphor::logging::log<phosphor::logging::level::INFO>(
+                 "No action taken.");
+@@ -1638,6 +1721,10 @@ static void powerStateTransitionToCycleOff(const Event event)
+             setPowerState(PowerState::cycleOff);
+             powerCycleTimerStart();
+             break;
++        case Event::powerOffRequest:
++            setPowerState(PowerState::transitionToOff);
++            forcePowerOff();
++            break;
+         default:
+             phosphor::logging::log<phosphor::logging::level::INFO>(
+                 "No action taken.");
+@@ -1658,6 +1745,10 @@ static void powerStateGracefulTransitionToCycleOff(const Event event)
+         case Event::gracefulPowerOffTimerExpired:
+             setPowerState(PowerState::on);
+             break;
++        case Event::powerOffRequest:
++            setPowerState(PowerState::transitionToOff);
++            forcePowerOff();
++            break;
+         default:
+             phosphor::logging::log<phosphor::logging::level::INFO>(
+                 "No action taken.");
+@@ -1683,6 +1774,10 @@ static void powerStateCheckForWarmReset(const Event event)
+             // DC power is unexpectedly lost, beep
+             beep(beepPowerFail);
+             break;
++        case Event::powerOffRequest:
++            setPowerState(PowerState::transitionToOff);
++            forcePowerOff();
++            break;
+         default:
+             phosphor::logging::log<phosphor::logging::level::INFO>(
+                 "No action taken.");
+@@ -2353,8 +2448,12 @@ int main(int argc, char* argv[])
+         [](const std::string& requested, std::string& resp) {
+             if (requested == "xyz.openbmc_project.State.Host.Transition.Off")
+             {
+-                sendPowerControlEvent(
+-                    power_control::Event::gracefulPowerOffRequest);
++                sendPowerControlEvent(power_control::Event::powerOffRequest);
++                addRestartCause(power_control::RestartCause::command);
++            }
++            else if (requested == "xyz.openbmc_project.State.Host.Transition.gracefulOff")
++            {
++                sendPowerControlEvent(power_control::Event::gracefulPowerOffRequest);
+                 addRestartCause(power_control::RestartCause::command);
+             }
+             else if (requested ==
+-- 
+2.7.4
+
diff --git a/meta-mct/meta-s5549/recipes-x86/chassis/x86-power-control/power-config-host0.json b/meta-mct/meta-s5549/recipes-x86/chassis/x86-power-control/power-config-host0.json
new file mode 100755
index 0000000..dc67f69
--- /dev/null
+++ b/meta-mct/meta-s5549/recipes-x86/chassis/x86-power-control/power-config-host0.json
@@ -0,0 +1,11 @@
+{
+  "IdButton": "ID_BUTTON",
+  "NMIButton": "NMI_BUTTON",
+  "PostComplete": "POST_COMPLETE",
+  "PwrButton": "POWER_BUTTON",
+  "PwrOK": "PS_PWROK",
+  "PwrOut": "PWRBTN_OUT",
+  "RstButton": "RESET_BUTTON",
+  "RstOut": "RSTBTN_OUT"
+}
+
diff --git a/meta-mct/meta-s5549/recipes-x86/chassis/x86-power-control_%.bbappend b/meta-mct/meta-s5549/recipes-x86/chassis/x86-power-control_%.bbappend
new file mode 100755
index 0000000..b5ddf33
--- /dev/null
+++ b/meta-mct/meta-s5549/recipes-x86/chassis/x86-power-control_%.bbappend
@@ -0,0 +1,15 @@
+FILESEXTRAPATHS_prepend := "${THISDIR}/${PN}:"
+
+SRC_URI = "git://github.com/openbmc/x86-power-control.git"
+SRCREV = "6c09007572f6d7ff9aae0acf3f6ebde693b04a75"
+
+DEPENDS += "nlohmann-json"
+DEPENDS += "phosphor-dbus-interfaces"
+
+SRC_URI += "file://power-config-host0.json;subdir=git/power-control-x86/config \
+            file://0001-Implement-some-power-feature.patch \
+            "
+
+SYSTEMD_SERVICE_${PN} += "chassis-system-reset.service \
+                          chassis-system-reset.target \
+                         "
-- 
2.7.4

