From 8239d22d4bf99e10e150ddb9bfd5b9128394dc48 Mon Sep 17 00:00:00 2001
From: Ray Lue <ray.lue@mic.com.tw>
Date: Wed, 30 Sep 2020 11:08:26 +0800
Subject: [PATCH 1/1] block power control until pervious action is completed

---
 chassishandler.cpp | 100 +++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 97 insertions(+), 3 deletions(-)

diff --git a/chassishandler.cpp b/chassishandler.cpp
index 269a690..21b04ba 100755
--- a/chassishandler.cpp
+++ b/chassishandler.cpp
@@ -7,6 +7,8 @@
 #include <limits.h>
 #include <mapper.h>
 #include <netinet/in.h>
+#include <thread>
+#include <future>
 
 #include <array>
 #include <chrono>
@@ -735,6 +737,69 @@ ipmi::RspType<> ipmiSetChassisCap(bool intrusion, bool fpLockout,
     return ipmi::responseSuccess();
 }
 
+//check target status
+constexpr auto SYSTEMD_SERVICE = "org.freedesktop.systemd1";
+constexpr auto SYSTEMD_OBJ_PATH = "/org/freedesktop/systemd1";
+constexpr auto SYSTEMD_INTERFACE = "org.freedesktop.systemd1.Manager";
+constexpr auto SYSTEMD_PROPERTY_IFACE = "org.freedesktop.DBus.Properties";
+constexpr auto SYSTEMD_INTERFACE_UNIT = "org.freedesktop.systemd1.Unit";
+constexpr auto ACTIVATING_STATE = "activating";
+
+//constexpr auto HOST_STATE_POWEROFF_TGT = "obmc-host-stop@0.target";
+//constexpr auto HOST_STATE_POWERON_TGT = "obmc-host-start@0.target";
+                                                
+constexpr auto HOST_STATE_POWEROFF_SERVICE = "host-poweroff.service";
+constexpr auto HOST_STATE_POWERON_SERVICE = "host-poweron.service";
+
+
+bool stateActiving(const std::string& target)
+{
+    sdbusplus::message::variant<std::string> currentState;
+    sdbusplus::message::object_path unitTargetPath;
+    std::shared_ptr<sdbusplus::asio::connection> bus = getSdBus();
+
+    auto method = bus->new_method_call(SYSTEMD_SERVICE, SYSTEMD_OBJ_PATH,
+                                            SYSTEMD_INTERFACE, "GetUnit");
+
+    method.append(target);
+
+    try
+    {
+        auto result = bus->call(method);
+        result.read(unitTargetPath);
+    }
+     catch (sdbusplus::exception::SdBusError& e)
+    {
+         log<level::ERR>("Error in GetUnit call", entry("ERROR=%s", e.what()));
+        return false;
+    }
+
+    method = bus->new_method_call(
+        SYSTEMD_SERVICE,
+        static_cast<const std::string&>(unitTargetPath).c_str(),
+        SYSTEMD_PROPERTY_IFACE, "Get");
+
+    method.append(SYSTEMD_INTERFACE_UNIT, "ActiveState");
+
+    try
+    {
+        auto result = bus->call(method);
+        result.read(currentState);
+    }
+    catch (sdbusplus::exception::SdBusError& e)
+    {
+        log<level::ERR>("Error in ActiveState Get",
+                        entry("ERROR=%s", e.what()));
+        return false;
+    }
+    
+    const auto& currentStateStr =
+        sdbusplus::message::variant_ns::get<std::string>(currentState);
+
+    return currentStateStr == ACTIVATING_STATE;
+}
+
+
 //------------------------------------------
 // Calls into Host State Manager Dbus object
 //------------------------------------------
@@ -1216,6 +1281,31 @@ void indicate_no_softoff_needed()
     std::ofstream(path.c_str());
 }
 
+int powerOnCb(void)
+{
+    while (stateActiving(HOST_STATE_POWEROFF_SERVICE))
+    {
+        std::cerr << "Waiting power off completed\n";
+        std::this_thread::sleep_for (std::chrono::seconds(1));
+    }
+    std::ofstream f("/run/openbmc/ipmi-poweron");
+    if(f.is_open()) f.close();
+    return initiate_state_transition(State::Host::Transition::On);
+}
+
+int powerOffCb(void)
+{
+    while (stateActiving(HOST_STATE_POWERON_SERVICE))
+    {
+        std::cerr << "Waiting power on completed\n";
+        std::this_thread::sleep_for (std::chrono::seconds(1));
+    }
+    std::ofstream f("/run/openbmc/ipmi-poweroff");
+    if(f.is_open()) f.close();
+    return initiate_state_transition(State::Host::Transition::Off);
+}
+
+
 /** @brief Implementation of chassis control command
  *
  *  @param - chassisControl command byte
@@ -1232,12 +1322,15 @@ ipmi::RspType<> ipmiChassisControl(uint8_t chassisControl)
     static constexpr char const* fruStateSensorPath= "/xyz/openbmc_project/sensors/fru_state/IPMI_Power_Diag";
     std::vector<uint8_t> powerControlEventData{0x02,0x01,0xff};
     int rc = 0;
-
+    std::future<int>cb, cb1;
+        
     switch (chassisControl)
     {
         case CMD_POWER_ON:
             generateSELEvent(fruStatePowerOn,powerControlEventData);
-            rc = initiate_state_transition(State::Host::Transition::On);
+            //initiate_state_transition(State::Host::Transition::On);
+            cb = std::async(std::launch::async,powerOnCb);
+            rc = 0;
             break;
         case CMD_POWER_OFF:
             // This path would be hit in 2 conditions.
@@ -1266,7 +1359,8 @@ ipmi::RspType<> ipmiChassisControl(uint8_t chassisControl)
 
                 // Now request the shutdown
                 generateSELEvent(fruStatePowerOff,powerControlEventData);
-                rc = initiate_state_transition(State::Host::Transition::Off);
+                cb1 = std::async(std::launch::async,powerOffCb);
+                rc = 0;
             }
             else
             {
-- 
2.26.2

