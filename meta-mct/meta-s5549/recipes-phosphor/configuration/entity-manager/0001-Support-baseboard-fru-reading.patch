From 6c7ded398891abb080a2b495e0fab249ad1b6d3d Mon Sep 17 00:00:00 2001
From: Ray Lue <ray.lue@mic.com.tw>
Date: Tue, 10 Dec 2019 20:37:38 +0800
Subject: [PATCH] Support baseboard fru reading

---
 src/FruDevice.cpp | 30 ++++++++++++++++++++++++++++--
 1 file changed, 28 insertions(+), 2 deletions(-)
 mode change 100644 => 100755 src/FruDevice.cpp

diff --git a/src/FruDevice.cpp b/src/FruDevice.cpp
old mode 100644
new mode 100755
index 3ae71b1..08c6970
--- a/src/FruDevice.cpp
+++ b/src/FruDevice.cpp
@@ -55,6 +55,8 @@ static size_t UNKNOWN_BUS_OBJECT_COUNT = 0;
 constexpr size_t MAX_FRU_SIZE = 512;
 constexpr size_t MAX_EEPROM_PAGE_INDEX = 255;
 constexpr size_t busTimeoutSeconds = 5;
+#define FRU_OFFSET  0x0000
+
 
 constexpr const char* blacklistPath = PACKAGE_DIR "blacklist.json";
 
@@ -189,6 +191,8 @@ std::vector<char> readFruContents(int flag, int file, uint16_t address,
             }
         }
     }
+    //MiTAC limit FRU to 512B : workaroud to prevent unreasonable fru size caculation       due to ipmitool fru edit issue.
+    if(fruLength > 512) fruLength = 512;
 
     // You already copied these first 8 bytes (the ipmi fru header size)
     fruLength -= 8;
@@ -244,7 +248,7 @@ static int64_t readFromEeprom(int flag __attribute__((unused)), int fd,
                               uint16_t address __attribute__((unused)),
                               uint16_t offset, uint8_t len, uint8_t* buf)
 {
-    auto result = lseek(fd, offset, SEEK_SET);
+    auto result = lseek(fd, offset + FRU_OFFSET, SEEK_SET);
     if (result < 0)
     {
         std::cerr << "failed to seek\n";
@@ -390,6 +394,7 @@ bool validateHeader(const std::array<uint8_t, I2C_SMBUS_BLOCK_MAX>& blockData)
         return false;
     }
 
+#if 0 //MiTAC : ipmitool issue: fru edit don't check the non-existing area and fill incorrect area offset.
     // verify offsets are 0, or don't point to another offset
     std::set<uint8_t> foundOffsets;
     for (int ii = 1; ii < 6; ii++)
@@ -404,6 +409,7 @@ bool validateHeader(const std::array<uint8_t, I2C_SMBUS_BLOCK_MAX>& blockData)
             return false;
         }
     }
+#endif 
 
     // validate checksum
     size_t sum = 0;
@@ -794,6 +800,9 @@ bool formatFru(const std::vector<char>& fruBytes,
 
     const std::vector<const char*>* fieldData;
 
+    //MiTAC: area overlapping check.â–µ
+    std::vector<char>::const_iterator perviousAreaEnd = fruBytes.begin();
+
     for (const std::string& area : FRU_AREAS)
     {
         ++fruAreaOffsetField;
@@ -809,6 +818,13 @@ bool formatFru(const std::vector<char>& fruBytes,
             std::vector<char>::const_iterator fruBytesIter =
                 fruBytes.begin() + offset + 2;
 
+            //check area length and overlapping 
+            if(*(fruBytesIter-1) == 0 || *(fruBytesIter-1) == 0xff || fruBytesIter <= perviousAreaEnd )
+            {
+                //skip incorrect area
+                continue;
+            }
+            
             if (fruBytesIter >= fruBytes.end())
             {
                 return false;
@@ -875,6 +891,7 @@ bool formatFru(const std::vector<char>& fruBytes,
                  * field to be read */
                 if (static_cast<uint8_t>(*fruBytesIter) == 0xC1)
                 {
+                    perviousAreaEnd = fruBytesIter;
                     break;
                 }
 
@@ -901,7 +918,7 @@ bool formatFru(const std::vector<char>& fruBytes,
                     std::cerr << "Warning Fru Length Mismatch:\n    ";
                     for (auto& c : fruBytes)
                     {
-                        std::cerr << c;
+                        std::cerr <<" "<< std::hex << std::setw(2) << std::setfill('0')<<(static_cast<unsigned int>(c));
                     }
                     std::cerr << "\n";
                     if (DEBUG)
@@ -1120,6 +1137,15 @@ bool writeFru(uint8_t bus, uint8_t address, const std::vector<uint8_t>& fru)
                 return false;
             }
 
+            //mitac support fru offset for write operation
+            auto result = lseek(eeprom, FRU_OFFSET, SEEK_SET);
+            if (result < 0)
+            {
+                std::cerr << "failed to seek\n";
+                return false;
+            }
+            //mitac end
+
             ssize_t writtenBytes = write(eeprom, fru.data(), fru.size());
             if (writtenBytes < 0)
             {
