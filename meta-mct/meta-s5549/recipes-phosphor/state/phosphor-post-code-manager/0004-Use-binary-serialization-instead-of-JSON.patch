From 1020fc4470d0c885f7dec5efa700a24c14f0a47d Mon Sep 17 00:00:00 2001
From: John Chung <john.chung@mic.com.tw>
Date: Wed, 23 Aug 2023 07:49:08 +0000
Subject: [PATCH 1/2] Use binary serialization instead of JSON

The binary format is much more efficient than JSON in terms of
computational speed and disk space consumption. The former is important
in case the host is sending a constant stream of POST codes.
post-code-manager can fall behind because it takes too long to store
each new POST code on disk, causing D-Bus messages to pile up and
increase memory consumption inside dbus-broker.

Tested:
Rebooted the host a few times and observed that POST code history is
populated normally in Redfish. After upgrading to this change, old POST
code history stored in JSON format is lost, but remains on disk until it
gets overwritten during subsequent host boots.

Signed-off-by: Jonathan Doman <jonathan.doman@intel.com>
Change-Id: Id55909a55d950e6e62b78b3333df687b4c582c42
---
 inc/post_code.hpp |  4 ----
 src/post_code.cpp | 16 ++++++++++++----
 2 files changed, 12 insertions(+), 8 deletions(-)

diff --git a/inc/post_code.hpp b/inc/post_code.hpp
index 36614b8..56c46f4 100755
--- a/inc/post_code.hpp
+++ b/inc/post_code.hpp
@@ -17,10 +17,6 @@
 #include <fcntl.h>
 #include <unistd.h>
 
-#include <cereal/access.hpp>
-#include <cereal/archives/json.hpp>
-#include <cereal/cereal.hpp>
-#include <cereal/types/vector.hpp>
 #include <experimental/filesystem>
 #include <fstream>
 #include <iostream>
diff --git a/src/post_code.cpp b/src/post_code.cpp
index 8a94911..ee09cb4 100644
--- a/src/post_code.cpp
+++ b/src/post_code.cpp
@@ -14,6 +14,14 @@
 // limitations under the License.
 */
 #include "post_code.hpp"
+
+#include <cereal/access.hpp>
+#include <cereal/archives/binary.hpp>
+#include <cereal/cereal.hpp>
+#include <cereal/types/map.hpp>
+#include <cereal/types/tuple.hpp>
+#include <cereal/types/vector.hpp>
+
 std::vector<uint64_t> PostCode::getPostCodes(uint16_t index)
 {
     std::vector<uint64_t> codes;
@@ -38,13 +46,13 @@ fs::path PostCode::serialize(const std::string& path)
         uint16_t index = currentBootCycleIndex();
         fs::path fullPath(path + strCurrentBootCycleIndexName);
         std::ofstream os(fullPath.c_str(), std::ios::binary);
-        cereal::JSONOutputArchive oarchive(os);
+        cereal::BinaryOutputArchive oarchive(os);
         oarchive(index);
 
         std::ofstream osPostCodes(
             (path + std::to_string(currentBootCycleIndex())).c_str(),
             std::ios::binary);
-        cereal::JSONOutputArchive oarchivePostCodes(osPostCodes);
+        cereal::BinaryOutputArchive oarchivePostCodes(osPostCodes);
         oarchivePostCodes(postCodes);
     }
     catch (cereal::Exception& e)
@@ -67,7 +75,7 @@ bool PostCode::deserialize(const fs::path& path, uint16_t& index)
         if (fs::exists(path))
         {
             std::ifstream is(path.c_str(), std::ios::in | std::ios::binary);
-            cereal::JSONInputArchive iarchive(is);
+            cereal::BinaryInputArchive  iarchive(is);
             iarchive(index);
             return true;
         }
@@ -94,7 +102,7 @@ bool PostCode::deserializePostCodes(const fs::path& path,
         if (fs::exists(path))
         {
             std::ifstream is(path.c_str(), std::ios::in | std::ios::binary);
-            cereal::JSONInputArchive iarchive(is);
+            cereal::BinaryInputArchive  iarchive(is);
             iarchive(codes);
             return true;
         }
-- 
2.25.1

