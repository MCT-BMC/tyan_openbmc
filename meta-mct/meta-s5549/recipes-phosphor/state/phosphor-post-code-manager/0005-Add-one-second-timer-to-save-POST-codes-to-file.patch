From 8b4f71b788aa19467bfd1adcf5b569989c0a5761 Mon Sep 17 00:00:00 2001
From: John Chung <john.chung@mic.com.tw>
Date: Wed, 23 Aug 2023 12:18:35 +0000
Subject: [PATCH 2/2] Add one second timer to save POST codes to file A lot of
 POST codes are sent to BMC from BIC in a short time.

In BMC, there is an ipmi handler to get POST codes
and upload to dbus property.

The xyz.openbmc_project.State.Boot@.PostCode service
listens the PropertiesChanged signal and saves to POST
codes history file.

The xyz.openbmc_project.State.Boot@.PostCode service
is hanged if there are too many POST codes in a short time.

At this time, the memory usage of dbus-broker increases,
and the out-of-memory(OOM) issue happens.

The processes are killed when OOM happens,
and BMC may reset unexpected.

Test Case:
Check the frequency for post code file getting larger

Signed-off-by: Bonnie Lo <Bonnie_Lo@wiwynn.com>
Change-Id: Ic5a397cfa7f053e196cc3d0eeae3e2b2fa5089b7
---
 inc/post_code.hpp |  5 ++++-
 src/post_code.cpp | 13 ++++++++++++-
 2 files changed, 16 insertions(+), 2 deletions(-)

diff --git a/inc/post_code.hpp b/inc/post_code.hpp
index 56c46f4..9270569 100755
--- a/inc/post_code.hpp
+++ b/inc/post_code.hpp
@@ -21,6 +21,7 @@
 #include <fstream>
 #include <iostream>
 #include <phosphor-logging/elog-errors.hpp>
+#include <sdbusplus/timer.hpp>
 #include <xyz/openbmc_project/Common/error.hpp>
 #include <xyz/openbmc_project/State/Boot/PostCode/server.hpp>
 #include <xyz/openbmc_project/State/Host/server.hpp>
@@ -53,7 +54,7 @@ using post_code =
 struct PostCode : sdbusplus::server::object_t<post_code>
 {
     PostCode(sdbusplus::bus::bus &bus, const char *path, EventPtr &event) :
-        sdbusplus::server::object_t<post_code>(bus, path), bus(bus),
+        sdbusplus::server::object_t<post_code>(bus, path), bus(bus), event(event),
         propertiesChangedSignalRaw(
             bus,
             sdbusplus::bus::match::rules::type::signal() +
@@ -174,7 +175,9 @@ struct PostCode : sdbusplus::server::object_t<post_code>
     std::vector<uint64_t> getPostCodes(uint16_t index) override;
 
   private:
+    std::unique_ptr<phosphor::Timer> timer;
     sdbusplus::bus::bus &bus;
+    EventPtr& event;
     std::vector<uint64_t> postCodes;
     std::string strPostCodeListPath;
     std::string strCurrentBootCycleIndexName;
diff --git a/src/post_code.cpp b/src/post_code.cpp
index ee09cb4..b6e35d5 100644
--- a/src/post_code.cpp
+++ b/src/post_code.cpp
@@ -22,6 +22,8 @@
 #include <cereal/types/tuple.hpp>
 #include <cereal/types/vector.hpp>
 
+const static constexpr auto timeoutMicroSeconds = 1000000;
+
 std::vector<uint64_t> PostCode::getPostCodes(uint16_t index)
 {
     std::vector<uint64_t> codes;
@@ -34,8 +36,17 @@ std::vector<uint64_t> PostCode::getPostCodes(uint16_t index)
 }
 void PostCode::savePostCodes(uint64_t code)
 {
+    if (!timer)
+    {
+        timer = std::make_unique<phosphor::Timer>(
+            event.get(), [this]() { serialize(fs::path(PostCodeListPath)); });
+    }
+
     postCodes.push_back(code);
-    serialize(fs::path(PostCodeListPath));
+    if (!timer->isRunning())
+    {
+        timer->start(std::chrono::microseconds(timeoutMicroSeconds));
+    }
     return;
 }
 
-- 
2.25.1

