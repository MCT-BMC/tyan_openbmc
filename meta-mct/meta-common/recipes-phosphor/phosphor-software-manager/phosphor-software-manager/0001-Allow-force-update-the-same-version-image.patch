From 74da9f3e41ce5c40b0323ac41afa972577b63637 Mon Sep 17 00:00:00 2001
From: "Henbin.Chang" <henbin-chang@mic.com.tw>
Date: Wed, 6 Nov 2019 09:03:00 +0800
Subject: [PATCH] Allow force update the same version image

In the original design of image update, it does not allow the same version of image to be flashed onto itself.
But this blocks validation tests and in most of the cases we don't
prevent user from doing such update.

This patch appends a random number after the version ID hash string to
unblock such limitation.

%% original patch: 0001-Allow-force-update-the-same-version-image.patch
---
 image_manager.cpp | 10 +++++++++-
 item_updater.cpp  |  4 ++--
 version.cpp       |  2 +-
 version.hpp       |  6 ++++--
 4 files changed, 16 insertions(+), 6 deletions(-)
 mode change 100644 => 100755 item_updater.cpp
 mode change 100644 => 100755 version.cpp
 mode change 100644 => 100755 version.hpp

diff --git a/image_manager.cpp b/image_manager.cpp
index e132465..84c51b3 100644
--- a/image_manager.cpp
+++ b/image_manager.cpp
@@ -9,6 +9,7 @@
 #include <stdlib.h>
 #include <sys/stat.h>
 #include <sys/wait.h>
+#include <time.h>	//Henbin add
 #include <unistd.h>
 
 #include <algorithm>
@@ -174,6 +175,13 @@ int Manager::processImage(const std::string& tarFilePath)
     // Compute id
     auto id = Version::getId(version);
 
+    //Henbin add start
+    // Append a random number after the original version hash
+    // This will allow forcing image update onto the same version
+    srand(time(NULL));
+    id = id + "_" + std::to_string(rand());
+    //Henbin add end
+
     fs::path imageDirPath = std::string{IMG_UPLOAD_DIR};
     imageDirPath /= id;
 
@@ -200,7 +208,7 @@ int Manager::processImage(const std::string& tarFilePath)
     {
         // Create Version object
         auto versionPtr = std::make_unique<Version>(
-            bus, objPath, version, purpose, imageDirPath.string(),
+            bus, objPath, version, id, purpose, imageDirPath.string(),
             std::bind(&Manager::erase, this, std::placeholders::_1));
         versionPtr->deleteObject =
             std::make_unique<phosphor::software::manager::Delete>(bus, objPath,
diff --git a/item_updater.cpp b/item_updater.cpp
old mode 100644
new mode 100755
index 4f2b833..85836bd
--- a/item_updater.cpp
+++ b/item_updater.cpp
@@ -133,7 +133,7 @@ void ItemUpdater::createActivation(sdbusplus::message::message& msg)
                                          activationState, associations)));
 
         auto versionPtr = std::make_unique<VersionClass>(
-            bus, path, version, purpose, filePath,
+            bus, path, version, versionId , purpose, filePath,
             std::bind(&ItemUpdater::erase, this, std::placeholders::_1));
         versionPtr->deleteObject =
             std::make_unique<phosphor::software::manager::Delete>(bus, path,
@@ -223,7 +223,7 @@ void ItemUpdater::processBMCImage()
 
             // Create Version instance for this version.
             auto versionPtr = std::make_unique<VersionClass>(
-                bus, path, version, purpose, "",
+                bus, path, version, id, purpose, "",
                 std::bind(&ItemUpdater::erase, this, std::placeholders::_1));
             auto isVersionFunctional = versionPtr->isFunctional();
             if (!isVersionFunctional)
diff --git a/version.cpp b/version.cpp
old mode 100644
new mode 100755
index 91f478b..2d148eb
--- a/version.cpp
+++ b/version.cpp
@@ -164,7 +164,7 @@ void Delete::delete_()
 {
     if (parent.eraseCallback)
     {
-        parent.eraseCallback(parent.getId(parent.version()));
+        parent.eraseCallback(parent.versionId());
     }
 }
 
diff --git a/version.hpp b/version.hpp
old mode 100644
new mode 100755
index f04cce2..31361a0
--- a/version.hpp
+++ b/version.hpp
@@ -72,8 +72,9 @@ class Version : public VersionInherit
      * @param[in] callback       - The eraseFunc callback
      */
     Version(sdbusplus::bus::bus& bus, const std::string& objPath,
-            const std::string& versionString, VersionPurpose versionPurpose,
-            const std::string& filePath, eraseFunc callback) :
+            const std::string& versionString, const std::string& idString,
+            VersionPurpose versionPurpose, const std::string& filePath,
+            eraseFunc callback) :
         VersionInherit(bus, (objPath).c_str(), true),
         versionStr(versionString)
     {
@@ -82,6 +83,7 @@ class Version : public VersionInherit
         // Set properties.
         purpose(versionPurpose);
         version(versionString);
+        versionId(idString);
         path(filePath);
         // Emit deferred signal.
         emit_object_added();
-- 
2.7.4

