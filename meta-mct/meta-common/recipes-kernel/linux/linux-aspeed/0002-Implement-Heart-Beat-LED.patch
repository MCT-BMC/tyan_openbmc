From 9e0e992002d50e3e126ec6a249359c224f4492c8 Mon Sep 17 00:00:00 2001
From: Mirage Su <mirage.su@mic.com.tw>
Date: Fri, 14 Dec 2018 10:26:59 +0800
Subject: [PATCH] Implement Heart Beat LED

---
 drivers/misc/Kconfig           |   6 ++
 drivers/misc/Makefile          |   1 +
 drivers/misc/aspeed-g5-hbled.c | 229 +++++++++++++++++++++++++++++++++++++++++
 3 files changed, 236 insertions(+)
 mode change 100644 => 100755 drivers/misc/Kconfig
 mode change 100644 => 100755 drivers/misc/Makefile
 create mode 100755 drivers/misc/aspeed-g5-hbled.c

diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
old mode 100644
new mode 100755
index 06a2b75..f4ba447
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -481,6 +481,12 @@ config NPCM7XX_PCI_MBOX
 	  Expose the NPCM750/730/715/705 PCI MBOX registers found on
 	  Nuvoton SOCs to userspace.
 
+config ASPEED_G5_HBLED
+	tristate "Aspeed ast2500 Heart Beat (HBLED#) support"
+	depends on (ARCH_ASPEED || COMPILE_TEST) && REGMAP && MFD_SYSCON
+	help
+		Provides a driver to control the signal of HBLED#
+
 source "drivers/misc/c2port/Kconfig"
 source "drivers/misc/eeprom/Kconfig"
 source "drivers/misc/cb710/Kconfig"
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
old mode 100644
new mode 100755
index b9e6d4c..ce89b55
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -59,3 +59,4 @@ obj-$(CONFIG_HABANA_AI)		+= habanalabs/
 obj-$(CONFIG_XILINX_SDFEC)	+= xilinx_sdfec.o
 obj-$(CONFIG_NPCM7XX_LPC_BPC)	+= npcm7xx-lpc-bpc.o
 obj-$(CONFIG_NPCM7XX_PCI_MBOX)	+= npcm7xx-pci-mbox.o
+obj-$(CONFIG_ASPEED_G5_HBLED)   += aspeed-g5-hbled.o
diff --git a/drivers/misc/aspeed-g5-hbled.c b/drivers/misc/aspeed-g5-hbled.c
new file mode 100755
index 0000000..7571d40
--- /dev/null
+++ b/drivers/misc/aspeed-g5-hbled.c
@@ -0,0 +1,229 @@
+/*
+ * Copyright 2018 MiTAC Corporation
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or (at your option) any later version.
+ */
+
+#include <linux/miscdevice.h>
+#include <linux/mm.h>
+#include <linux/module.h>
+#include <linux/of_address.h>
+#include <linux/platform_device.h>
+#include <linux/poll.h>
+#include <linux/regmap.h>
+
+
+#define DEVICE_NAME	"aspeed-hbled"
+
+#define HW_HEART_BEAT_STS_REG 0x60
+#define HEART_BEAT_LED_OUTPUY 0x64
+#define	VICE4 0xE4
+
+#define BIT_SW_BLINKING_MODE (1<<4)
+#define BIT_SW_LED_OUTPUT (1<<0)
+
+struct aspeed_hbled_data {
+    struct regmap *regmap;
+};
+static struct aspeed_hbled_data *phbled_data;
+
+static char hbled_mode[10]="hwmod";
+
+static int regmap_aspeed_hbled_reg_write(void *context, unsigned int reg,
+                         unsigned int val)
+{
+    void __iomem *regs = (void __iomem *)context;
+
+    writel(val, regs + reg);
+    return 0;
+}
+
+static int regmap_aspeed_hbled_reg_read(void *context, unsigned int reg,
+                        unsigned int *val)
+{
+    void __iomem *regs = (void __iomem *)context;
+
+    *val = readl(regs + reg);
+    return 0;
+}
+
+static const struct regmap_config aspeed_hbled_regmap_config = {
+    .reg_bits = 32,
+    .val_bits = 32,
+    .reg_stride = 4,
+    .max_register = VICE4,
+    .reg_write = regmap_aspeed_hbled_reg_write,
+    .reg_read = regmap_aspeed_hbled_reg_read,
+    .fast_io = true,
+};
+
+
+static ssize_t hbled_store(struct class *class,
+                struct class_attribute *attr,
+                const char *buf, size_t len)
+{  
+		//printk("hbled_store() is called, buf=%s, strlen(buf)=%d.\n", buf, strlen(buf));
+		unsigned int val = 0;
+		int rc = 0;
+
+		if(strstr(buf, "hwmod") != NULL){
+			memset(hbled_mode, 0, sizeof(hbled_mode));
+			strncpy(hbled_mode, "hwmod", 5);
+
+			rc = regmap_read(phbled_data->regmap, HW_HEART_BEAT_STS_REG, &val);
+		    if(rc) return rc;
+
+			val &= ~BIT_SW_BLINKING_MODE;
+			rc = regmap_write(phbled_data->regmap, HW_HEART_BEAT_STS_REG, val);
+			if(rc) return rc;
+		}
+		else if(strstr(buf, "swmod_on") != NULL){
+			memset(hbled_mode, 0, sizeof(hbled_mode));
+			strncpy(hbled_mode, "swmod_on", 8);
+			
+			//switch sw mode
+			rc = regmap_read(phbled_data->regmap, HW_HEART_BEAT_STS_REG, &val);
+            if (rc)
+                return rc;
+			if(!(val & BIT_SW_BLINKING_MODE)){
+	            val |= BIT_SW_BLINKING_MODE;
+    	        rc = regmap_write(phbled_data->regmap, HW_HEART_BEAT_STS_REG, val);
+				if (rc)
+    	            return rc;
+			}
+			
+			//Set LED to bright
+			rc = regmap_read(phbled_data->regmap, HEART_BEAT_LED_OUTPUY, &val);
+			if (rc)
+                return rc;
+            if(!(val & BIT_SW_LED_OUTPUT)){
+                val |= BIT_SW_LED_OUTPUT;
+                rc = regmap_write(phbled_data->regmap, HEART_BEAT_LED_OUTPUY, val);
+                if (rc)
+                    return rc;
+            }
+		}
+		else if(strstr(buf, "swmod_off") != NULL){
+			 memset(hbled_mode, 0, sizeof(hbled_mode));
+            strncpy(hbled_mode, "swmod_off", 9);
+
+			//switch sw mode
+            rc = regmap_read(phbled_data->regmap, HW_HEART_BEAT_STS_REG, &val);
+            if (rc)
+                return rc;
+            if(!(val & BIT_SW_BLINKING_MODE)){
+                val |= BIT_SW_BLINKING_MODE;
+                rc = regmap_write(phbled_data->regmap, HW_HEART_BEAT_STS_REG, val);
+                if (rc)
+                    return rc;
+            }
+
+			//Set LED to dark
+            rc = regmap_read(phbled_data->regmap, HEART_BEAT_LED_OUTPUY, &val);
+            if (rc)
+                return rc;
+            if(val & BIT_SW_LED_OUTPUT){
+                val &= ~BIT_SW_LED_OUTPUT;
+                rc = regmap_write(phbled_data->regmap, HEART_BEAT_LED_OUTPUY, val);
+                if (rc)
+                    return rc;
+            }
+        }
+		else{
+			return -EINVAL;
+		}
+		
+        return len;
+}  
+  
+static ssize_t hbled_show(struct class *class,
+                struct class_attribute *attr,
+                char *buf)
+{  
+		//printk("hbled_show() is called, hbled_mode=%s, strlen(hbled_mode)=%d\n", hbled_mode, strlen(hbled_mode));
+        return sprintf(buf, "%s\n", hbled_mode);
+}  
+static CLASS_ATTR_RW(hbled);
+  
+static struct attribute *mct_class_attrs[] = {
+    &class_attr_hbled.attr,
+    NULL,
+};
+
+ATTRIBUTE_GROUPS(mct_class);
+
+static struct class hbled_class = {
+    .name =     "mct",
+    .owner =    THIS_MODULE,
+
+    .class_groups = mct_class_groups,
+};
+ 
+static int aspeed_hbled_probe(struct platform_device *pdev)
+{
+	int status=0;
+	struct device *dev = &pdev->dev;
+	struct resource *res;
+	void __iomem *regs;
+
+	printk("%s: aspeed_hbled_probe...\n", DEVICE_NAME);
+
+   	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if(!res){
+        return -ENOENT;
+	}
+
+	regs = devm_ioremap_resource(dev, res);
+    
+	if(IS_ERR(regs)){
+        return PTR_ERR(regs);
+	}
+
+	phbled_data = devm_kzalloc(dev, sizeof(*phbled_data), GFP_KERNEL);
+
+	if(!phbled_data){
+        return -ENOMEM;
+	}
+    phbled_data->regmap = devm_regmap_init(dev, NULL, (__force void *)regs,
+            &aspeed_hbled_regmap_config);
+	
+	if(IS_ERR(phbled_data->regmap)){
+        return PTR_ERR(phbled_data->regmap);
+	}
+
+	platform_set_drvdata(pdev, phbled_data);
+
+	status = class_register(&hbled_class);
+	if(status < 0){		
+		return status;
+	}
+	
+	return 0;
+}
+
+static int aspeed_hbled_remove(struct platform_device *pdev)
+{
+	class_unregister(&hbled_class);	
+	return 0;
+}
+
+static const struct of_device_id aspeed_hbled_match[] = {
+	{ .compatible = "aspeed,ast2500-hbled" },
+	{ },
+};
+
+static struct platform_driver aspeed_hbled_driver = {
+	.driver = {
+		.name		= DEVICE_NAME,
+		.of_match_table = aspeed_hbled_match,
+	},
+	.probe = aspeed_hbled_probe,
+	.remove = aspeed_hbled_remove,
+};
+
+module_platform_driver(aspeed_hbled_driver);
+
+MODULE_DEVICE_TABLE(of, aspeed_hbled_match);
\ No newline at end of file
-- 
2.7.4

