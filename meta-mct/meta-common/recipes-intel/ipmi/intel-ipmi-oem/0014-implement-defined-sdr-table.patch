From 3f06ec8c9603c0f91e6be7fb8683176466967d87 Mon Sep 17 00:00:00 2001
From: Ray Lue <ray.lue@mic.com.tw>
Date: Tue, 17 Dec 2019 20:39:44 +0800
Subject: [PATCH] implement defined sdr table

---
 src/sensorcommands.cpp  | 90 +++++++++++++++++++++++++++++++++++++++--
 src/storagecommands.cpp |  8 +++-
 2 files changed, 93 insertions(+), 5 deletions(-)

diff --git a/src/sensorcommands.cpp b/src/sensorcommands.cpp
index 4fd97df..f06bce7 100755
--- a/src/sensorcommands.cpp
+++ b/src/sensorcommands.cpp
@@ -30,6 +30,9 @@
 #include <sensorutils.hpp>
 #include <storagecommands.hpp>
 #include <string>
+#include <fstream>
+#include <nlohmann/json.hpp>
+
 
 namespace ipmi
 {
@@ -1172,6 +1175,68 @@ struct SensorDataEventOnlyRecord
  *  FRU Device Locator Record - SDR Type 03
  */
 
+static constexpr const char* sdrFile = "/usr/share/ipmi-providers/sdr.json";
+
+static std::vector<SensorDataEventOnlyRecord> definedSdrlist;
+static void loadSdr(uint16_t baseID)
+{
+    static bool loaded = false;
+    static uint16_t perviosBase  = baseID;
+        
+    if(loaded && (perviosBase == baseID))
+    {
+        return; 
+    }
+    loaded = true; 
+    perviosBase = baseID;
+    definedSdrlist.clear();
+    SensorDataEventOnlyRecord tmp = {0};
+    tmp.header.sdr_version = ipmiSdrVersion;
+    tmp.header.record_type = 0x03; 
+    tmp.header.record_length = sizeof(SensorDataEventOnlyRecord) -
+                                      sizeof(get_sdr::SensorDataRecordHeader); 
+    tmp.key.owner_lun = 0x0;
+    tmp.body.entity_id = 0x07;
+    tmp.body.entity_instance = 0x01;
+    tmp.body.event_reading_type = 0x6f;
+    
+    std::ifstream sdrStream(sdrFile);
+    if(!sdrStream.is_open())
+    {
+        std::cerr << "NO defined SDR found\n";
+    }
+    else
+    {
+        auto data = nlohmann::json::parse(sdrStream, nullptr, false);
+        if (data.is_discarded())
+        {
+            std::cerr << "syntax error in " << sdrFile << "\n";
+        }
+        else
+        {
+            int idx = 0;
+            while (!data[idx].is_null())
+            {
+                tmp.header.record_id_msb = (baseID+idx) << 8;
+                tmp.header.record_id_lsb = (baseID+idx) & 0xFF;
+                tmp.key.owner_id = std::stoul((std::string)data[idx]["ownerId"], nullptr, 16);  
+                tmp.key.sensor_number = std::stoul((std::string)data[idx]["sensorNumber"], nullptr, 16);   
+                tmp.body.sensor_type = std::stoul((std::string)data[idx]["sensorType"], nullptr, 16);
+                std::string sensor_name = data[idx]["sensorName"];;
+                tmp.body.id_string_info = sensor_name.size();
+                std::strncpy(tmp.body.id_string, sensor_name.c_str(),
+                sizeof(tmp.body.id_string));
+                definedSdrlist.push_back(tmp);
+                idx++;
+            }
+        }
+        sdrStream.close();
+    }
+    std::cerr << "sdr size:" << definedSdrlist.size() << '\n';
+        
+}
+    
+
 
 ipmi::RspType<uint16_t,            // next record ID
               std::vector<uint8_t> // payload
@@ -1193,6 +1258,9 @@ ipmi::RspType<uint16_t,            // next record ID
         return ipmi::responseResponseError();
     }
 
+    //MCT add pre-defined SDR
+    loadSdr(sensorTree.size());
+
     size_t fruCount = 0;
     ipmi_ret_t ret = ipmi::storage::getFruSdrCount(fruCount);
     if (ret != IPMI_CC_OK)
@@ -1200,7 +1268,7 @@ ipmi::RspType<uint16_t,            // next record ID
         return ipmi::response(ret);
     }
 
-    size_t lastRecord = sensorTree.size() + fruCount - 1;
+    size_t lastRecord = sensorTree.size() + definedSdrlist.size() + fruCount - 1;
     if (recordID == lastRecordIndex)
     {
         recordID = lastRecord;
@@ -1212,9 +1280,25 @@ ipmi::RspType<uint16_t,            // next record ID
 
     uint16_t nextRecordId = lastRecord > recordID ? recordID + 1 : 0XFFFF;
 
-    if (recordID >= sensorTree.size())
+    if (recordID >= sensorTree.size() && recordID < definedSdrlist.size() + sensorTree.size())
+    {
+        size_t sdrIndex = recordID - sensorTree.size(); 
+
+        if (sizeof(SensorDataEventOnlyRecord) < (offset + bytesToRead))
+        {
+            bytesToRead = sizeof(SensorDataEventOnlyRecord) - offset;
+        }
+
+        uint8_t *respStart = reinterpret_cast<uint8_t *>(&definedSdrlist[sdrIndex]) + offset;
+        std::vector<uint8_t> recordData(respStart, respStart + bytesToRead);
+
+        return ipmi::responseSuccess(nextRecordId, recordData); 
+        
+    }
+
+    if (recordID >= sensorTree.size()+ definedSdrlist.size())
     {
-        size_t fruIndex = recordID - sensorTree.size();
+        size_t fruIndex = recordID - (sensorTree.size() + definedSdrlist.size());
         if (fruIndex >= fruCount)
         {
             return ipmi::responseInvalidFieldRequest();
diff --git a/src/storagecommands.cpp b/src/storagecommands.cpp
index 963aafe..ecd4393 100755
--- a/src/storagecommands.cpp
+++ b/src/storagecommands.cpp
@@ -147,12 +147,16 @@ ipmi_ret_t replaceCacheFru(uint8_t devId)
     static uint8_t lastDevId = 0xFF;
 
     bool timerRunning = (cacheTimer != nullptr) && !cacheTimer->isExpired();
-    if (lastDevId == devId && timerRunning)
+    if (lastDevId == devId && cacheTimer == nullptr)
+    {
+        return IPMI_CC_OK; // cache already up to date   
+    }
+    else if (lastDevId == devId && timerRunning)
     {
         return IPMI_CC_OK; // cache already up to date
     }
     // if timer is running, stop it and writeFru manually
-    else if (timerRunning)
+    else if (timerRunning && cacheTimer->isRunning())
     {
         cacheTimer->stop();
         writeFru();
