From 69f338bd2e77f3e1303059ea9710df551187ee1c Mon Sep 17 00:00:00 2001
From: Ray Lue <ray.lue@mic.com.tw>
Date: Wed, 11 Mar 2020 22:10:52 +0800
Subject: [PATCH 1/1] [s7106]new processor sensor to replace gpio sensor

---
 CMakeLists.txt                                |  15 ++
 ...yz.openbmc_project.processorsensor.service |  12 ++
 src/ProcessorSensorMain.cpp                   | 156 ++++++++++++++++++
 3 files changed, 183 insertions(+)
 mode change 100644 => 100755 CMakeLists.txt
 create mode 100644 service_files/xyz.openbmc_project.processorsensor.service
 create mode 100755 src/ProcessorSensorMain.cpp

diff --git a/CMakeLists.txt b/CMakeLists.txt
old mode 100644
new mode 100755
index f9d6d31..399faf1
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -47,6 +47,8 @@ option (DISABLE_MCUTEMP "Disable installing MCU temperature sensor" OFF)
 option (DISABLE_PSU "Disable installing PSU sensor" OFF)
 option (DISABLE_NVME "Disable installing NVME sensor" ON)
 
+option (DISABLE_PROCESSOR "Disable installing processor sensor" OFF)
+
 include ("cmake/HunterGate.cmake")
 
 huntergate (URL "https://github.com/ruslo/hunter/archive/v0.18.64.tar.gz" SHA1
@@ -196,6 +198,10 @@ add_executable (psusensor src/PSUSensorMain.cpp ${PSU_SRC_FILES})
 add_dependencies (psusensor sdbusplus-project)
 target_link_libraries (psusensor ${SENSOR_LINK_LIBS})
 
+add_executable (processorsensor src/ProcessorSensorMain.cpp)
+add_dependencies (processorsensor sdbusplus-project)
+target_link_libraries (processorsensor ${SENSOR_LINK_LIBS})
+
 if (NOT DISABLE_NVME)
     add_executable (nvmesensor ${NVME_SRC_FILES})
     add_dependencies (nvmesensor sdbusplus-project)
@@ -212,6 +218,7 @@ if (NOT YOCTO)
     add_dependencies (ipmbsensor ${EXTERNAL_PACKAGES})
     add_dependencies (mcutempsensor ${EXTERNAL_PACKAGES})
     add_dependencies (psusensor ${EXTERNAL_PACKAGES})
+    add_dependencies (processorsensor ${EXTERNAL_PACKAGES})
 endif ()
 
 set (SERVICE_FILE_SRC_DIR ${PROJECT_SOURCE_DIR}/service_files)
@@ -292,3 +299,11 @@ if (NOT DISABLE_NVME)
                  ${SERVICE_FILE_SRC_DIR}/xyz.openbmc_project.nvmesensor.service
                  DESTINATION ${SERVICE_FILE_INSTALL_DIR})
 endif ()
+
+if (NOT DISABLE_PROCESSOR)
+    install (TARGETS processorsensor DESTINATION bin)
+    install (FILES
+                 ${SERVICE_FILE_SRC_DIR}/xyz.openbmc_project.processorsensor.service
+                 DESTINATION ${SERVICE_FILE_INSTALL_DIR})
+endif ()
+
diff --git a/service_files/xyz.openbmc_project.processorsensor.service b/service_files/xyz.openbmc_project.processorsensor.service
new file mode 100644
index 0000000..eb6e063
--- /dev/null
+++ b/service_files/xyz.openbmc_project.processorsensor.service
@@ -0,0 +1,12 @@
+[Unit]
+Description=IPMI defined Proecssor Sensor
+StopWhenUnneeded=false
+After=xyz.openbmc_project.EntityManager.service
+[Service]
+Restart=always
+RestartSec=5
+ExecStart=/usr/bin/env processorsensor
+SyslogIdentifier=processor-sensor
+
+[Install]
+WantedBy=multi-user.target
diff --git a/src/ProcessorSensorMain.cpp b/src/ProcessorSensorMain.cpp
new file mode 100755
index 0000000..8e9986a
--- /dev/null
+++ b/src/ProcessorSensorMain.cpp
@@ -0,0 +1,156 @@
+/*
+// Copyright (c) 2018 Intel Corporation
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+*/
+
+//#include <GPIOSensor.hpp>
+#include <Utils.hpp>
+#include <boost/algorithm/string/predicate.hpp>
+#include <boost/asio.hpp>
+#include <chrono>
+#include <ctime>
+#include <iostream>
+#include <sdbusplus/asio/connection.hpp>
+#include <sdbusplus/asio/object_server.hpp>
+#include <sdbusplus/asio/sd_event.hpp>
+#include <sdbusplus/bus.hpp>
+#include <sdbusplus/exception.hpp>
+#include <sdbusplus/server.hpp>
+#include <sdbusplus/timer.hpp>
+#include <sensor.hpp>
+#include <systemd/sd-journal.h>
+
+
+static constexpr bool DEBUG = true;
+
+static constexpr char const* ipmiSELService =    "xyz.openbmc_project.Logging.IPMI";
+static constexpr char const* ipmiSELPath = "/xyz/openbmc_project/Logging/IPMI";
+static constexpr char const* ipmiSELAddInterface = "xyz.openbmc_project.Logging.IPMI";
+
+static const std::string ipmiSELAddMessage = "SEL Entry";
+static constexpr size_t selEvtDataMaxSize = 3;
+
+
+int main()
+{
+    int gpioIndex = -1;
+    bool gpioInverted = false;
+    int baseconfigureflag=0;
+    uint64_t sensorNumber=0;
+    std::string sensorName;
+    std::string sensorInterface;
+    std::string sensorStateNormal;
+    std::string sensorStateActive;
+    std::string sensorProperty;
+    // setup connection to dbus
+    boost::asio::io_service io;
+    auto systemBus = std::make_shared<sdbusplus::asio::connection>(io);
+    auto objServer = sdbusplus::asio::object_server(systemBus);
+
+    // setup object server, define interface
+    systemBus->request_name("xyz.openbmc_project.ProcessorSensor");
+
+#if 0 //TODO get sensor name from entity manager 
+    if (getGPIOSensorConfig(systemBus, &gpioIndex, &gpioInverted, &sensorNumber, sensorName, sensorInterface, sensorStateNormal, sensorStateActive, sensorProperty))
+    {
+        baseconfigureflag=1;
+    }else
+    {
+        return -1;
+    }
+#endif 
+    std::shared_ptr<sdbusplus::asio::dbus_interface> iface =
+        objServer.add_interface("/xyz/openbmc_project/sensors/processor/CATERR",sensorValueInterface);
+
+    double value = 0;
+    //ray__ test value
+    iface->register_property("Value", value);
+    iface->initialize();
+    
+    auto caterrEventMatcherCallback =
+        [systemBus](sdbusplus::message::message& message) {
+            boost::container::flat_map<std::string, sdbusplus::message::variant<std::string>> propertiesChanged;
+            std::string objectName;
+            std::cerr << "ray__ callback caterrEventMatcher!!!\n";
+            if (message.is_method_error())
+            {
+                std::cerr << "callback method error\n";
+                return;
+            }
+
+            if (DEBUG)
+            {
+                std::cout << message.get_path() << " is changed\n";
+            }
+            std::string sensorPath =  message.get_path();
+            message.read(objectName, propertiesChanged);
+            std::string event = propertiesChanged.begin()->first;
+	 
+            auto variant = sdbusplus::message::variant_ns::get_if<std::string>(
+	        &propertiesChanged.begin()->second);
+
+            if (event.empty() || nullptr == variant)
+            {
+                return;
+            }
+            if (event == "ProcessorStatus")
+            {
+                if (*variant == "xyz.openbmc_project.Control.Processor.State.CATERR")
+                {
+                    //log redfish
+                    std::string errMsg("CATERR occur");
+                    bool assert=1;
+                    std::string redfishMsgId("CATERR!");
+                    sd_journal_send("MESSAGE=%s", errMsg.c_str(),
+                                    "REDFISH_MESSAGE_ID=%s", redfishMsgId.c_str(), NULL);
+
+                    //log SEL
+                    //Processor
+                    uint16_t genid = 0x20;
+
+                    std::vector<uint8_t> eventData(selEvtDataMaxSize, 0xFF);
+                    //set eventdata1 to 0xb  , for now unspecified byte2 & btye3 , not implement A0 in bit[7:4]
+                    eventData[0] = static_cast<uint8_t>(0xb);  
+                    sdbusplus::message::message writeSEL = systemBus->new_method_call(
+                        ipmiSELService, ipmiSELPath, ipmiSELAddInterface, "IpmiSelAdd");
+                    writeSEL.append(ipmiSELAddMessage,  std::string("/xyz/openbmc_project/sensors/processor/CATERR"), eventData, assert,
+                        genid);
+
+                    
+                    try
+                    {
+                        systemBus->call(writeSEL);
+                    }
+                        catch (sdbusplus::exception_t& e)
+                    {
+                        std::cerr << "call IpmiSelAdd failed\n";
+                    }
+                      
+                }
+                
+            }
+
+        };
+
+    //event trigger, this can move to poll the gpio service.
+    sdbusplus::bus::match::match caterrEventMatcher(
+        static_cast<sdbusplus::bus::bus&>(*systemBus),
+        "type='signal',interface='org.freedesktop.DBus.Properties',member='"
+        "PropertiesChanged',arg0namespace='xyz.openbmc_project.Control.Processor'",
+        std::move(caterrEventMatcherCallback));
+
+    io.run();
+
+    return 0;
+}
-- 
2.22.0

