From eefdf535172f1aeb179c83e0a3f105cecfbddaff Mon Sep 17 00:00:00 2001
From: jeannie <jeannie@localhost.localdomain>
Date: Fri, 3 May 2019 11:20:19 +0800
Subject: [PATCH] Add CATERR sel log monitor

---
 CMakeLists.txt                      |   8 +++
 include/caterr_event_monitor.hpp    | 136 ++++++++++++++++++++++++++++++++++++
 include/sel_logger.hpp              |   8 ++-
 include/threshold_event_monitor.hpp |   4 +-
 src/sel_logger.cpp                  |  14 ++--
 5 files changed, 163 insertions(+), 7 deletions(-)
 create mode 100755 include/caterr_event_monitor.hpp
 mode change 100644 => 100755 include/sel_logger.hpp
 mode change 100644 => 100755 include/threshold_event_monitor.hpp
 mode change 100644 => 100755 src/sel_logger.cpp

diff --git a/CMakeLists.txt b/CMakeLists.txt
index e843eca..f4b98fa 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -19,10 +19,18 @@ option (
     OFF
 )
 
+option (
+    SEL_LOGGER_MONITOR_CATERR_EVENTS
+    "Enable logger to monitor and automatically
+     log SEL records for caterr sensor events"
+    ON
+)
+
 target_compile_definitions (
     sel-logger PRIVATE
     $<$<BOOL:${SEL_LOGGER_MONITOR_THRESHOLD_EVENTS}>: -DSEL_LOGGER_MONITOR_THRESHOLD_EVENTS>
     $<$<BOOL:${REDFISH_LOG_MONITOR_PULSE_EVENTS}>: -DREDFISH_LOG_MONITOR_PULSE_EVENTS>
+    $<$<BOOL:${SEL_LOGGER_MONITOR_CATERR_EVENTS}>: -DSEL_LOGGER_MONITOR_CATERR_EVENTS>
 )
 
 target_include_directories (sel-logger PRIVATE ${CMAKE_SOURCE_DIR})
diff --git a/include/caterr_event_monitor.hpp b/include/caterr_event_monitor.hpp
new file mode 100755
index 0000000..edf9752
--- /dev/null
+++ b/include/caterr_event_monitor.hpp
@@ -0,0 +1,136 @@
+/*
+// Copyright (c) 2019 Intel Corporation
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+*/
+
+#pragma once
+#include <sdbusplus/asio/object_server.hpp>
+#include <sel_logger.hpp>
+#include <sensorutils.hpp>
+
+inline static sdbusplus::bus::match::match
+    startCaterrEventMonitor(std::shared_ptr<sdbusplus::asio::connection> conn)
+{
+    auto caterrEventMatcherCallback = [conn](sdbusplus::message::message &msg) {
+        std::string thresholdInterface;
+        boost::container::flat_map<std::string,
+                                   sdbusplus::message::variant<std::string>>
+            propertiesChanged;
+        msg.read(thresholdInterface, propertiesChanged);
+        std::string_view sensorName(msg.get_path());
+		//Processor
+		uint8_t sensorType=0x7;
+		uint8_t eventType=0x6f;
+		
+        if (propertiesChanged.empty())
+        {
+            return;
+        }
+		
+		
+        std::vector<uint8_t> eventData(selEvtDataMaxSize, 0xFF);
+        bool assert=0;
+        //set eventdata1 to 0xb  , for now unspecified byte2 & btye3 , not implement A0 in bit[7:4]
+        eventData[0] |= eventData[0] =
+                static_cast<uint8_t>(0xb);  		
+
+        std::string event = propertiesChanged.begin()->first;
+	 
+        auto variant = sdbusplus::message::variant_ns::get_if<std::string>(
+	      &propertiesChanged.begin()->second);
+        
+            
+
+        if (event.empty() || nullptr == variant)
+        {
+            return;
+        }
+
+		
+		
+		// Get the sensor reading to put in the event data
+        sdbusplus::message::message getSensorValue =
+            conn->new_method_call(msg.get_sender(), msg.get_path(),
+                                  "org.freedesktop.DBus.Properties", "Get");
+            getSensorValue.append("xyz.openbmc_project.Control.Processor","SensorNumber");
+        
+       			
+        sdbusplus::message::variant<uint16_t> sensorValue;	
+			
+        try
+        {
+            sdbusplus::message::message getSensorValueResp =
+                conn->call(getSensorValue);
+            getSensorValueResp.read(sensorValue);
+        }
+        catch (sdbusplus::exception_t &)
+        {
+            std::cerr << "error getting sensor value from " << msg.get_path()
+                      << "\n";
+            return;
+        }
+		
+		uint16_t sensorNumber = 0;
+		sensorNumber=std::get<uint16_t>(sensorValue);
+  		
+        if (event == "ProcessorStatus")
+        {
+            if (*variant == "xyz.openbmc_project.Control.Processor.State.CATERR")
+            {
+                std::string message("CATERR occur");
+                assert=1;
+                std::string redfishMsgId("CATERR!");
+                sd_journal_send("MESSAGE=%s", message.c_str(),
+                                "REDFISH_MESSAGE_ID=%s", redfishMsgId.c_str(), NULL);
+                                
+								
+		 //fp=fopen("/var/tmp/sellog","a");
+                //fprintf(fp,"variant == :xyz.openbmc_project.Control.Processor.State.CATERR\n");
+                //fprintf(fp,"path=%s\n",msg.get_path());
+                //fclose(fp);				
+            }
+			
+            //deassert event  no need (resesrve, add for test)
+#if 0
+            else if (*variant == "xyz.openbmc_project.Control.Processor.State.NORMAL")
+            {         
+            
+                std::string message("no CATERR occure");
+                assert=0;
+
+                			
+                //fp=fopen("/var/tmp/sellog","a");
+                //fprintf(fp,"variant == :xyz.openbmc_project.Control.Processor.State.NORMAL\n");
+                //fclose(fp);		
+            }
+#endif
+            std::string journalMsg("Add Caterr event");
+            selAddSystemRecord(journalMsg, std::string(msg.get_path()), eventData,
+                               assert, selEventOnlyType, selBIOSGenID,
+                               "IPMI_SEL_SENSOR_TYPE=%x", sensorType,
+                               "IPMI_SEL_EVENT_TYPE=%x", eventType,
+			        "IPMI_SEL_SENSOR_NUMBER=%x",sensorNumber);
+			
+			
+        }
+    };
+
+    sdbusplus::bus::match::match caterrEventMatcher(
+        static_cast<sdbusplus::bus::bus &>(*conn),
+        "type='signal',interface='org.freedesktop.DBus.Properties',member='"
+        "PropertiesChanged',arg0namespace='xyz.openbmc_project.Control.Processor'",
+        std::move(caterrEventMatcherCallback));
+
+    return caterrEventMatcher;
+}
diff --git a/include/sel_logger.hpp b/include/sel_logger.hpp
old mode 100644
new mode 100755
index 28214e3..426346c
--- a/include/sel_logger.hpp
+++ b/include/sel_logger.hpp
@@ -25,7 +25,13 @@ static constexpr char const *ipmiSelAddInterface =
 // SEL entries.  Helps with filtering SEL entries in the journal.
 static constexpr char const *selMessageId = "b370836ccf2f4850ac5bee185b77893a";
 static constexpr int selPriority = 5; // notice
+
+//Record Type
 static constexpr uint8_t selSystemType = 0x02;
+static constexpr uint8_t selEventOnlyType = 0x03;
+
+
+static constexpr uint16_t selBIOSGenID = 0x0001;
 static constexpr uint16_t selBMCGenID = 0x0020;
 static constexpr uint16_t selInvalidRecID =
     std::numeric_limits<uint16_t>::max();
@@ -35,5 +41,5 @@ static constexpr size_t selOemDataMaxSize = 13;
 template <typename... T>
 static uint16_t
     selAddSystemRecord(const std::string &message, const std::string &path,
-                       const std::vector<uint8_t> &selData, const bool &assert,
+                       const std::vector<uint8_t> &selData, const bool &assert, const uint8_t &selType, 
                        const uint16_t &genId, T &&... metadata);
diff --git a/src/sel_logger.cpp b/src/sel_logger.cpp
old mode 100644
new mode 100755
index 6068e20..68d7d2b
--- a/src/sel_logger.cpp
+++ b/src/sel_logger.cpp
@@ -25,6 +25,7 @@
 #include <sel_logger.hpp>
 #include <sstream>
 #include <threshold_event_monitor.hpp>
+#include <caterr_event_monitor.hpp>
 
 struct DBusInternalError final : public sdbusplus::exception_t
 {
@@ -108,7 +109,7 @@ static void toHexStr(const std::vector<uint8_t> &data, std::string &hexStr)
 template <typename... T>
 static uint16_t
     selAddSystemRecord(const std::string &message, const std::string &path,
-                       const std::vector<uint8_t> &selData, const bool &assert,
+                       const std::vector<uint8_t> &selData, const bool &assert,  const uint8_t &selType,
                        const uint16_t &genId, T &&... metadata)
 {
     // Only 3 bytes of SEL event data are allowed in a system record
@@ -122,7 +123,7 @@ static uint16_t
     unsigned int recordId = getNewRecordId();
     sd_journal_send("MESSAGE=%s", message.c_str(), "PRIORITY=%i", selPriority,
                     "MESSAGE_ID=%s", selMessageId, "IPMI_SEL_RECORD_ID=%d",
-                    recordId, "IPMI_SEL_RECORD_TYPE=%x", selSystemType,
+                    recordId, "IPMI_SEL_RECORD_TYPE=%x", selType,
                     "IPMI_SEL_GENERATOR_ID=%x", genId,
                     "IPMI_SEL_SENSOR_PATH=%s", path.c_str(),
                     "IPMI_SEL_EVENT_DIR=%x", assert, "IPMI_SEL_DATA=%s",
@@ -168,8 +169,8 @@ int main(int argc, char *argv[])
     ifaceAddSel->register_method(
         "IpmiSelAdd", [](const std::string &message, const std::string &path,
                          const std::vector<uint8_t> &selData,
-                         const bool &assert, const uint16_t &genId) {
-            return selAddSystemRecord(message, path, selData, assert, genId);
+                         const bool &assert, const uint8_t &selType, const uint16_t &genId) {
+            return selAddSystemRecord(message, path, selData, assert,selType, genId);
         });
     // Add a new OEM SEL entry
     ifaceAddSel->register_method(
@@ -190,6 +191,11 @@ int main(int argc, char *argv[])
         startPulseEventMonitor(conn);
 #endif
 
+#ifdef SEL_LOGGER_MONITOR_CATERR_EVENTS
+    sdbusplus::bus::match::match caterrEventMatcher =
+        startCaterrEventMonitor(conn);
+#endif
+
     io.run();
 
     return 0;
