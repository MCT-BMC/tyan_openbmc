From a9f840fc6e1e8a5f36c459021aa4a960cc48f0e4 Mon Sep 17 00:00:00 2001
From: Varun Sampat <vsampat@twitter.com>
Date: Thu, 17 Oct 2019 14:23:40 -0400
Subject: [PATCH] pwr button sel log

---
 CMakeLists.txt                                     | 11 ++++
 .../xyz.openbmc_project.pwrbuttonsensor.service    | 12 ++++
 src/PwrButtonSensor.cpp                            | 67 ++++++++++++++++++++++
 3 files changed, 90 insertions(+)
 create mode 100644 service_files/xyz.openbmc_project.pwrbuttonsensor.service
 create mode 100644 src/PwrButtonSensor.cpp

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 51366d6..87f06a6 100755
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -49,6 +49,7 @@ option (DISABLE_PSU "Disable installing PSU sensor" OFF)
 option (DISABLE_PROCESSOR "Disable installing processor sensor" OFF)
 option (DISABLE_ACPI "Disable installing acpi sensor" OFF)
 option (DISABLE_HOSTRESET "Disable installing host reset sensor" OFF)
+option (DISABLE_PWR_BUTTON "Disable installing power button sensor" OFF)
 
 include ("cmake/HunterGate.cmake")
 
@@ -212,6 +213,9 @@ add_executable (hostresetsensor src/HostResetSensor.cpp)
 add_dependencies (hostresetsensor sdbusplus-project)
 target_link_libraries (hostresetsensor ${SENSOR_LINK_LIBS})
 
+add_executable (pwrbuttonsensor src/PwrButtonSensor.cpp)
+add_dependencies (pwrbuttonsensor sdbusplus-project)
+target_link_libraries (pwrbuttonsensor ${SENSOR_LINK_LIBS})
 
 if (NOT YOCTO)
     add_dependencies (adcsensor ${EXTERNAL_PACKAGES})
@@ -227,6 +231,7 @@ if (NOT YOCTO)
     add_dependencies (processorsensor ${EXTERNAL_PACKAGES})
     add_dependencies (acpisensor ${EXTERNAL_PACKAGES})
     add_dependencies (hostresetsensor ${EXTERNAL_PACKAGES})
+    add_dependencies (pwrbuttonsensor ${EXTERNAL_PACKAGES})
 endif ()
 
 set (SERVICE_FILE_SRC_DIR ${PROJECT_SOURCE_DIR}/service_files)
@@ -332,3 +337,9 @@ if (NOT DISABLE_HOSTRESET)
                  DESTINATION ${SERVICE_FILE_INSTALL_DIR})
 endif ()
 
+if (NOT DISABLE_PWR_BUTTON)
+    install (TARGETS pwrbuttonsensor DESTINATION bin)
+    install (FILES
+                 ${SERVICE_FILE_SRC_DIR}/xyz.openbmc_project.pwrbuttonsensor.service
+                 DESTINATION ${SERVICE_FILE_INSTALL_DIR})
+endif ()
diff --git a/service_files/xyz.openbmc_project.pwrbuttonsensor.service b/service_files/xyz.openbmc_project.pwrbuttonsensor.service
new file mode 100644
index 0000000..6431e24
--- /dev/null
+++ b/service_files/xyz.openbmc_project.pwrbuttonsensor.service
@@ -0,0 +1,12 @@
+[Unit]
+Description=IPMI defined system host pwr button sensor
+StopWhenUnneeded=false
+After=xyz.openbmc_project.EntityManager.service
+[Service]
+Restart=always
+RestartSec=5
+ExecStart=/usr/bin/env pwrbuttonsensor
+SyslogIdentifier=pwrbutton-sensor
+
+[Install]
+WantedBy=multi-user.target
diff --git a/src/PwrButtonSensor.cpp b/src/PwrButtonSensor.cpp
new file mode 100644
index 0000000..56a1c52
--- /dev/null
+++ b/src/PwrButtonSensor.cpp
@@ -0,0 +1,67 @@
+/*
+// Copyright (c) 2018 Intel Corporation
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+*/
+
+#include <Utils.hpp>
+#include <boost/algorithm/string/predicate.hpp>
+#include <boost/asio.hpp>
+#include <chrono>
+#include <ctime>
+#include <iostream>
+#include <sdbusplus/asio/connection.hpp>
+#include <sdbusplus/asio/object_server.hpp>
+#include <sdbusplus/asio/sd_event.hpp>
+#include <sdbusplus/bus.hpp>
+#include <sdbusplus/exception.hpp>
+#include <sdbusplus/server.hpp>
+#include <sdbusplus/timer.hpp>
+#include <sensor.hpp>
+#include <systemd/sd-journal.h>
+
+
+static constexpr bool DEBUG = true;
+
+static constexpr char const* ipmiSELService =    "xyz.openbmc_project.Logging.IPMI";
+static constexpr char const* ipmiSELPath = "/xyz/openbmc_project/Logging/IPMI";
+static constexpr char const* ipmiSELAddInterface = "xyz.openbmc_project.Logging.IPMI";
+
+static const std::string ipmiSELAddMessage = "SEL Entry";
+static const std::string sensorPath = "/xyz/openbmc_project/sensors/pwr_button/POWER_BUTTON";
+
+static constexpr size_t selEvtDataMaxSize = 3;
+
+int main()
+{
+    // setup connection to dbus
+    boost::asio::io_service io;
+    auto systemBus = std::make_shared<sdbusplus::asio::connection>(io);
+    auto objServer = sdbusplus::asio::object_server(systemBus);
+
+    // setup object server, define interface
+    systemBus->request_name("xyz.openbmc_project.PwrButtonSensor");
+
+    // add interface into sensor tree
+    std::shared_ptr<sdbusplus::asio::dbus_interface> iface =
+        objServer.add_interface(sensorPath,sensorValueInterface);
+
+    double value = 0;
+    //dummy value, just identifier for sdr command   
+    iface->register_property("Value", value);
+    iface->initialize();
+    
+    io.run();
+
+    return 0;
+}
