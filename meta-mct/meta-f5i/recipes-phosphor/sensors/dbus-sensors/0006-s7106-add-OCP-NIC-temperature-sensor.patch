From a947d9511006dbcd7773c9ae8faef1517ecbd41b Mon Sep 17 00:00:00 2001
From: Ray Lue <ray.lue@mic.com.tw>
Date: Thu, 12 Mar 2020 13:57:46 +0800
Subject: [PATCH] s7106 add OCP NIC temperature sensor

---
 include/HwmonTempSensor.hpp |  1 +
 src/HwmonTempMain.cpp       | 27 +++++++++++++++-------
 src/HwmonTempSensor.cpp     | 55 ++++++++++++++++++++++++++++++++++++++++-----
 3 files changed, 70 insertions(+), 13 deletions(-)
 mode change 100644 => 100755 include/HwmonTempSensor.hpp
 mode change 100644 => 100755 src/HwmonTempMain.cpp
 mode change 100644 => 100755 src/HwmonTempSensor.cpp

diff --git a/include/HwmonTempSensor.hpp b/include/HwmonTempSensor.hpp
old mode 100644
new mode 100755
index e041085..a91a82d
--- a/include/HwmonTempSensor.hpp
+++ b/include/HwmonTempSensor.hpp
@@ -26,6 +26,7 @@ class HwmonTempSensor : public Sensor
     boost::asio::streambuf readBuf;
     std::string path;
     PowerState readState;
+    thresholds::ThresholdTimer thresholdTimer;
     size_t errCount;
     void setupRead(void);
     void handleResponse(const boost::system::error_code& err);
diff --git a/src/HwmonTempMain.cpp b/src/HwmonTempMain.cpp
old mode 100644
new mode 100755
index 55d4508..1472b4e
--- a/src/HwmonTempMain.cpp
+++ b/src/HwmonTempMain.cpp
@@ -196,7 +196,8 @@ void createSensors(
                     }
                 }
                 std::vector<thresholds::Threshold> sensorThresholds;
-                if (!parseThresholdsFromConfig(*sensorData, sensorThresholds))
+                std::string label = "temp1";
+                if (!parseThresholdsFromConfig(*sensorData, sensorThresholds, &label))
                 {
                     std::cerr << "error populating thresholds for "
                               << sensorName << "\n";
@@ -209,12 +210,15 @@ void createSensors(
                         VariantToStringVisitor(), findPowerOn->second);
                     setReadState(powerState, readState);
                 }
-                auto& sensor = sensors[sensorName];
-                sensor = nullptr;
-                sensor = std::make_unique<HwmonTempSensor>(
-                    directory.string() + "/temp1_input", sensorType,
-                    objectServer, dbusConnection, io, sensorName,
-                    std::move(sensorThresholds), *interfacePath, readState);
+
+                if (deviceName != "14-001f"){
+                    auto& sensor = sensors[sensorName];
+                    sensor = nullptr;
+                    sensor = std::make_unique<HwmonTempSensor>(
+                            directory.string() + "/temp1_input", sensorType,
+                            objectServer, dbusConnection, io, sensorName,
+                            std::move(sensorThresholds), *interfacePath, readState);
+                }
 
                 // Looking for keys like "Name1" for temp2_input,
                 // "Name2" for temp3_input, etc.
@@ -231,13 +235,20 @@ void createSensors(
 
                     std::string sensorName =
                         std::get<std::string>(findKey->second);
+                    std::vector<thresholds::Threshold> sensorThresholds;
+                    label = "temp" + std::string(1, '1' + i);
+                    if (!parseThresholdsFromConfig(*sensorData, sensorThresholds, &label))
+                    {
+                        std::cerr << "error populating thresholds for " << sensorName << "\n";
+                    }
+
                     auto& sensor = sensors[sensorName];
                     sensor = nullptr;
                     sensor = std::make_unique<HwmonTempSensor>(
                         directory.string() + "/temp" + std::string(1, '1' + i) +
                             "_input",
                         sensorType, objectServer, dbusConnection, io,
-                        sensorName, std::vector<thresholds::Threshold>(),
+                        sensorName, std::move(sensorThresholds),
                         *interfacePath, readState);
                 }
             }
diff --git a/src/HwmonTempSensor.cpp b/src/HwmonTempSensor.cpp
old mode 100644
new mode 100755
index cf8ee10..2af0ba4
--- a/src/HwmonTempSensor.cpp
+++ b/src/HwmonTempSensor.cpp
@@ -43,12 +43,13 @@ HwmonTempSensor::HwmonTempSensor(
     std::shared_ptr<sdbusplus::asio::connection>& conn,
     boost::asio::io_service& io, const std::string& sensorName,
     std::vector<thresholds::Threshold>&& _thresholds,
-    const std::string& sensorConfiguration, const PowerState powerState) :
+    const std::string& sensorConfiguration, PowerState readState) :
     Sensor(boost::replace_all_copy(sensorName, " ", "_"),
            std::move(_thresholds), sensorConfiguration, objectType, maxReading,
            minReading),
     objServer(objectServer), inputDev(io, open(path.c_str(), O_RDONLY)),
-    waitTimer(io), path(path), errCount(0), readState(powerState)
+    waitTimer(io), path(path), errCount(0), readState(std::move(readState)),
+    thresholdTimer(io, this)
 {
     sensorInterface = objectServer.add_interface(
         "/xyz/openbmc_project/sensors/temperature/" + name,
@@ -97,8 +98,41 @@ void HwmonTempSensor::handleResponse(const boost::system::error_code& err)
 {
     if (err == boost::system::errc::bad_file_descriptor)
     {
+        updateValueInvalid(true);
         return; // we're being destroyed
     }
+
+    // Set as sensor reading invalid for power-on type sensor
+    if (readState != PowerState::always && !isPowerOn())
+    {
+        updateValueInvalid(true);
+        updateValue(0);
+        errCount = 0;
+
+        // clear response buffer reading
+        std::istream invalidResponseStream(&readBuf);
+        std::string invalidResponse;
+        std::getline(invalidResponseStream, invalidResponse);
+        invalidResponseStream.clear();
+
+        inputDev.close();
+        int fd = open(path.c_str(), O_RDONLY);
+        if (fd <= 0)
+        {
+            return;
+        }
+        inputDev.assign(fd);
+        waitTimer.expires_from_now(boost::posix_time::milliseconds(sensorPollMs));
+        waitTimer.async_wait([&](const boost::system::error_code& ec) {
+            if (ec == boost::asio::error::operation_aborted)
+            {
+                return;
+            }
+            setupRead();
+        });
+        return;
+    }
+
     std::istream responseStream(&readBuf);
     if (!err)
     {
@@ -113,6 +147,7 @@ void HwmonTempSensor::handleResponse(const boost::system::error_code& err)
                 updateValue(nvalue);
             }
             errCount = 0;
+            updateValueInvalid(false);
         }
         catch (const std::invalid_argument&)
         {
@@ -138,7 +173,8 @@ void HwmonTempSensor::handleResponse(const boost::system::error_code& err)
 
     if (errCount >= warnAfterErrorCount)
     {
-        updateValue(0);
+        updateValueInvalid(true);
+        //updateValue(0);
     }
     responseStream.clear();
     inputDev.close();
@@ -160,9 +196,18 @@ void HwmonTempSensor::handleResponse(const boost::system::error_code& err)
 
 void HwmonTempSensor::checkThresholds(void)
 {
-    if (readState == PowerState::on && !isPowerOn())
+    if (readState != PowerState::always && !isPowerOn())
     {
         return;
     }
-    thresholds::checkThresholds(this);
+    //thresholds::checkThresholds(this);
+
+    if(readState == PowerState::always)
+    {
+        thresholds::checkThresholds(this);
+    }
+    else
+    {
+        thresholds::checkThresholdsPowerDelay(this, thresholdTimer);
+    }
 }
