From 8ebd78f9a9ab4403e63b7284d09531049e50bf0e Mon Sep 17 00:00:00 2001
From: John Chung <john.chung@mic.com.tw>
Date: Wed, 20 May 2020 17:37:21 +0800
Subject: [PATCH] Implement add SEL feature for watchdog timeout

---
 watchdog.cpp | 70 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 watchdog.hpp |  3 +++
 2 files changed, 73 insertions(+)

diff --git a/watchdog.cpp b/watchdog.cpp
index daf98a1..3483127 100755
--- a/watchdog.cpp
+++ b/watchdog.cpp
@@ -148,6 +148,8 @@ void Watchdog::timeOutHandler()
 
     }
 
+    addWatchdogSEL(action,expiredTimerUse());
+
     tryFallbackOrDisable();
 }
 
@@ -174,6 +176,74 @@ void Watchdog::tryFallbackOrDisable()
     WatchdogInherits::enabled(false);
 }
 
+void Watchdog::addWatchdogSEL(Base::Watchdog::Action action,Base::Watchdog::TimerUse timeUse){
+
+    static constexpr auto SEL_LOGGER_SERVICE =
+        "xyz.openbmc_project.Logging.IPMI";
+    static constexpr auto SEL_LOGGER_ROOT =
+        "/xyz/openbmc_project/Logging/IPMI";
+    static constexpr auto SEL_LOGGER_INTERFACE =
+        "xyz.openbmc_project.Logging.IPMI";
+    static constexpr auto SEL_LOGGER_METHOD = "IpmiSelAdd";
+    static constexpr const uint16_t ipmiBMCSlaveAddr = 0x20;
+
+    uint8_t eventData1=0xff;
+    uint8_t eventData2=0xff;
+    switch (action)
+    {
+        case Action::None:
+            eventData1 = 0;
+            break;
+        case Action::HardReset:
+            eventData1 = 1;
+            break;
+        case Action::PowerOff:
+            eventData1 = 2;
+            break;
+        case Action::PowerCycle:
+            eventData1 = 3;
+            break;
+    }
+
+    switch (timeUse)
+    {
+        case TimerUse::Reserved:
+            eventData2 = 0;
+            break;
+        case TimerUse::BIOSFRB2:
+            eventData2 = 1;
+            break;
+        case TimerUse::BIOSPOST:
+            eventData2 = 2;
+            break;
+        case TimerUse::OSLoad:
+            eventData2 = 3;
+            break;
+        case TimerUse::SMSOS:
+            eventData2 = 4;
+            break;
+        case TimerUse::OEM:
+            eventData2 = 5;
+            break;
+    }
+
+    try
+    {
+        auto method =
+            bus.new_method_call(SEL_LOGGER_SERVICE, SEL_LOGGER_ROOT,
+                                SEL_LOGGER_INTERFACE, SEL_LOGGER_METHOD);
+        method.append("watchdog: Timed out",
+                      "/xyz/openbmc_project/sensors/watchdog2/WATCHDOG2",
+                      std::vector<uint8_t>({eventData1, eventData2, 0xFF}), true,
+                      ipmiBMCSlaveAddr);
+        bus.call_noreply(method);
+    }
+    catch (const SdBusError& e)
+    {
+        log<level::ERR>(e.what());
+    }
+}
+
 std::string Watchdog::getService(const std::string& path, const std::string& interface)
 {
     constexpr auto mapperObjPath = "/xyz/openbmc_project/object_mapper";
diff --git a/watchdog.hpp b/watchdog.hpp
index 9f3b650..f4c8e72 100755
--- a/watchdog.hpp
+++ b/watchdog.hpp
@@ -173,6 +173,9 @@ class Watchdog : public WatchdogInherits
     /** @brief Attempt to enter the fallback watchdog or disables it */
     void tryFallbackOrDisable();
 
+    /** @brief Add a watchdog SEL to SEL list  */
+    void addWatchdogSEL(Base::Watchdog::Action action,Base::Watchdog::TimerUse timeUse);
+
     /** @brief Calls into Object Mapper to get Dbus object service */
     std::string getService(const std::string& path, const std::string& interface);
 
