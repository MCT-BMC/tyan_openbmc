From bb1ffedba4a2e228b59f2298834b84ff09152030 Mon Sep 17 00:00:00 2001
From: "wendy.shi" <wendy.shi@mic.com.tw>
Date: Thu, 9 Jul 2020 17:57:45 +0800
Subject: [PATCH] Support Dimm temperature sensor

---
 CMakeLists.txt                                     |  16 +
 include/DIMMTempSensor.hpp                         |  47 +++
 include/MUXUtils.hpp                               |  18 +
 include/Utils.hpp                                  |  10 +
 .../xyz.openbmc_project.dimmtempsensor.service     |  13 +
 src/DIMMTempSensor.cpp                             | 407 +++++++++++++++++++++
 src/MUXUtils.cpp                                   |  73 ++++
 src/Utils.cpp                                      |  58 +++
 8 files changed, 642 insertions(+)
 create mode 100755 include/DIMMTempSensor.hpp
 create mode 100755 include/MUXUtils.hpp
 create mode 100755 service_files/xyz.openbmc_project.dimmtempsensor.service
 create mode 100755 src/DIMMTempSensor.cpp
 create mode 100755 src/MUXUtils.cpp

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 093a393..47250cf 100755
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -54,6 +54,7 @@ option (BMC_CPU_SENSOR_TCONTROL "Enable Tcontrol Threshold setting" ON)
 option (DISABLE_MOSTEMP "Disable installing MOS temperature sensor" OFF)
 option (DISABLE_HOST_MEM_ECC "Disable host memory ECC sensor" OFF)
 option (DISABLE_MNVME "Disable installing MCT NVME sensor" OFF)
+option (DISABLE_DIMMTEMP "Disable installing DIMM temperature sensor" OFF)
 
 include ("cmake/HunterGate.cmake")
 
@@ -87,6 +88,8 @@ set (NVME_SRC_FILES src/Utils.cpp src/NVMeSensorMain.cpp src/NVMeSensor.cpp src/
 
 set (MOSTEMP_SRC_FILES src/Utils.cpp src/Thresholds.cpp)
 
+set (DIMMTEMP_SRC_FILES src/Utils.cpp src/MUXUtils.cpp src/Thresholds.cpp)
+
 set (EXTERNAL_PACKAGES Boost sdbusplus-project nlohmann-json)
 set (SENSOR_LINK_LIBS -lsystemd stdc++fs sdbusplus)
 
@@ -233,6 +236,11 @@ add_dependencies (mostempsensor sdbusplus-project)
 target_link_libraries (mostempsensor ${SENSOR_LINK_LIBS})
 target_link_libraries (mostempsensor i2c)
 
+add_executable (dimmtempsensor src/DIMMTempSensor.cpp ${DIMMTEMP_SRC_FILES})
+add_dependencies (dimmtempsensor sdbusplus-project)
+target_link_libraries (dimmtempsensor ${SENSOR_LINK_LIBS})
+target_link_libraries (dimmtempsensor i2c)
+
 add_executable (hostmemoryeccsensor src/HostMemoryEccSenosr.cpp)
 add_dependencies (hostmemoryeccsensor sdbusplus-project)
 target_link_libraries (hostmemoryeccsensor ${SENSOR_LINK_LIBS})
@@ -376,6 +384,14 @@ if (NOT DISABLE_MOSTEMP)
     )
 endif ()
 
+if (NOT DISABLE_DIMMTEMP)
+    install (TARGETS dimmtempsensor DESTINATION bin)
+    install (
+        FILES ${SERVICE_FILE_SRC_DIR}/xyz.openbmc_project.dimmtempsensor.service
+              DESTINATION ${SERVICE_FILE_INSTALL_DIR}
+    )
+endif ()
+
 if (NOT DISABLE_HOST_MEM_ECC)
     install (TARGETS hostmemoryeccsensor DESTINATION bin)
     install (FILES
diff --git a/include/DIMMTempSensor.hpp b/include/DIMMTempSensor.hpp
new file mode 100755
index 0000000..17747e1
--- /dev/null
+++ b/include/DIMMTempSensor.hpp
@@ -0,0 +1,47 @@
+#pragma once
+#include "sensor.hpp"
+
+#include <boost/asio/deadline_timer.hpp>
+#include <boost/container/flat_map.hpp>
+#include <chrono>
+#include <limits>
+#include <vector>
+
+struct DIMMTempSensor : public Sensor
+{
+    DIMMTempSensor(std::shared_ptr<sdbusplus::asio::connection>& conn,
+                  boost::asio::io_service& io,
+                  const std::string& sensorClass,
+                  const std::string& muxName,
+                  const std::string& sensorName,
+                  const std::string& sensorConfiguration,
+                  sdbusplus::asio::object_server& objectServer,
+                  std::vector<thresholds::Threshold>&& thresholds,
+                  uint8_t muxBusId, uint8_t muxAddress,
+                  uint8_t dimmAddress, uint8_t tempReg,
+                  uint8_t offset,uint8_t dimmGroupCounter,
+                  uint8_t delayTime);
+    ~DIMMTempSensor();
+
+    void checkThresholds(void) override;
+    void read(void);
+    void init(void);
+
+    std::string muxName;
+    uint8_t muxBusId;
+    uint8_t muxAddress;
+    uint8_t dimmAddress;
+    uint8_t tempReg;
+    uint8_t offset;
+    uint8_t dimmGroupCounter;
+    uint8_t delayTime;
+    bool enableMux;
+
+  private:
+    void selectMux();
+    int getDimmRegsInfoWord(uint8_t dimmAddress, uint8_t regs, int32_t* pu16data);
+    sdbusplus::asio::object_server& objectServer;
+    std::shared_ptr<sdbusplus::asio::connection> dbusConnection;
+    boost::asio::deadline_timer waitTimer;
+    uint8_t PowerDelayCounter;
+};
\ No newline at end of file
diff --git a/include/MUXUtils.hpp b/include/MUXUtils.hpp
new file mode 100755
index 0000000..f202827
--- /dev/null
+++ b/include/MUXUtils.hpp
@@ -0,0 +1,18 @@
+#pragma once
+#include "VariantVisitors.hpp"
+
+#include <iostream>
+#include <map>
+#include <string>
+
+enum MuxList {
+    Invalid,
+    PCA9544
+};
+
+static const std::map<std::string, MuxList> MuxTable {
+        { "PCA9544", PCA9544 }
+};
+
+MuxList resolveMuxList(std::string input);
+int switchPCA9544(uint8_t busId, uint8_t address, uint8_t regs);
\ No newline at end of file
diff --git a/include/Utils.hpp b/include/Utils.hpp
index 92efbe3..8bebb7e 100755
--- a/include/Utils.hpp
+++ b/include/Utils.hpp
@@ -46,8 +46,11 @@ bool findFiles(const std::filesystem::path dirPath,
                unsigned int symlinkDepth = 1);
 bool isPowerOn(void);
 bool hasBiosPost(void);
+void setOwnerStatus(uint32_t status);
+uint32_t getOwnerStatus(void);
 bool getPowerStatus(const std::shared_ptr<sdbusplus::asio::connection>& conn);
 void setupPowerMatch(const std::shared_ptr<sdbusplus::asio::connection>& conn);
+void setupOwnerMatch(const std::shared_ptr<sdbusplus::asio::connection>& conn);
 bool getSensorConfiguration(
     const std::string& type,
     const std::shared_ptr<sdbusplus::asio::connection>& dbusConnection,
@@ -98,6 +101,13 @@ const static constexpr char* interface =
 const static constexpr char* path = "/xyz/openbmc_project/state/os";
 const static constexpr char* property = "OperatingSystemState";
 } // namespace post
+namespace status
+{
+const static constexpr char* busname = "xyz.openbmc_project.Settings";
+const static constexpr char* interface = "xyz.openbmc_project.OEM.SensorStatus";
+const static constexpr char* path = "/xyz/openbmc_project/oem/SensorStatus";
+const static constexpr char* property = "DIMMSensorStatus";
+} // namespace status
 
 namespace association
 {
diff --git a/service_files/xyz.openbmc_project.dimmtempsensor.service b/service_files/xyz.openbmc_project.dimmtempsensor.service
new file mode 100755
index 0000000..bb31e3a
--- /dev/null
+++ b/service_files/xyz.openbmc_project.dimmtempsensor.service
@@ -0,0 +1,13 @@
+[Unit]
+Description=DIMM Temp Sensor
+StopWhenUnneeded=false
+Requires=xyz.openbmc_project.EntityManager.service
+After=xyz.openbmc_project.EntityManager.service
+
+[Service]
+Restart=always
+RestartSec=5
+ExecStart=/usr/bin/dimmtempsensor
+
+[Install]
+WantedBy=multi-user.target
\ No newline at end of file
diff --git a/src/DIMMTempSensor.cpp b/src/DIMMTempSensor.cpp
new file mode 100755
index 0000000..e0c0e9a
--- /dev/null
+++ b/src/DIMMTempSensor.cpp
@@ -0,0 +1,407 @@
+#include "DIMMTempSensor.hpp"
+
+#include "Utils.hpp"
+#include "MUXUtils.hpp"
+#include "VariantVisitors.hpp"
+
+#include <math.h>
+
+#include <boost/algorithm/string.hpp>
+#include <boost/algorithm/string/predicate.hpp>
+#include <boost/algorithm/string/replace.hpp>
+#include <chrono>
+#include <iostream>
+#include <limits>
+#include <numeric>
+#include <sdbusplus/asio/connection.hpp>
+#include <sdbusplus/asio/object_server.hpp>
+#include <vector>
+
+extern "C" {
+#include <i2c/smbus.h>
+#include <linux/i2c-dev.h>
+}
+
+constexpr const bool debug = false;
+
+constexpr const char* supportClass = "MUX";
+constexpr const char* configInterface =
+    "xyz.openbmc_project.Configuration.DIMMTempSensor";
+static constexpr double TempMaxReading = 0xFF;
+static constexpr double TempMinReading = 0;
+
+static constexpr double DimmAddress[] =
+{
+    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
+};
+
+static constexpr uint8_t DIMM_CURRENT_TEMP_REG = 0x05;
+
+boost::container::flat_map<std::string, std::unique_ptr<DIMMTempSensor>> sensors;
+
+DIMMTempSensor::DIMMTempSensor(std::shared_ptr<sdbusplus::asio::connection>& conn,
+                             boost::asio::io_service& io,
+                             const std::string& sensorClass,
+                             const std::string& muxName,
+                             const std::string& sensorName,
+                             const std::string& sensorConfiguration,
+                             sdbusplus::asio::object_server& objectServer,
+                             std::vector<thresholds::Threshold>&& thresholdData,
+                             uint8_t muxBusId, uint8_t muxAddress,
+                             uint8_t dimmAddress, uint8_t tempReg,
+                             uint8_t offset,uint8_t dimmGroupCounter,
+                             uint8_t delayTime) :
+    Sensor(boost::replace_all_copy(sensorName, " ", "_"),
+           std::move(thresholdData), sensorConfiguration,
+           "xyz.openbmc_project.Configuration.DIMMTemp", TempMaxReading,
+           TempMinReading),
+    objectServer(objectServer), dbusConnection(conn), waitTimer(io),
+    muxName(muxName), muxBusId(muxBusId), muxAddress(muxAddress), dimmAddress(dimmAddress),
+    tempReg(tempReg),offset(offset),dimmGroupCounter(dimmGroupCounter),delayTime(delayTime)
+{
+    sensorInterface = objectServer.add_interface(
+        "/xyz/openbmc_project/sensors/temperature/" + name,
+        "xyz.openbmc_project.Sensor.Value");
+
+    if (thresholds::hasWarningInterface(thresholds))
+    {
+        thresholdInterfaceWarning = objectServer.add_interface(
+            "/xyz/openbmc_project/sensors/temperature/" + name,
+            "xyz.openbmc_project.Sensor.Threshold.Warning");
+    }
+    if (thresholds::hasCriticalInterface(thresholds))
+    {
+        thresholdInterfaceCritical = objectServer.add_interface(
+            "/xyz/openbmc_project/sensors/temperature/" + name,
+            "xyz.openbmc_project.Sensor.Threshold.Critical");
+    }
+    association = objectServer.add_interface(
+        "/xyz/openbmc_project/sensors/temperature/" + name,
+        "org.openbmc.Associations");
+
+    if(sensorClass == supportClass)
+    {
+        enableMux = true;
+    }
+    else
+    {
+        enableMux = false;
+    }
+
+    PowerDelayCounter = delayTime;
+
+    setupPowerMatch(conn);
+    setupOwnerMatch(conn);
+}
+
+DIMMTempSensor::~DIMMTempSensor()
+{
+    waitTimer.cancel();
+    objectServer.remove_interface(thresholdInterfaceWarning);
+    objectServer.remove_interface(thresholdInterfaceCritical);
+    objectServer.remove_interface(sensorInterface);
+    objectServer.remove_interface(association);
+}
+
+void DIMMTempSensor::init(void)
+{
+    setInitialProperties(dbusConnection);
+    read();
+}
+
+void DIMMTempSensor::checkThresholds(void)
+{
+    thresholds::checkThresholds(this);
+}
+
+void DIMMTempSensor::selectMux()
+{
+    switch(resolveMuxList(muxName))
+    {
+        case PCA9544:
+            static constexpr uint8_t PCA9544TempBase = 0x04;
+            switchPCA9544(muxBusId,muxAddress,PCA9544TempBase+((offset*dimmGroupCounter)/(sizeof(DimmAddress)/ sizeof(double))));
+            break;
+        default:
+            std::cerr << "Not support MUX type\n";
+            break;
+    }
+
+}
+
+int DIMMTempSensor::getDimmRegsInfoWord(uint8_t dimmAddress,uint8_t regs, int32_t* pu16data)
+{
+    std::string i2cBus = "/dev/i2c-" + std::to_string(muxBusId);
+    int fd = open(i2cBus.c_str(), O_RDWR);
+    size_t i = 0;
+
+    if (fd < 0)
+    {
+        std::cerr << " unable to open i2c device" << i2cBus << "  err=" << fd
+                  << "\n";
+        return -1;
+    }
+
+    if (ioctl(fd, I2C_SLAVE_FORCE, dimmAddress) < 0)
+    {
+        std::cerr << " unable to set device address\n";
+        close(fd);
+        return -1;
+    }
+
+    unsigned long funcs = 0;
+    if (ioctl(fd, I2C_FUNCS, &funcs) < 0)
+    {
+        std::cerr << " not support I2C_FUNCS\n";
+        close(fd);
+        return -1;
+    }
+
+    if (!(funcs & I2C_FUNC_SMBUS_READ_WORD_DATA))
+    {
+        std::cerr << " not support I2C_FUNC_SMBUS_READ_WORD_DATA\n";
+        close(fd);
+        return -1;
+    }
+
+    *pu16data = i2c_smbus_read_word_data(fd, regs);
+    close(fd);
+
+    if (*pu16data < 0)
+    {
+        if constexpr (debug)
+        {
+            std::cerr << " read word data failed at " << static_cast<int>(regs) << "\n";
+        }
+        return -1;
+    }
+
+    uint8_t tempLSB = ((*pu16data & 0x0000ff00) >> 8) >> 2;
+    uint8_t tempMSB = (((*pu16data & 0x000000ff) << 8)&0x00001f00) >> 2;
+
+    *pu16data = (tempMSB+tempLSB)*0.25;
+
+    return 0;
+}
+
+void DIMMTempSensor::read(void)
+{
+    static constexpr size_t pollTime = 1; // in seconds
+
+    waitTimer.expires_from_now(boost::posix_time::seconds(pollTime));
+    waitTimer.async_wait([this](const boost::system::error_code& ec) {
+        if (ec == boost::asio::error::operation_aborted)
+        {
+            return; // we're being cancelled
+        }
+        // read timer error
+        else if (ec)
+        {
+            std::cerr << "timer error\n";
+            return;
+        }
+
+        if (!isPowerOn())
+        {
+            setOwnerStatus(0x00);
+        }
+
+        if (getOwnerStatus() == 0x00)
+        {
+            updateValueInvalid(true);
+            PowerDelayCounter = 0;
+            read();
+            return;
+        }
+
+        if(PowerDelayCounter < delayTime)
+        {
+            updateValueInvalid(true);
+            PowerDelayCounter = PowerDelayCounter + 1;
+            read();
+            return;
+        }
+
+        int32_t temp = 0;
+        int32_t tempSum = 0;
+        bool i2cSuccess = false;
+        if(enableMux)
+        {
+            selectMux();
+        }
+        for(int i=0;i<dimmGroupCounter;i++)
+        {
+            int ret = getDimmRegsInfoWord(dimmAddress+i, tempReg, &temp);
+            if(ret >=0)
+            {
+                if(tempSum<=temp)
+                {
+                    tempSum = temp;
+                }
+                i2cSuccess=true;
+            }
+        }
+        if (i2cSuccess)
+        {
+            double v = static_cast<double>(tempSum);
+            if constexpr (debug)
+            {
+                std::cerr << "Value update to " << (double)v << " raw reading "
+                          << static_cast<int>(tempSum) << "\n";
+            }
+            updateValueInvalid(false);
+            updateValue(v);
+        }
+        else
+        {
+            if constexpr (debug)
+            {
+                std::cerr << "Invalid read getDimmRegsInfoWord\n";
+            }
+            updateValueInvalid(true);
+            updateValue(-1);
+        }
+        read();
+    });
+}
+
+void createSensors(
+    boost::asio::io_service& io, sdbusplus::asio::object_server& objectServer,
+    boost::container::flat_map<std::string, std::unique_ptr<DIMMTempSensor>>&
+        sensors,
+    std::shared_ptr<sdbusplus::asio::connection>& dbusConnection)
+{
+    if (!dbusConnection)
+    {
+        std::cerr << "Connection not created\n";
+        return;
+    }
+
+    dbusConnection->async_method_call(
+        [&io, &objectServer, &dbusConnection, &sensors](
+            boost::system::error_code ec, const ManagedObjectType& resp) {
+            if (ec)
+            {
+                std::cerr << "Error contacting entity manager\n";
+                return;
+            }
+            for (const auto& pathPair : resp)
+            {
+                for (const auto& entry : pathPair.second)
+                {
+                    if (entry.first != configInterface)
+                    {
+                        continue;
+                    }
+
+                    std::string sensorClass =
+                        loadVariant<std::string>(entry.second, "Class");
+
+                    std::string muxName =
+                        loadVariant<std::string>(entry.second, "Name");
+
+                    uint8_t muxBusId = loadVariant<uint8_t>(entry.second, "Bus");
+
+                    uint8_t muxAddress =
+                        loadVariant<uint8_t>(entry.second, "Address");
+
+                    uint8_t dimmSlotNum = loadVariant<uint8_t>(entry.second, "DimmSlotNum");
+
+                    uint8_t dimmGroupCounter = loadVariant<uint8_t>(entry.second, "DimmGroupCounter");
+
+                    uint8_t delayTime = loadVariant<uint8_t>(entry.second, "DelayTime");
+
+                    std::vector<thresholds::Threshold> sensorThresholds;
+                    if (!parseThresholdsFromConfig(pathPair.second,
+                                                   sensorThresholds))
+                    {
+                        std::cerr << "error populating thresholds for " << muxName
+                                  << "\n";
+                    }
+
+                    for(int i=0;i<dimmSlotNum/dimmGroupCounter;i++)
+                    {
+                        std::string sensorName = "Name"+  std::to_string(i);
+                        std::string dimmName =
+                            loadVariant<std::string>(entry.second, sensorName);
+                        uint8_t selectDimmAddress = DimmAddress[(i*dimmGroupCounter)%(sizeof(DimmAddress)/ sizeof(double))];
+                        std::vector<thresholds::Threshold> dimmThresholds(sensorThresholds);
+
+                        if constexpr (debug)
+                        {
+                            std::cerr
+                                << "Configuration parsed for \n\t" << entry.first
+                                << "\n"
+                                << "with\n"
+                                << "\tSensor Class: " << sensorClass << "\n"
+                                << "\tMUX Name: " << muxName << "\n"
+                                << "\tMUX Bus: " << static_cast<int>(muxBusId) << "\n"
+                                << "\tMUX BUS Address: " << static_cast<int>(muxAddress)
+                                << "\n"
+                                << "\tDIMM Name: " << dimmName << "\n"
+                                << "\tDIMM Address: " << static_cast<int>(selectDimmAddress) << "\n"
+                                << "\tDIMM Reg: " << static_cast<int>(DIMM_CURRENT_TEMP_REG) << "\n";
+                        }
+
+                        auto& sensor = sensors[dimmName];
+
+                        sensor = std::make_unique<DIMMTempSensor>(
+                            dbusConnection, io, sensorClass, muxName, dimmName, pathPair.first, objectServer,
+                            std::move(dimmThresholds), muxBusId, muxAddress,selectDimmAddress,
+                            DIMM_CURRENT_TEMP_REG,i,dimmGroupCounter,delayTime);
+
+                        sensor->init();
+                    }
+                }
+            }
+        },
+        entityManagerName, "/", "org.freedesktop.DBus.ObjectManager",
+        "GetManagedObjects");
+}
+
+int main(int argc, char** argv)
+{
+    boost::asio::io_service io;
+    auto systemBus = std::make_shared<sdbusplus::asio::connection>(io);
+    systemBus->request_name("xyz.openbmc_project.DIMMTempSensor");
+    sdbusplus::asio::object_server objectServer(systemBus);
+
+    io.post([&]() { createSensors(io, objectServer, sensors, systemBus); });
+
+    boost::asio::deadline_timer configTimer(io);
+
+    std::function<void(sdbusplus::message::message&)> eventHandler =
+        [&](sdbusplus::message::message& message) {
+            configTimer.expires_from_now(boost::posix_time::seconds(1));
+            // create a timer because normally multiple properties change
+            configTimer.async_wait([&](const boost::system::error_code& ec) {
+                if (ec == boost::asio::error::operation_aborted)
+                {
+                    return; // we're being canceled
+                }
+                // config timer error
+                else if (ec)
+                {
+                    std::cerr << "timer error\n";
+                    return;
+                }
+                createSensors(io, objectServer, sensors, systemBus);
+                if (sensors.empty())
+                {
+                    std::cout << "Configuration not detected\n";
+                }
+            });
+        };
+
+    sdbusplus::bus::match::match configMatch(
+        static_cast<sdbusplus::bus::bus&>(*systemBus),
+        "type='signal',member='PropertiesChanged',"
+        "path_namespace='" +
+            std::string(inventoryPath) +
+            "',"
+            "arg0namespace='" +
+            configInterface + "'",
+        eventHandler);
+
+    io.run();
+}
diff --git a/src/MUXUtils.cpp b/src/MUXUtils.cpp
new file mode 100755
index 0000000..d27c623
--- /dev/null
+++ b/src/MUXUtils.cpp
@@ -0,0 +1,73 @@
+#include "MUXUtils.hpp"
+
+#include <iostream>
+
+#include <fcntl.h>
+#include <unistd.h>
+
+extern "C" {
+#include <sys/ioctl.h>
+#include <i2c/smbus.h>
+#include <linux/i2c-dev.h>
+}
+
+constexpr const bool debug = false;
+
+MuxList resolveMuxList(std::string input)
+{
+    auto it = MuxTable.find(input);
+    if( it != MuxTable.end()) {
+        return it->second;
+    }
+    return Invalid;
+}
+
+int switchPCA9544(uint8_t busId, uint8_t address, uint8_t regs)
+{
+    std::string i2cBus = "/dev/i2c-" + std::to_string(busId);
+    int fd = open(i2cBus.c_str(), O_RDWR);
+    size_t i = 0;
+
+    if (fd < 0)
+    {
+        std::cerr << " unable to open i2c device" << i2cBus << "  err=" << fd
+                  << "\n";
+        return -1;
+    }
+
+    if (ioctl(fd, I2C_SLAVE_FORCE, address) < 0)
+    {
+        std::cerr << " unable to set device address\n";
+        close(fd);
+        return -1;
+    }
+
+    unsigned long funcs = 0;
+    if (ioctl(fd, I2C_FUNCS, &funcs) < 0)
+    {
+        std::cerr << " not support I2C_FUNCS\n";
+        close(fd);
+        return -1;
+    }
+
+    if (!(funcs & I2C_FUNC_SMBUS_WRITE_BYTE))
+    {
+        std::cerr << " not support I2C_FUNC_SMBUS_WRITE_BYTE\n";
+        close(fd);
+        return -1;
+    }
+
+    int ret = i2c_smbus_write_byte(fd, regs);
+    close(fd);
+
+    if (ret < 0)
+    {
+        if constexpr (debug)
+        {
+            std::cerr << " write byte data failed at " << static_cast<int>(regs) << "\n";
+        }
+        return -1;
+    }
+
+    return 0;
+}
\ No newline at end of file
diff --git a/src/Utils.cpp b/src/Utils.cpp
index 9e54185..6f4903d 100755
--- a/src/Utils.cpp
+++ b/src/Utils.cpp
@@ -35,9 +35,11 @@ namespace fs = std::filesystem;
 
 static bool powerStatusOn = false;
 static bool biosHasPost = false;
+static uint32_t ownerStatus = 0x00;
 
 static std::unique_ptr<sdbusplus::bus::match::match> powerMatch = nullptr;
 static std::unique_ptr<sdbusplus::bus::match::match> postMatch = nullptr;
+static std::unique_ptr<sdbusplus::bus::match::match> ownerMatch = nullptr;
 
 bool getSensorConfiguration(
     const std::string& type,
@@ -136,6 +138,20 @@ bool hasBiosPost(void)
     return biosHasPost;
 }
 
+void setOwnerStatus(uint32_t status)
+{
+    ownerStatus = status;
+}
+
+uint32_t getOwnerStatus(void)
+{
+    if (!ownerMatch)
+    {
+        throw std::runtime_error("Owner Match Not Created");
+    }
+    return ownerStatus;
+}
+
 bool getPowerStatus(const std::shared_ptr<sdbusplus::asio::connection>& conn)
 {
     conn->async_method_call(
@@ -251,6 +267,48 @@ void setupPowerMatch(const std::shared_ptr<sdbusplus::asio::connection>& conn)
         post::interface, post::property);
 }
 
+void setupOwnerMatch(const std::shared_ptr<sdbusplus::asio::connection>& conn)
+{
+    static boost::asio::steady_timer timer(conn->get_io_context());
+
+    if (ownerMatch)
+    {
+        return;
+    }
+
+    ownerMatch = std::make_unique<sdbusplus::bus::match::match>(
+        static_cast<sdbusplus::bus::bus&>(*conn),
+        "type='signal',interface='" + std::string(properties::interface) +
+            "',path='" + std::string(status::path) + "',arg0='" +
+            std::string(status::interface) + "'",
+        [](sdbusplus::message::message& message) {
+            std::string objectName;
+            boost::container::flat_map<std::string, std::variant<uint32_t>>
+                values;
+            message.read(objectName, values);
+            auto findState = values.find(status::property);
+            if (findState != values.end())
+            {
+                ownerStatus = std::get<uint32_t>(findState->second);
+            }
+        });
+
+    conn->async_method_call(
+        [](boost::system::error_code ec,
+           const std::variant<uint32_t>& state) {
+            if (ec)
+            {
+                // we commonly come up before power control, we'll capture the
+                // property change later
+                std::cerr << "Get owner method error" << ec.message() << std::endl;
+                return;
+            }
+            ownerStatus = std::get<uint32_t>(state);
+        },
+        status::busname, status::path, properties::interface, properties::get,
+        status::interface, status::property);
+}
+
 // replaces limits if MinReading and MaxReading are found.
 void findLimits(std::pair<double, double>& limits,
                 const SensorBaseConfiguration* data)
