From a9e450803ff3962887d43c1d0334f75148d2b311 Mon Sep 17 00:00:00 2001
From: Ray Lue <ray.lue@mic.com.tw>
Date: Thu, 12 Mar 2020 14:07:00 +0800
Subject: [PATCH 1/1] add ipmi power status sensor

---
 CMakeLists.txt                                |  13 ++
 .../xyz.openbmc_project.aclostsensor.service  |  15 ++
 src/AcLostSensor.cpp                          | 133 ++++++++++++++++++
 3 files changed, 161 insertions(+)
 create mode 100644 service_files/xyz.openbmc_project.aclostsensor.service
 create mode 100644 src/AcLostSensor.cpp

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 7cef855..e81611b 100755
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -49,6 +49,7 @@ option (DISABLE_NVME "Disable installing NVME sensor" ON)
 
 option (DISABLE_PROCESSOR "Disable installing processor sensor" OFF)
 option (DISABLE_ACPI "Disable installing acpi sensor" OFF)
+option (DISABLE_POWER_STATUS "Disable installing power status sensor" OFF)
 
 include ("cmake/HunterGate.cmake")
 
@@ -211,6 +212,10 @@ add_executable (eventsensor src/eventSensor.cpp)
 add_dependencies (eventsensor sdbusplus-project)
 target_link_libraries (eventsensor ${SENSOR_LINK_LIBS})
 
+add_executable (aclostsensor src/AcLostSensor.cpp)
+add_dependencies (aclostsensor sdbusplus-project)
+target_link_libraries (aclostsensor ${SENSOR_LINK_LIBS})
+
 if (NOT DISABLE_NVME)
     add_executable (nvmesensor ${NVME_SRC_FILES})
     add_dependencies (nvmesensor sdbusplus-project)
@@ -328,3 +333,11 @@ install (TARGETS eventsensor DESTINATION bin)
 install (FILES ${SERVICE_FILE_SRC_DIR}/xyz.openbmc_project.eventsensor.service
             DESTINATION ${SERVICE_FILE_INSTALL_DIR})
 
+if (NOT DISABLE_POWER_STATUS)
+    install (TARGETS aclostsensor DESTINATION bin)
+    install (FILES
+                 ${SERVICE_FILE_SRC_DIR}/xyz.openbmc_project.aclostsensor.service
+                 DESTINATION ${SERVICE_FILE_INSTALL_DIR})
+endif ()
+
+
diff --git a/service_files/xyz.openbmc_project.aclostsensor.service b/service_files/xyz.openbmc_project.aclostsensor.service
new file mode 100644
index 0000000..ceff86f
--- /dev/null
+++ b/service_files/xyz.openbmc_project.aclostsensor.service
@@ -0,0 +1,15 @@
+[Unit]
+Description=IPMI defined ac lost Sensor
+StopWhenUnneeded=false
+After=xyz.openbmc_project.Logging.IPMI.service
+After=sync-time-initial.service
+
+[Service]
+Restart=always
+RestartSec=5
+ExecStartPre=/bin/bash -c 'while [ ! -e /run/time_sync_done ]; do sleep 1; done'
+ExecStart=/usr/bin/env aclostsensor
+SyslogIdentifier=aclost-sensor
+
+[Install]
+WantedBy=multi-user.target
diff --git a/src/AcLostSensor.cpp b/src/AcLostSensor.cpp
new file mode 100644
index 0000000..b459f7b
--- /dev/null
+++ b/src/AcLostSensor.cpp
@@ -0,0 +1,133 @@
+/*
+// Copyright (c) 2018 Intel Corporation
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+*/
+
+#include <Utils.hpp>
+#include <boost/algorithm/string/predicate.hpp>
+#include <boost/asio.hpp>
+#include <chrono>
+#include <ctime>
+#include <iostream>
+#include <sdbusplus/asio/connection.hpp>
+#include <sdbusplus/asio/object_server.hpp>
+#include <sdbusplus/asio/sd_event.hpp>
+#include <sdbusplus/bus.hpp>
+#include <sdbusplus/exception.hpp>
+#include <sdbusplus/server.hpp>
+#include <sdbusplus/timer.hpp>
+#include <sensor.hpp>
+#include <systemd/sd-journal.h>
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+
+static constexpr bool DEBUG = true;
+
+static constexpr char const* ipmiSELService = "xyz.openbmc_project.Logging.IPMI";
+static constexpr char const* ipmiSELPath = "/xyz/openbmc_project/Logging/IPMI";
+static constexpr char const* ipmiSELAddInterface = "xyz.openbmc_project.Logging.IPMI";
+
+static const std::string ipmiSELAddMessage = "SEL Entry";
+static const std::string sensorPath = "/xyz/openbmc_project/sensors/power_unit/POWER_STATUS";
+
+static constexpr size_t selEvtDataMaxSize = 3;
+
+int execmd(char* cmd,char* result) {
+    char buffer[128];
+    FILE* pipe = popen(cmd, "r");
+    if (!pipe)
+        return -1;
+
+    while(!feof(pipe)) {
+        if(fgets(buffer, 128, pipe)){
+            strcat(result,buffer);
+        }
+    }
+    pclose(pipe);
+    return 0;
+}
+
+
+int main()
+{
+
+    int rc = 0;
+    char command[100];
+    char temp[50];
+    uint8_t ResetFlag=0;
+    uint8_t data=0;
+
+    // setup connection to dbus
+    boost::asio::io_service io;
+    auto systemBus = std::make_shared<sdbusplus::asio::connection>(io);
+    auto objServer = sdbusplus::asio::object_server(systemBus);
+
+    // setup object server, define interface
+    systemBus->request_name("xyz.openbmc_project.AcLostSensor");
+
+    // add interface into sensor tree
+    std::shared_ptr<sdbusplus::asio::dbus_interface> iface =
+        objServer.add_interface(sensorPath,sensorValueInterface);
+
+    double value = 0;
+    //dummy value, just identifier for sdr command   
+    iface->register_property("Value", value);
+    iface->initialize();
+
+    sprintf(command, "devmem 0x1e6e203c");
+    memset(temp, 0, sizeof(temp));
+    rc = execmd((char *)command, temp);
+    if (rc != 0)
+    {
+        std::cerr << "get SCU3C register failed\n";
+    }
+
+    ResetFlag=(strtoull(temp,NULL,0)&0x1);
+
+    if (ResetFlag==1)
+    {
+        uint16_t genid = 0x20;
+        bool assert = 1;
+        std::vector<uint8_t> eventData(selEvtDataMaxSize, 0xFF);
+        eventData[0] = 4;
+
+        sdbusplus::message::message writeSEL = systemBus->new_method_call(
+            ipmiSELService, ipmiSELPath, ipmiSELAddInterface, "IpmiSelAdd");
+        writeSEL.append(ipmiSELAddMessage, std::string(sensorPath), eventData, assert,
+                    genid);
+        try
+        {
+            systemBus->call(writeSEL);
+        }
+        catch (sdbusplus::exception_t& e)
+        {
+            std::cerr << "call IpmiSelAdd failed\n";
+        }
+
+        data=strtoull(temp,NULL,0);
+        memset(command, 0, sizeof(command));
+        snprintf(command,sizeof(command),"devmem 0x1e6e203c 32 0x%x",data-1);
+        rc = system(command);
+        if (rc != 0)
+        {
+            std::cerr << "set SCU3C register failed\n";
+        }
+    }
+
+    io.run();
+
+    return 0;
+}
-- 
2.22.0

