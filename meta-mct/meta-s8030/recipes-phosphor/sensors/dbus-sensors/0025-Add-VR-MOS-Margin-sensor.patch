From 153bae78ec47f0523df563766a29be58fdab3a8d Mon Sep 17 00:00:00 2001
From: Ray Lue <ray.lue@mic.com.tw>
Date: Thu, 12 Mar 2020 16:18:38 +0800
Subject: [PATCH 1/1] Add-VR-MOS-Margin-sensor

---
 CMakeLists.txt                                |  15 +
 include/CPUSensor.hpp                         |   1 +
 include/MOSTempSensor.hpp                     |  33 ++
 .../xyz.openbmc_project.mostempsensor.service |  11 +
 src/CPUSensor.cpp                             |  15 +
 src/CPUSensorMain.cpp                         |   4 +-
 src/MOSTempSensor.cpp                         | 297 ++++++++++++++++++
 7 files changed, 374 insertions(+), 2 deletions(-)
 create mode 100755 include/MOSTempSensor.hpp
 create mode 100755 service_files/xyz.openbmc_project.mostempsensor.service
 create mode 100755 src/MOSTempSensor.cpp

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 094822c..4f48e56 100755
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -51,6 +51,7 @@ option (DISABLE_PROCESSOR "Disable installing processor sensor" OFF)
 option (DISABLE_ACPI "Disable installing acpi sensor" OFF)
 option (DISABLE_POWER_STATUS "Disable installing power status sensor" OFF)
 option (BMC_CPU_SENSOR_TCONTROL "Enable Tcontrol Threshold setting" ON)
+option (DISABLE_MOSTEMP "Disable installing MOS temperature sensor" OFF)
 
 include ("cmake/HunterGate.cmake")
 
@@ -82,6 +83,8 @@ set (PSU_SRC_FILES src/Utils.cpp src/PSUSensor.cpp src/Thresholds.cpp
 
 set (NVME_SRC_FILES src/Utils.cpp src/NVMeSensorMain.cpp src/NVMeSensor.cpp src/Thresholds.cpp)
 
+set (MOSTEMP_SRC_FILES src/Utils.cpp src/Thresholds.cpp)
+
 set (EXTERNAL_PACKAGES Boost sdbusplus-project nlohmann-json)
 set (SENSOR_LINK_LIBS -lsystemd stdc++fs sdbusplus)
 
@@ -221,6 +224,11 @@ add_executable (aclostsensor src/AcLostSensor.cpp)
 add_dependencies (aclostsensor sdbusplus-project)
 target_link_libraries (aclostsensor ${SENSOR_LINK_LIBS})
 
+add_executable (mostempsensor src/MOSTempSensor.cpp ${MCUTEMP_SRC_FILES})
+add_dependencies (mostempsensor sdbusplus-project)
+target_link_libraries (mostempsensor ${SENSOR_LINK_LIBS})
+target_link_libraries (mostempsensor i2c)
+
 if (NOT DISABLE_NVME)
     add_executable (nvmesensor ${NVME_SRC_FILES})
     add_dependencies (nvmesensor sdbusplus-project)
@@ -345,4 +353,11 @@ if (NOT DISABLE_POWER_STATUS)
                  DESTINATION ${SERVICE_FILE_INSTALL_DIR})
 endif ()
 
+if (NOT DISABLE_MOSTEMP)
+    install (TARGETS mostempsensor DESTINATION bin)
+    install (
+        FILES ${SERVICE_FILE_SRC_DIR}/xyz.openbmc_project.mostempsensor.service
+              DESTINATION ${SERVICE_FILE_INSTALL_DIR}
+    )
+endif ()
 
diff --git a/include/CPUSensor.hpp b/include/CPUSensor.hpp
index 1f05d2d..18312ee 100755
--- a/include/CPUSensor.hpp
+++ b/include/CPUSensor.hpp
@@ -31,6 +31,7 @@ class CPUSensor : public Sensor
     static constexpr size_t warnAfterErrorCount = 10;
     //static constexpr double maxReading = 127;
     //static constexpr double minReading = -128;
+    static double DieTemp;
     static constexpr const char* labelTcontrol = "Tcontrol";
 
   private:
diff --git a/include/MOSTempSensor.hpp b/include/MOSTempSensor.hpp
new file mode 100755
index 0000000..be022ab
--- /dev/null
+++ b/include/MOSTempSensor.hpp
@@ -0,0 +1,33 @@
+#pragma once
+#include "sensor.hpp"
+
+#include <boost/asio/deadline_timer.hpp>
+#include <boost/container/flat_map.hpp>
+#include <chrono>
+#include <limits>
+#include <vector>
+
+struct MOSTempSensor : public Sensor
+{
+    MOSTempSensor(std::shared_ptr<sdbusplus::asio::connection>& conn,
+                  boost::asio::io_service& io, const std::string& name,
+                  const std::string& sensorConfiguration,
+                  sdbusplus::asio::object_server& objectServer,
+                  std::vector<thresholds::Threshold>&& thresholds,
+                  uint8_t busId, uint8_t mcuAddress, uint8_t tempReg);
+    ~MOSTempSensor();
+
+    void checkThresholds(void) override;
+    void read(void);
+    void init(void);
+
+    uint8_t busId;
+    uint8_t address;
+    uint8_t tempReg;
+
+  private:
+    int getMOSRegsInfoWord(uint8_t regs, int16_t* pu16data);
+    sdbusplus::asio::object_server& objectServer;
+    std::shared_ptr<sdbusplus::asio::connection> dbusConnection;
+    boost::asio::deadline_timer waitTimer;
+};
diff --git a/service_files/xyz.openbmc_project.mostempsensor.service b/service_files/xyz.openbmc_project.mostempsensor.service
new file mode 100755
index 0000000..c839a71
--- /dev/null
+++ b/service_files/xyz.openbmc_project.mostempsensor.service
@@ -0,0 +1,11 @@
+[Unit]
+Description=MOS Temp Sensor
+StopWhenUnneeded=false
+
+[Service]
+Restart=always
+RestartSec=5
+ExecStart=/usr/bin/mostempsensor
+
+[Install]
+WantedBy=multi-user.target
diff --git a/src/CPUSensor.cpp b/src/CPUSensor.cpp
index 8a9942f..1d21585 100644
--- a/src/CPUSensor.cpp
+++ b/src/CPUSensor.cpp
@@ -33,6 +33,8 @@
 #include <string>
 #include <vector>
 
+double CPUSensor::DieTemp=0;
+
 CPUSensor::CPUSensor(const std::string& path, const std::string& objectType,
                      sdbusplus::asio::object_server& objectServer,
                      std::shared_ptr<sdbusplus::asio::connection>& conn,
@@ -165,6 +167,19 @@ void CPUSensor::handleResponse(const boost::system::error_code& err)
 
             updateValueInvalid(false);
 
+            auto findCpu = path.find("peci-cputemp");
+            auto findDie = path.find("temp1");
+            auto findMargin = path.find("temp4");
+            if ((findCpu != std::string::npos) && (findDie != std::string::npos))
+            {
+                CPUSensor::DieTemp = nvalue;
+            }
+            else if ((findCpu != std::string::npos) && (findMargin != std::string::npos))
+            {
+                nvalue = CPUSensor::DieTemp - nvalue;
+                updateValue(nvalue);
+            }
+
 #ifdef BMC_CPU_SENSOR_TCONTROL
             double gTcontrol = gCpuSensors[nameTcontrol]
                                    ? gCpuSensors[nameTcontrol]->value
diff --git a/src/CPUSensorMain.cpp b/src/CPUSensorMain.cpp
index 7e198a1..3902163 100755
--- a/src/CPUSensorMain.cpp
+++ b/src/CPUSensorMain.cpp
@@ -94,8 +94,8 @@ namespace fs = std::filesystem;
 static constexpr const char* configPrefix =
     "xyz.openbmc_project.Configuration.";
 static constexpr std::array<const char*, 1> sensorTypes = {"XeonCPU"};
-static constexpr std::array<const char*, 3> hiddenProps = {
-    CPUSensor::labelTcontrol, "Tthrottle", "Tjmax"};
+static constexpr std::array<const char*, 2> hiddenProps = {
+    CPUSensor::labelTcontrol, "Tthrottle"};
 
 void detectCpuAsync(
     boost::asio::deadline_timer& pingTimer,
diff --git a/src/MOSTempSensor.cpp b/src/MOSTempSensor.cpp
new file mode 100755
index 0000000..dcfccaf
--- /dev/null
+++ b/src/MOSTempSensor.cpp
@@ -0,0 +1,297 @@
+#include "MOSTempSensor.hpp"
+
+#include "Utils.hpp"
+#include "VariantVisitors.hpp"
+
+#include <math.h>
+
+#include <boost/algorithm/string.hpp>
+#include <boost/algorithm/string/predicate.hpp>
+#include <boost/algorithm/string/replace.hpp>
+#include <chrono>
+#include <iostream>
+#include <limits>
+#include <numeric>
+#include <sdbusplus/asio/connection.hpp>
+#include <sdbusplus/asio/object_server.hpp>
+#include <vector>
+
+extern "C" {
+#include <i2c/smbus.h>
+#include <linux/i2c-dev.h>
+}
+
+constexpr const bool debug = false;
+
+constexpr const char* configInterface =
+    "xyz.openbmc_project.Configuration.MOSTempSensor";
+static constexpr double TempMaxReading = 0xFF;
+static constexpr double TempMinReading = 0;
+
+boost::container::flat_map<std::string, std::unique_ptr<MOSTempSensor>> sensors;
+
+MOSTempSensor::MOSTempSensor(std::shared_ptr<sdbusplus::asio::connection>& conn,
+                             boost::asio::io_service& io,
+                             const std::string& sensorName,
+                             const std::string& sensorConfiguration,
+                             sdbusplus::asio::object_server& objectServer,
+                             std::vector<thresholds::Threshold>&& thresholdData,
+                             uint8_t busId, uint8_t address,
+                             uint8_t tempReg) :
+    Sensor(boost::replace_all_copy(sensorName, " ", "_"),
+           std::move(thresholdData), sensorConfiguration,
+           "xyz.openbmc_project.Configuration.MosTemp", TempMaxReading,
+           TempMinReading),
+    objectServer(objectServer), dbusConnection(conn), waitTimer(io),
+    busId(busId), address(address), tempReg(tempReg)
+{
+    sensorInterface = objectServer.add_interface(
+        "/xyz/openbmc_project/sensors/temperature/" + name,
+        "xyz.openbmc_project.Sensor.Value");
+
+    if (thresholds::hasWarningInterface(thresholds))
+    {
+        thresholdInterfaceWarning = objectServer.add_interface(
+            "/xyz/openbmc_project/sensors/temperature/" + name,
+            "xyz.openbmc_project.Sensor.Threshold.Warning");
+    }
+    if (thresholds::hasCriticalInterface(thresholds))
+    {
+        thresholdInterfaceCritical = objectServer.add_interface(
+            "/xyz/openbmc_project/sensors/temperature/" + name,
+            "xyz.openbmc_project.Sensor.Threshold.Critical");
+    }
+    association = objectServer.add_interface(
+        "/xyz/openbmc_project/sensors/temperature/" + name,
+        "org.openbmc.Associations");
+}
+
+MOSTempSensor::~MOSTempSensor()
+{
+    waitTimer.cancel();
+    objectServer.remove_interface(thresholdInterfaceWarning);
+    objectServer.remove_interface(thresholdInterfaceCritical);
+    objectServer.remove_interface(sensorInterface);
+    objectServer.remove_interface(association);
+}
+
+void MOSTempSensor::init(void)
+{
+    setInitialProperties(dbusConnection);
+    read();
+}
+
+void MOSTempSensor::checkThresholds(void)
+{
+    thresholds::checkThresholds(this);
+}
+
+int MOSTempSensor::getMOSRegsInfoWord(uint8_t regs, int16_t* pu16data)
+{
+    std::string i2cBus = "/dev/i2c-" + std::to_string(busId);
+    int fd = open(i2cBus.c_str(), O_RDWR);
+    size_t i = 0;
+
+    if (fd < 0)
+    {
+        std::cerr << " unable to open i2c device" << i2cBus << "  err=" << fd
+                  << "\n";
+        return -1;
+    }
+
+    if (ioctl(fd, I2C_SLAVE_FORCE, address) < 0)
+    {
+        std::cerr << " unable to set device address\n";
+        close(fd);
+        return -1;
+    }
+
+    unsigned long funcs = 0;
+    if (ioctl(fd, I2C_FUNCS, &funcs) < 0)
+    {
+        std::cerr << " not support I2C_FUNCS\n";
+        close(fd);
+        return -1;
+    }
+
+    if (!(funcs & I2C_FUNC_SMBUS_READ_WORD_DATA))
+    {
+        std::cerr << " not support I2C_FUNC_SMBUS_READ_WORD_DATA\n";
+        close(fd);
+        return -1;
+    }
+
+    *pu16data = i2c_smbus_read_word_data(fd, regs);
+    close(fd);
+
+    if (*pu16data < 0)
+    {
+        std::cerr << " read word data failed at " << static_cast<int>(regs)
+                  << "\n";
+        return -1;
+    }
+
+    return 0;
+}
+
+void MOSTempSensor::read(void)
+{
+    static constexpr size_t pollTime = 1; // in seconds
+
+    waitTimer.expires_from_now(boost::posix_time::seconds(pollTime));
+    waitTimer.async_wait([this](const boost::system::error_code& ec) {
+        if (ec == boost::asio::error::operation_aborted)
+        {
+            return; // we're being cancelled
+        }
+        // read timer error
+        else if (ec)
+        {
+            std::cerr << "timer error\n";
+            return;
+        }
+        int16_t temp;
+        int ret = getMOSRegsInfoWord(tempReg, &temp);
+        if (ret >= 0)
+        {
+            double v = static_cast<double>(temp);
+            if constexpr (debug)
+            {
+                std::cerr << "Value update to " << (double)v << "raw reading "
+                          << static_cast<int>(temp) << "\n";
+            }
+            updateValue(v);
+        }
+        else
+        {
+            std::cerr << "Invalid read getMOSRegsInfoWord\n";
+            updateValue(-1);
+        }
+        read();
+    });
+}
+
+void createSensors(
+    boost::asio::io_service& io, sdbusplus::asio::object_server& objectServer,
+    boost::container::flat_map<std::string, std::unique_ptr<MOSTempSensor>>&
+        sensors,
+    std::shared_ptr<sdbusplus::asio::connection>& dbusConnection)
+{
+    if (!dbusConnection)
+    {
+        std::cerr << "Connection not created\n";
+        return;
+    }
+
+    dbusConnection->async_method_call(
+        [&io, &objectServer, &dbusConnection, &sensors](
+            boost::system::error_code ec, const ManagedObjectType& resp) {
+            if (ec)
+            {
+                std::cerr << "Error contacting entity manager\n";
+                return;
+            }
+            for (const auto& pathPair : resp)
+            {
+                for (const auto& entry : pathPair.second)
+                {
+                    if (entry.first != configInterface)
+                    {
+                        continue;
+                    }
+                    std::string name =
+                        loadVariant<std::string>(entry.second, "Name");
+
+                    std::vector<thresholds::Threshold> sensorThresholds;
+                    if (!parseThresholdsFromConfig(pathPair.second,
+                                                   sensorThresholds))
+                    {
+                        std::cerr << "error populating thresholds for " << name
+                                  << "\n";
+                    }
+
+                    uint8_t busId = loadVariant<uint8_t>(entry.second, "Bus");
+
+                    uint8_t address =
+                        loadVariant<uint8_t>(entry.second, "Address");
+
+                    uint8_t tempReg = loadVariant<uint8_t>(entry.second, "Reg");
+
+                    std::string sensorClass =
+                        loadVariant<std::string>(entry.second, "Class");
+
+                    if constexpr (debug)
+                    {
+                        std::cerr
+                            << "Configuration parsed for \n\t" << entry.first
+                            << "\n"
+                            << "with\n"
+                            << "\tName: " << name << "\n"
+                            << "\tBus: " << static_cast<int>(busId) << "\n"
+                            << "\tAddress: " << static_cast<int>(address)
+                            << "\n"
+                            << "\tReg: " << static_cast<int>(tempReg) << "\n"
+                            << "\tClass: " << sensorClass << "\n";
+                    }
+
+                    auto& sensor = sensors[name];
+
+                    sensor = std::make_unique<MOSTempSensor>(
+                        dbusConnection, io, name, pathPair.first, objectServer,
+                        std::move(sensorThresholds), busId, address,
+                        tempReg);
+
+                    sensor->init();
+                }
+            }
+        },
+        entityManagerName, "/", "org.freedesktop.DBus.ObjectManager",
+        "GetManagedObjects");
+}
+
+int main(int argc, char** argv)
+{
+    boost::asio::io_service io;
+    auto systemBus = std::make_shared<sdbusplus::asio::connection>(io);
+    systemBus->request_name("xyz.openbmc_project.MOSTempSensor");
+    sdbusplus::asio::object_server objectServer(systemBus);
+
+    io.post([&]() { createSensors(io, objectServer, sensors, systemBus); });
+
+    boost::asio::deadline_timer configTimer(io);
+
+    std::function<void(sdbusplus::message::message&)> eventHandler =
+        [&](sdbusplus::message::message& message) {
+            configTimer.expires_from_now(boost::posix_time::seconds(1));
+            // create a timer because normally multiple properties change
+            configTimer.async_wait([&](const boost::system::error_code& ec) {
+                if (ec == boost::asio::error::operation_aborted)
+                {
+                    return; // we're being canceled
+                }
+                // config timer error
+                else if (ec)
+                {
+                    std::cerr << "timer error\n";
+                    return;
+                }
+                createSensors(io, objectServer, sensors, systemBus);
+                if (sensors.empty())
+                {
+                    std::cout << "Configuration not detected\n";
+                }
+            });
+        };
+
+    sdbusplus::bus::match::match configMatch(
+        static_cast<sdbusplus::bus::bus&>(*systemBus),
+        "type='signal',member='PropertiesChanged',"
+        "path_namespace='" +
+            std::string(inventoryPath) +
+            "',"
+            "arg0namespace='" +
+            configInterface + "'",
+        eventHandler);
+
+    io.run();
+}
-- 
2.22.0

